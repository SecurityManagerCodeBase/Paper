#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass IEEEtran
\begin_preamble
\usepackage{fancyvrb}
\usepackage{url}
\end_preamble
\options conference
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 1
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
author{BLINDED FOR SUBMISSION}
\end_layout

\begin_layout Plain Layout

%
\backslash
author{
\backslash
IEEEauthorblockN{Zack Coker, Michael Maass, Tianyuan Ding, and Joshua Sunshine}
\end_layout

\begin_layout Plain Layout

%
\backslash
IEEEauthorblockA{School of Computer Science
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

%Carnegie Mellon Univeristy, Pittsburgh, PA
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

%
\backslash
{zfc, mmaass
\backslash
}@cs.cmu.edu, tding@andrew.cmu.edu, sunshine@cs.cmu.edu}}
\end_layout

\end_inset


\end_layout

\begin_layout Title
Fortifying the Java Sandbox
\end_layout

\begin_layout Abstract
The ubiquitously-installed Java Runtime Environment (JRE) executes untrusted
 code inside a sandbox to protect the host machine from potential malicious
 behavior.
 However, dozens of recent exploits have successfully escaped the sandbox,
 thereby enabling attackers to infect countless Java hosts.
 It is essential to distinguish patterns of malicious use from patterns
 of benign use to proactively prevent future exploits.
 We therefore performed an empirical study of benign open-source Java applicatio
ns and compared their use of the sandbox to the usage present in recent
 exploits.
 We found that benign applications with secured sandboxes do not modify
 the security manager, the security policy enforcement mechanism, after
 it is first set and do not attempt to directly use privileged classes.
 Exploits routinely do both.
 We used these results to develop two runtime monitors: the first prevents
 security manager modification, and the second prevents privilege escalation.
 The privilege escalation monitor stops four of ten Metasploit Java exploits
 with negligible overhead.
 The combination of both monitors stops all ten exploits, but incurs significant
 overhead, suggesting that it is best applied to risky settings like running
 applets.
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Plain Layout
Related science:
\end_layout

\begin_layout Plain Layout
1.
 Most Dangerous Code in the World
\end_layout

\begin_layout Plain Layout
2.
 Zero Day Vulnerabilities (Before We Knew It)
\end_layout

\begin_layout Plain Layout
3.
 Password Manager insecurity paper (from Sep 2014)
\end_layout

\begin_layout Plain Layout
Related science probably makes sense to go right before the flag post paragraph.
\end_layout

\begin_layout Plain Layout
This section should define JVMTI so that we can use it everywhere else but
 do not explain much about what it is here -- should not be hard to do (cite
 the docs when doing it)
\end_layout

\begin_layout Plain Layout
Needs to mention JVM to define acronym.
\end_layout

\begin_layout Plain Layout
Be clear right up front that we are not trying to stop all Java exploits,
 we are trying to harden existing foundations to shore up defenses for future
 mitigations.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Java Runtime Environment (JRE) is widely installed on user endpoints,
 where it executes external code in the form of applets 
\begin_inset CommandInset citation
LatexCommand cite
key "gong1997going,gong2003inside"

\end_inset

.
 These facts, combined with the hundreds of recently discovered vulnerabilities
 in Java, including zero-day vulnerabilities (e.g.
 CVE-2013-0422), have made Java a popular exploit vector (see Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:most-targeted-applications"

\end_inset

).
 Attackers typically lure users to websites containing hidden malicious
 applets.
 Once the user visits the website, the exploit triggers a series of events
 that ends with the delivery of malware, all while the user is left unaware.
 This kind of attack is commonly referred to as a 
\begin_inset Quotes eld
\end_inset

drive-by download.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Java includes a mechanism to safely execute untrusted code and isolate component
s from one another in a sandbox, such that both the application and the
 host machine are protected from malicious behavior.
 However, the exploits cited above show that there is substantial room to
 improve the containment of code within the sandbox.
 Previous investigations of Java exploits have shown Java malware commonly
 alters the sandbox's settings 
\begin_inset CommandInset citation
LatexCommand cite
key "garber_2012"

\end_inset

.
 Typically, exploits disable the security manager, the component of the
 sandbox responsible for enforcing the security policy 
\begin_inset CommandInset citation
LatexCommand cite
key "fireeye_2013,svoboda_anatomy_blog_2013,security_explorations_2012,blackhat_2012"

\end_inset

.
 We hypothesize that, when compared to the exploits, benign applications
 interact with the security manager differently.
 If true, this difference can be exploited to prevent future attacks.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename most_targeted_apps_ibm_xforce.pdf
	width 2in

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:most-targeted-applications"

\end_inset

Pie chart showing the most targeted applications on enterprise workstations,
 according to to a Dec.
 2013 survey of Trusteer customers 
\begin_inset CommandInset citation
LatexCommand cite
key "xforceQ12013"

\end_inset

.
 Java represented half of all attack-attempts in their sample.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To validate this insight, we conducted an empirical study of benign open
 source Java applications.
 Our empirical study was designed to answer the following research question:
 How do benign applications modify the security manager? To answer this
 question, we identified Java projects in the Qualitas Corpus 
\begin_inset CommandInset citation
LatexCommand cite
key "QualitasCorpus:APSEC:2010"

\end_inset

 and the GitHub repository that make use of the security manager.
 We analyzed the resulting 47 projects using a custom FindBugs 
\begin_inset CommandInset citation
LatexCommand cite
key "hovemeyer_finding_2004"

\end_inset

 plugin to isolate code involved in the initialization or modification of
 the security manager.
 We then manually characterized the security manager usage in each of the
 isolated code snippets.
 Finally, we used a Java Virtual Machine Tool Interface (JVMTI) agent to
 confirm that our characterizations were accurate at run time.
 
\end_layout

\begin_layout Standard
We discovered two types of security managers: 
\emph on
defenseless
\emph default
 security managers, which enforce a security policy that allows code inside
 the sandbox to modify sandbox settings, and 
\emph on
self-protecting
\emph default
 security managers, which disallow such behavior.
 Applications with defenseless security managers are inherently insecure.
 These applications sometimes modified or disabled the security manager
 during program execution.
 Some of these applications use the security manager to enforce policies
 unrelated to security.
 On the other hand, we found that applications with self-protecting security
 managers, a category which includes all applets, do not change sandbox
 settings during program execution.
 
\end_layout

\begin_layout Standard
Based on our analysis of benign and malicious applications, we implemented
 two runtime monitors to fortify the Java sandbox.
 The first monitor prevents privilege escalation by preventing restricted
 classes inside a sandbox from loading classes with fewer restrictions.
 The second monitor prevents changes to the sandbox when a self-protecting
 security manager is initialized.
 We evaluated the effectiveness of our monitors against the ten applets
 in Metasploit 4.10.0
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
http://www.metasploit.com/
\end_layout

\end_inset

 that successfully exploit unpatched versions of Java 7.
 The privilege escalation monitor detected and stopped four of the ten exploits.
 Using both monitors together detected and stopped all ten exploits.
 
\end_layout

\begin_layout Standard
We evaluated the performance of our monitors using the DaCapo benchmark
 suite 
\begin_inset CommandInset citation
LatexCommand cite
key "DaCapo:paper"

\end_inset

.
 The privilege escalation monitor resulted in negligible overhead and can
 therefore be used to monitor any Java application.
 The security manager monitor is implemented as a JVMTI agent that monitors
 a static field, which unfortunately disables just-in-time compilation (JIT).
 Therefore, the security manager monitor resulted in substantial overhead
 of 4536%, which is unacceptable for most Java applications.
 However, the greatest threat comes from Java applets, and many of these
 are not performance intensive (e.g.
 web forms), so it may be reasonable to enable the security manager monitor
 only for untrusted applets and use only the privilege escalation monitor
 for all other applications.
\end_layout

\begin_layout Standard
The contributions of this papers are as follows:
\end_layout

\begin_layout Itemize
An analysis of privilege escalation in the Java security model and recent
 Java exploits (Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Java-Exploits"

\end_inset

).
\end_layout

\begin_layout Itemize
An empirical study of Java sandbox usage in benign, open-source applications
 (Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Security-Manager-Study"

\end_inset

).
\end_layout

\begin_layout Itemize
Two novel rules for distinguishing between benign and malicious Java programs
 (Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Rules-for-Fortifying"

\end_inset

).
\end_layout

\begin_layout Itemize
Implementations of the two rules as runtime monitors, with accompanying
 security and performance evaluations (Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Mitigations"

\end_inset

).
\end_layout

\begin_layout Section
Background on the Java Sandbox
\begin_inset CommandInset label
LatexCommand label
name "sec:Background"

\end_inset


\end_layout

\begin_layout Standard
In this section, we describe components of the Java sandbox that are relevant
 to understanding this work, how they compose to form the sandbox, and their
 functions.
 These points are summarized in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Sandbox-high-level-summary"

\end_inset

.
 The Java sandbox was designed to safely execute code from untrusted sources.
 Essentially, when a 
\shape italic
class loader
\shape default
 loads a class from some location (e.g., network, filesystem, etc.) the class
 is assigned a 
\shape italic
code source
\shape default
.
 The assigned code source indicates the origin of the code and associates
 the class with a 
\shape italic
protection domain
\shape default
.
 Protection domains segment the application classes into groups, where each
 group is assigned a unique 
\shape italic
permission set
\shape default
.
 The permission sets contain permissions explicitly allowing actions with
 possible security implications, such as writing to the filesystem, accessing
 the network, using certain reflection features, etc.
 (see a more complete list at 
\begin_inset CommandInset citation
LatexCommand cite
key "_permissions_2014"

\end_inset

).
 Policies written in the Java policy language
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
url{http://docs.oracle.com/javase/7/docs/technotes/guides/security/PolicyFiles.html
}
\end_layout

\end_inset


\end_layout

\end_inset

 define permission sets and assign code sources to each set.
 By default, applications executed from the local file system are run without
 a sandbox, and all other applications are run inside a restrictive sandbox.
 This prevents applications from the network or other untrusted sources
 from executing malicious operations on the host system.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename sandbox_overview.pdf
	scale 30

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
A summary of the components of the Java sandbox that are relevant to understandi
ng this work.
\begin_inset CommandInset label
LatexCommand label
name "fig:Sandbox-high-level-summary"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Defined policies will not be enforced unless the sandbox is activated.
 The sandbox is activated by setting a security manager for the system.
 This security manager acts as the gateway between the sandbox and the rest
 of the application.
 Whenever a class attempts to execute a method with security implications
 inside a sandbox, the protected method queries the security manager to
 determine if the operation should be allowed.
 For example, if an application attempts to write to a file (e.g.
 
\family typewriter
java.io.FileOutputStream
\family default
) inside a sandbox, the class that performs the write will check with the
 security manager to ensure that a write to that file is allowed.
 Missing checks are a common source of Java vulnerabilities because protected
 code must initiate the check.
 
\end_layout

\begin_layout Standard
To perform a permission check, the security manager walks the stack to ensure
 each class in the current stack frame has the required permission.
 However, privileged code can stop stack walking before the entire frame
 has been walked by wrapping code inside a 
\family typewriter
doPrivileged
\family default
 call.
 This allows privileged code sections to perform actions with security implicati
ons at the request of non-privileged code sections, once the request has
 been properly verified.
 If the permission check reaches a class in the stack frame that does not
 have the correct permissions, the security manager will throw a 
\family typewriter
SecurityException
\family default
.
 Stack-based access control is discussed in more detail in 
\begin_inset CommandInset citation
LatexCommand cite
key "banerjee_stack-based_2005,besson_stack_2004,d._s._wallach_understanding_1998,erlingsson_irm_2000,fournet_stack_2002,pistoia_beyond_2007,zhao_type_2005"

\end_inset

.
 
\end_layout

\begin_layout Standard
Java is flexible about when in an application's execution the sandbox is
 configured and enabled.
 The default case for web applets and applications that use Java Web Start
 is to set a 
\shape italic
self-protecting
\shape default
 security manager before loading the application from the network.
 The security manager, and thus the sandbox, is self-protecting in the sense
 that it does not allow the application to change sandbox settings.
 A security manager can also be 
\shape italic
defenseless
\shape default
, which is the exact opposite of self-protecting.
 A defenseless manager does little to improve the security of a constrained
 application or the host.
 However, we show in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Research-Questions-and"

\end_inset

 that some benign applications have found interesting uses for defenseless
 managers.
 
\end_layout

\begin_layout Standard
Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:defenseless-permissions"

\end_inset

 summarizes the set of permissions used to distinguish between self-protecting
 and defenseless security managers.
 We consider any security manager that enforces a policy that contains even
 one of the listed permissions to be defenseless.
 A subset of the permissions in this list were identified in 
\begin_inset CommandInset citation
LatexCommand cite
key "security_explorations_2012"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Float table
wide true
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
List of sandbox-defeating permissions.
 A security manager that enforces a policy containing any of these permission
 is sufficient to result in a defenseless sandbox.
\begin_inset CommandInset label
LatexCommand label
name "tab:defenseless-permissions"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="2">
<features rotate="0" booktabs="true" tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top" width="0pt">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Permission
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Risk
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RuntimePermission(
\begin_inset Quotes eld
\end_inset

createClassLoader
\begin_inset Quotes erd
\end_inset

)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Load classes into any protection domain
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RuntimePermission(
\begin_inset Quotes eld
\end_inset

accessClassInPackage.sun
\begin_inset Quotes erd
\end_inset

)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Access powerful restricted-access internal classes
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RuntimePermission(
\begin_inset Quotes eld
\end_inset

setSecurityManager
\begin_inset Quotes erd
\end_inset

)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Change the application's current security manager
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ReflectPermission(
\begin_inset Quotes eld
\end_inset

suppressAccessChecks
\begin_inset Quotes erd
\end_inset

)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Allow access to all class fields and methods as if they are public
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FilePermission(
\begin_inset Quotes eld
\end_inset

<<ALL FILES>>
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

write, execute
\begin_inset Quotes erd
\end_inset

)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Write to or execute any file*
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SecurityPermission(
\begin_inset Quotes eld
\end_inset

setPolicy
\begin_inset Quotes erd
\end_inset

)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Modify the application's permissions at will
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SecurityPermission(
\begin_inset Quotes eld
\end_inset

setProperty.package.access
\begin_inset Quotes erd
\end_inset

)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Make privileged internal classes accessible
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Exploiting Java Code
\begin_inset CommandInset label
LatexCommand label
name "sub:Java-Exploits"

\end_inset


\end_layout

\begin_layout Standard
This section provides an analysis of privilege escalation in the Java security
 model and recent Java exploits.
 Between 2011 and 2013, drive-by downloads that used Java applets as the
 vector were widely reported.
 While the Java sandbox 
\shape italic
should
\shape default
 prevent malicious applets from executing their payloads, exploits leveraged
 vulnerabilities in the Java Runtime Environment (JRE) to set the security
 manager to 
\family typewriter
null
\family default
.
 Setting the security manager to 
\family typewriter
null
\family default
 disables the sandbox, allowing previously constrained classes to perform
 any operation that the JRE itself has the privileges to perform.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:A-typical-exploit-payload"

\end_inset

 shows a typical payload class whose privileges have been elevated by an
 exploit to allow it to disable the sandbox.
 This example exploit uses 
\family typewriter
doPrivileged
\family default
 to allow the unprivileged exploit class to execute the operations in the
 payload without causing a 
\family typewriter
SecurityException
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset listings
lstparams "language=Java,basicstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

import java.lang.reflect.Method; 
\end_layout

\begin_layout Plain Layout

import java.security.AccessController; 
\end_layout

\begin_layout Plain Layout

import java.security.PrivilegedExceptionAction;   
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class Payload implements PrivilegedExceptionAction {         
\end_layout

\begin_layout Plain Layout

    public Payload() {
\end_layout

\begin_layout Plain Layout

        try {
\end_layout

\begin_layout Plain Layout

            AccessController.doPrivileged(this);
\end_layout

\begin_layout Plain Layout

        } catch(Exception exception) { }     
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    public void run() throws Exception {
\end_layout

\begin_layout Plain Layout

        // Disable sandbox
\end_layout

\begin_layout Plain Layout

        System.setSecurityManager(null);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    public static void outSandbox() throws Exception {
\end_layout

\begin_layout Plain Layout

        // Do malicious operations
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
A typical sandbox-disabling Java exploit payload from http://pastebin.com/QWU1rqj
f.
\begin_inset CommandInset label
LatexCommand label
name "fig:A-typical-exploit-payload"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Less than half of recent Java exploits use 
\shape italic
type confusion
\shape default
 to bypass the sandbox.
 A type confusion vulnerability is exploited by breaking type safety, allowing
 the attacker to craft an object that can perform operations as if it is
 an instance of a class of a different type.
 For example, attackers craft objects that either (1) point to the 
\family typewriter
System
\family default
 class or (2) act as if they have the same type as a privileged class loader
 (see CVE-2012-0507 
\begin_inset CommandInset citation
LatexCommand cite
key "_vulnerability_2012_0507"

\end_inset

).
 In the first case the attack causes any operation performed on the masqueraded
 class to happen on the real 
\family typewriter
System
\family default
 class, allowing the attacker to directly alter the field where the security
 manager is stored.
 In the second case the malicious class can load the exploit's payload with
 elevated privileges.
\end_layout

\begin_layout Standard
Another prominent class of Java exploits takes advantage of a 
\shape italic
confused deputy
\shape default
 vulnerability 
\begin_inset CommandInset citation
LatexCommand cite
key "hardy_confused_1988"

\end_inset

, which is an example of privilege escalation.
 In the case of a confused deputy, the exploit often convinces a class with
 access to a vulnerable 
\shape italic
privileged class
\shape default
 (i.e.
 a class with more privileges than the application's classes) to return
 a reference to it.
 The returned privileged class often contains a vulnerability such as a
 missing security check (e.g.
 where the class should consult with the security manager before performing
 some operation, but does not).
 In some cases, the privileged class may be directly accessible to all Java
 applications, but this is quite rare and typically the fault of a vulnerable
 third-party library.
 Providing all classes with direct access to a privileged class is a violation
 of the 
\shape italic
access control
\shape default
 principle that is part of the Java development culture.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
url{https://blogs.oracle.com/jrose/entry/the_isthmus_in_the_vm}
\end_layout

\end_inset


\end_layout

\end_inset

 Once an exploit gains access to a vulnerable privileged class, that class
 can be tricked into executing code that disables the sandbox (see CVE-2012-4681
 
\begin_inset CommandInset citation
LatexCommand cite
key "_vulnerability_2012_4681"

\end_inset

).
\end_layout

\begin_layout Standard
For the most part, benign applications have no reason to directly access
 privileged classes.
 The majority of the JRE's privileged classes are internal implementations
 of features that applications can access via less-privileged code paths.
 For example, many reflection operations are implemented in the 
\family typewriter
sun.reflect
\family default
 package, which has all permissions.
 However, Java applications are supposed to use classes in the 
\family typewriter
java.lang.reflect
\family default
 package to use reflection and do not have direct access to the 
\family typewriter
sun
\family default
 classes given default JRE configurations.
 Classes in the 
\family typewriter
java
\family default
 package do not perform privileged operations themselves, but do have permission
 to access classes in the 
\family typewriter
sun
\family default
 package.
\end_layout

\begin_layout Standard
A privileged class loader must be used to load a privileged class.
 Thus, a class typically does not have direct access to a class that has
 a vulnerability that can be exploited to bypass the sandbox unless the
 former had its privileges reduced at some point in the application's execution.
 This is implicit in the Java security model: If any class could load more
 privileged classes and directly cause the execution of privileged operations,
 the sandbox in its current form would serve little purpose.
 In sections 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Rules-for-Fortifying"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Mitigations"

\end_inset

 we discuss how we can leverage these distinctions to further fortify the
 sandbox.
\end_layout

\begin_layout Standard
Many of the recent type confusion and privilege escalation vulnerabilities
 would not have been introduced if the JRE were developed strictly following
 
\begin_inset Quotes eld
\end_inset

The CERT Oracle Secure Coding Standard for Java
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "long_cert_2011"

\end_inset

.
 For example, Svoboda 
\begin_inset CommandInset citation
LatexCommand cite
key "svoboda_anatomy_blog_2013,svoboda_anatomy_2014"

\end_inset

 pointed out that CVE-2012-0507 and CVE-2012-4681 were caused by violating
 a total of six different secure coding rules and four guidelines.
 In the typical case, following just one or two of the broken rules and
 guidelines would have prevented a serious exploit.
 
\end_layout

\begin_layout Standard
In the rest of this paper, we do not concern ourselves with the specifics
 of particular exploits.
 We will now explore ways to fortify the Java sandbox without breaking backwards
 compatibility.
 
\end_layout

\begin_layout Section
Security Manager Study
\begin_inset CommandInset label
LatexCommand label
name "sec:Security-Manager-Study"

\end_inset


\end_layout

\begin_layout Standard
We intend to proactively stop exploits that disable the Java sandbox.
 We focus our efforts on the security manager, as it is the means by which
 applications interact with the sandbox.
 To successfully stop even zero-day exploits, we must understand which operation
s exploitive and benign applications perform on the security manager.
 Assuming there is a difference between the set of operations performed
 by exploits and those performed by benign applications, we can exclude
 the operations on which exploits depend, that are not of use to benign
 applications.
 This outcome could narrow the range of operations on the manager to stop
 exploits, while maintaining backwards compatibility for benign applications.
 Additionally, this strategy would help ensure the sandbox continues to
 enforce its policy in a given execution without having to deal with the
 wide diversity in the manifestations of vulnerabilities within the JRE
 or the subtleties of their exploits.
 In this section we describe the methodology for and results of an empirical
 study that validated this strategy.
\end_layout

\begin_layout Subsection
Methodology
\end_layout

\begin_layout Standard
As discussed in the previous sections, it is widely known within the Java
 security community that current exploits that operate on the security manager
 perform one operation: They disable it.
 To understand the operations benign applications perform on the manager,
 we undertook an empirical analysis consisting of static, dynamic, and manual
 inspections of the open source Java application landscape.
 More precisely, we answer the following research question: How do open
 source Java applications interact with the security manager? To answer
 this question, our empirical analysis aimed to validate the following hypothese
s, roughly categorized by the strength of the mitigation that is possible
 if the hypothesis holds:
\end_layout

\begin_layout Standard

\series bold
Weak Hypothesis:
\series default
 
\shape italic
Benign applications do not disable the security manager.

\shape default
 If this hypothesis holds, exploits can be differentiated from benign applicatio
ns by any attempt to disable the current security manager.
 While this mitigation would be easy to implement, exploits that weaken
 the sandbox without disabling it would remain a threat.
 For example, attackers could potentially bypass the mitigation by modifying
 the enforced policy to allow the permissions they need or they could replace
 the current manager with one that never throws a 
\family typewriter
SecurityException
\family default
.
\end_layout

\begin_layout Standard

\series bold
Moderate Hypothesis:
\series default
 
\emph on
Benign applications do not weaken the s
\shape italic
\emph default
ecurity manager
\shape default
.
 Validation of this hypothesis would enable mitigations that prevent attackers
 from weakening or disabling the sandbox.
 However, an implementation of this mitigation would require differentiating
 between changes which weaken the sandbox and those that do not.
 Classifying changes in this manner is difficult because it requires context
 specific information that a general mitigation strategy may not have.
 For example, if a permission to write to a file is replaced by a permission
 to write to a different file, is the sandbox weakened, strengthened, or
 exactly as secure as it was before?
\end_layout

\begin_layout Standard

\series bold
Strong Hypothesis:
\series default
 
\shape italic
Benign applications do not change the sandbox if a self-protecting security
 manager has been set
\shape default
.
 If supported, it is possible to implement a mitigation strategy that disallows
 any change to a security manager that is enforcing a strict policy (as
 defined in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Background"

\end_inset

) is disallowed.
 To implement this mitigation, a runtime monitor must determine if a security
 manager is self-protecting at the time the manager is set.
 This can be easily achieved.
 While this mitigation has the same outcome as the mitigation enabled by
 successful validation of the moderate hypothesis, it is significantly easier
 to implement and is therefore stronger.
\end_layout

\begin_layout Standard

\series bold
Ideal Hypothesis:
\series default
 
\shape italic
Benign applications do not change a set security manager.

\shape default
 If the study supports this hypothesis, any attempted change to an already
 established security manager can be considered malicious.
\end_layout

\begin_layout Standard
Our empirical analysis used applications from the Qualitas Corpus (QC) 
\begin_inset CommandInset citation
LatexCommand cite
key "QualitasCorpus:APSEC:2010"

\end_inset

 and GitHub to form a dataset of applications that use the security manager.
 To filter relevant applications out of the 112 applications in QC, we performed
 a simple 
\family typewriter
grep
\family default
 of each application's source code to find instances of the keyword 
\shape italic
SecurityManager
\shape default
.
 When any instance of the keyword was found, we included the application
 in our dataset.
 This filtering reduced the set of applications to inspect from 112 to 29.
 Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Applications-Studied"

\end_inset

 lists the versions of the applications used in this study.
 
\end_layout

\begin_layout Standard
We performed a similar process using the GitHub search feature configured
 to search through Java files for the same keyword, 
\shape italic
System.setSecurityManager(
\shape default
, and 
\shape italic
System.setSecurityManager(null)
\shape default
.
 We added two keywords to reduce false positives and to include applications
 that disable the manager.
 We ended up with 17 applications after selecting the top seven applications
 from the results for each keyword and removing false positives and duplicates
 found in QC.
 Our dataset includes the latest commit of each project.
\end_layout

\begin_layout Standard
With the dataset in hand, we created static and dynamic analysis tools to
 assist in the manual inspection of each application.
 Our static analysis tool is a FindBugs 
\begin_inset CommandInset citation
LatexCommand cite
key "hovemeyer_finding_2004"

\end_inset

 plugin that uses a dataflow analysis to determine where 
\family typewriter
System.setSecurityManager
\family default
() is called, as well as the lines of code where its arguments were initialized.
 We created a dynamic analysis tool using the Java Virtual Machine Tool
 Interface (JVMTI).
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
http://docs.oracle.com/javase/7/docs/technotes/guides/jvmti/
\end_layout

\end_inset

 JVMTI is designed to allow tools to inspect the current state of Java applicati
ons and control their execution; it is commonly used to create Java debugging
 and profiling tools.
 Our dynamic analysis tool set a modification watch on the 
\family typewriter
security
\family default
 field of Java's 
\family typewriter
System
\family default
 class.
 This field holds the current security manager object for the application.
 The watch prints out the class name, source file name, and line of code
 where any change to the field took place.
 A special notice is printed when the field is set to 
\family typewriter
null
\family default
.
 
\end_layout

\begin_layout Standard
We split the dataset between two reviewers.
 The reviewers both analyzed applications using the following steps:
\end_layout

\begin_layout Enumerate
The reviewer ran grep on all Java source files in the application to output
 the lines which contain the keyword 
\shape slanted
SecurityManager
\shape default
 and the 5 lines before and after these lines.
\end_layout

\begin_layout Enumerate
When it was clear from the grep output that the keyword was used in comments
 or in ways that were unrelated to the security manage class, the reviewer
 labeled the application as a false positive.
\end_layout

\begin_layout Enumerate
For true positives that compiled, the reviewer ran FindBugs on the application
 with only our plugin enabled.
 
\end_layout

\begin_layout Enumerate
The reviewer manually inspected code specified in the FindBugs findings,
 starting with the line where the manager was set and tracing the code back
 to the various locations the findings said potential security managers
 were initialized.
 
\end_layout

\begin_layout Enumerate
The reviewer manually inspected all of the lines mentioned in the grep results
 from step 1 to see how the application interacted with the sandbox.
 
\end_layout

\begin_layout Enumerate
For true positives that compiled and affected the security manager during
 the execution of the application, the application was executed, while being
 monitored by our dynamic analysis tool, using parameters and actions the
 reviewer determined in steps 4 and 5 affect the security manager.
 For example, we often learned in earlier steps that the manager was only
 effected if the user ran the program from the command line with a particular
 parameter or used a specific feature of the application.
 This step verified the conclusions from previous steps.
\end_layout

\begin_layout Enumerate
Finally, the reviewer summarized the operations the application performed
 on the security manager with an emphasis on points that support or reject
 each hypothesis.
\end_layout

\begin_layout Standard
To ensure the reviewers understood the analysis steps and produced consistent
 results, we undertook a pilot study where each reviewer independently inspected
 the same 6 applications.
 This pilot study ensured the inspections were performed consistently.
\end_layout

\begin_layout Subsection
The Security Manager Dataset
\begin_inset CommandInset label
LatexCommand label
name "sec:Applications-Studied"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Table of applications included in the security manager study.
\begin_inset CommandInset label
LatexCommand label
name "Table:applications-studied"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="47" columns="3">
<features rotate="0" booktabs="true" tabularvalignment="middle">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Application Name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Repo
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(Apache) Ant
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Java Project Builder
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Qualitas
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(Apache) Batik
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SVG Image Toolkit
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Qualitas
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
C-JDBC
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DB Clustering Middleware
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Qualitas
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Compiere
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Business Tools
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Qualitas
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(Apache) Derby
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Relational Database
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Qualitas
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DrJava
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IDE
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Qualitas
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Eclipse 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IDE
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Qualitas
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FreeMind
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Mind-Mapping Tool
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Qualitas
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Galleon
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Media Server
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Qualitas
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(Apache) Hadoop
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Distributed Computing Frwk.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Qualitas
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hibernate
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Obj.-Rel.
 Mapping Tool
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Qualitas
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HyperSQL
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SQL Relational Database
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Qualitas
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
JBoss
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Application Middleware
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Qualitas
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
JRuby
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ruby Interpreter
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Qualitas
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(Apache) Lucene
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Search Software
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Qualitas
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(Apache) MyFaces
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Server Software
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Qualitas
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NekoHTML
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HTML Parser
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Qualitas
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Netbeans
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IDE
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Qualitas
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OpenJMS
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Messaging Service
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Qualitas
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Quartz 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Job Scheduler
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Qualitas
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
QuickServer
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TCP Server Framework
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Qualitas
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Spring Framework
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Web Development Library
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Qualitas
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(Apache) Struts
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Web Development Library
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Qualitas
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(Apache) Tapestry
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Web Development Library
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Qualitas
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(Apache) Tomcat
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Web Server
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Qualitas
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Vuze
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
File Sharing Application
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Qualitas
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Weka
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Machine Learning Algs.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Qualitas
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(Apache) Xalan
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
XML Transforming Library
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Qualitas
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(Apache) Xerces
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
XML Parsing Library
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Qualitas
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
AspectJ
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Java Extension
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Github
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DemoPermissions
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Spring Extension
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Github
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
driveddoc
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Application Connector
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Github
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FileManagerFtpHttpServer
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FTP Server
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Github
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gjman
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Development Toolkit
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Github
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IntelliJ IDEA
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IDE
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Github
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Jmin
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Lightweight JDK
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Github
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MCVersion-Control
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Minecraft Version Changer
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Github
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NGOMS
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Business Tools
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Github
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
oxygen-libcore
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Android Dev.
 Lib.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Github
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
refact4j
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Meta-model Prog.
 Frwk.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Github
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Security-Manager
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Alternate Security Manager
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Github
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Spring-Modules
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Spring Extension
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Github
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
System Rules
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
JUnit Extension
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Github
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TimeLag
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sound Application
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Github
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TracEE
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
JavaEE Support Tool
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Github
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Visor
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Closure Library
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Github
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qualitas Corpus is a curated collection of open source Java applications
 for use in reproducible software studies.
 We investigated the sandbox usage of 29 applications from QC version 20130901
 that we use in this study.
 11 of the 29 applications are developed by the Apache Software Foundation
 (ASF), which may increase the homogeneity of their operations on the manager.
 
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Classification of application interactions with the security manager.
\begin_inset CommandInset label
LatexCommand label
name "tab:Classification-of-Application"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="4">
<features rotate="0" booktabs="true" tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="right" valignment="top">
<column alignment="right" valignment="top">
<column alignment="right" valignment="top" width="0pt">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Type of Interaction
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
QC
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GitHub
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Total
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
 Set a manager without later changing it
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
 Change a set security manager
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.
 Interact with manager in production code
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4.
 Interact with manager only in unit tests
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5.
 Do not interact (false positive)
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
While QC provides a strong starting point for the construction of a dataset
 for this study, their inclusion criteria
\begin_inset Foot
status open

\begin_layout Plain Layout
http://qualitascorpus.com/docs/criteria.html
\end_layout

\end_inset

 leads to the inclusion of large, popular applications and frameworks.
 Given this point and the emphasis on ASF applications in our filtered set,
 we diversified our dataset by turning to GitHub.
 The full list of applications studied are listed in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "Table:applications-studied"

\end_inset

.
 Version numbers and Git commit hashes are available in an online supplement.
\begin_inset Foot
status open

\begin_layout Plain Layout
http://goo.gl/dtcqTM
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Results
\begin_inset CommandInset label
LatexCommand label
name "sec:Research-Questions-and"

\end_inset


\end_layout

\begin_layout Standard
We divided the security manager dataset into categories based on the operations
 each application performed on the security manager.
 The categories are summarized as follows: (1) applications that set a security
 manager that does not get changed later in the application's execution,
 (2) applications that change a set manager at some point in the program's
 execution, (3) applications that interact with a security manager in production
 code if one is set, (4) applications that only interact with the manager
 in unit tests, and (5) false positives that do not actually interact with
 the manager.
 Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Classification-of-Application"

\end_inset

 shows how each application in our dataset was categorized.
 The number for each category type in the table corresponds to the numbers
 in the previous list used throughout the rest of this section.
\end_layout

\begin_layout Standard
Type 1 applications set a security manager that is not changed during any
 execution of the application after it is set.
 In other words, for each possible execution path, there is at most one
 place the application sets a security manager.
 For example, Weka contains several main methods, most of which never set
 a security manager.
 However, the main method in 
\family typewriter
RemoteEngine.java
\family default
 sets a security manager, as shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Weka-snippet"

\end_inset

, unless the environment set one already (e.g.
 the user set one on the command line, or Weka is running as an applet or
 web start application).
 One Type 1 application, JTimeLag, did not actually set a security manager,
 but did set the security manager to null as discussed in the section below
 titled 
\begin_inset Quotes eld
\end_inset

Reducing Web Application Development Complexity
\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,firstnumber=321,xrightmargin={0.1cm},numbersep={-10pt}"
inline false
status open

\begin_layout Plain Layout

    public static void main(String[] args) {     
\end_layout

\begin_layout Plain Layout

        if (System.getSecurityManager() == null) {       
\end_layout

\begin_layout Plain Layout

            System.setSecurityManager(new RMISecurityManager());   
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Weka code snippet that intializes a security manager if one does not already
 exist.
 This is the only reference to the security manager in the Weka's code base.
\begin_inset CommandInset label
LatexCommand label
name "fig:Weka-snippet"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Type 2 applications are of particular interest in validating our hypotheses
 because they change a set security manager at some point in the application's
 execution.
 In other words, they potentially falsify the weak, moderate, and ideal
 hypotheses.
 Due to their effect on our hypotheses, applications of this type are discussed
 in detail below.
\end_layout

\begin_layout Standard
Type 3 applications contain code that enables them to interact with a security
 manager if one is set, but that never actually set a security manager themselve
s.
 These applications contain code that either (A) performs permission checks
 if the application is sandboxed or (B) uses privileged actions
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
url{http://docs.oracle.com/javase/7/docs/api/java/security/PrivilegedAction.html}
\end_layout

\end_inset


\end_layout

\end_inset

 to ensure the application works if constrained.
 Similarly, Type 4 applications contain unit test code that ensures the
 application works correctly if sandboxed or that set a manager themselves.
 These applications are not useful for validating our hypotheses because
 their interactions with the manager are not in production code.
\end_layout

\begin_layout Standard
Type 5 primarily includes applications that have a class whose name contains
 the word 
\begin_inset Quotes eld
\end_inset

SecurityManager
\begin_inset Quotes erd
\end_inset

 but do not extend the 
\family typewriter
SecurityManager
\family default
 class.
 These custom classes cannot be used to enforce a JRE-wide security policy,
 thus applications of this type are false positives.
 
\end_layout

\begin_layout Standard
The remainder of this section provides details about Type 1 and Type 2 applicati
ons, with few details about the remaining types because they did not have
 a significant bearing on the outcomes of this study.
\end_layout

\begin_layout Subsubsection
Evaluation of our hypotheses
\end_layout

\begin_layout Standard
We only require one counterexample to falsify a hypothesis from section
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Security-Manager-Study"

\end_inset

.
 This section summarizes how our hypotheses held up against the results
 of this study.
\end_layout

\begin_layout Standard

\series bold
Weak Hypothesis
\series default
: 
\shape italic
Benign applications do not disable the security manager.
 
\emph on
The investigation determined that some benign applications do disable the
 security manager, which turns off the sandbox.
 The applications that explicitly disabled the manager typically were not
 using the sandbox for security purposes; these cases are further explained
 in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Non-security-uses-of"

\end_inset

.
 However, some of these applications turned off the sandbox temporarily
 to update the imposed security policy.
\end_layout

\begin_layout Standard

\series bold
Moderate Hypothesis
\series default
: 
\emph on
Benign applications do not weaken the security manager.
 
\emph default
This hypothesis was not definitively falsified if turning off the security
 manager is excluded from weakening.
 However, multiple applications provided methods for the user to dynamically
 change the security policy or the manager.
 These methods did not restrict their callers from weakening the manager
 during execution.
\end_layout

\begin_layout Standard

\series bold
Strong Hypothesis
\series default
: 
\shape italic
Benign applications do not change the security manager if a self-protecting
 security manager has been set
\shape default
.
 This hypothesis was supported by both datasets.
 19 out of 24 true positives in the Qualitas dataset and 9 out of 12 true
 positives in the GitHub dataset did not change a set security manager or
 the policy it enforced during execution.
\end_layout

\begin_layout Standard

\series bold
Ideal Hypothesis
\series default
:
\shape italic
 Benign applications do not change a set security manager.
 
\emph on
This hypothesis was shown to be false: multiple applications changed the
 security manager, both for security and non-security reasons.
\end_layout

\begin_layout Subsubsection
Non-security uses of the Sandbox
\begin_inset CommandInset label
LatexCommand label
name "sub:Non-security-uses-of"

\end_inset


\end_layout

\begin_layout Standard
We found several cases of applications using the sandbox in ways unrelated
 to system security.
 Most of these applications used the sandbox to enforce architectural constraint
s when interacting with other applications or forcibly disabled the sandbox
 to reduce development complexity.
\end_layout

\begin_layout Subsubsection*
Enforcing Architectural Constraints 
\end_layout

\begin_layout Standard
Java applications commonly call 
\family typewriter
System.exit()
\family default
 when a non-recoverable error condition occurs.
 This error handling strategy causes problems when an application uses another
 application as a library that implements this strategy.
 When the library application executes 
\family typewriter
System.exit()
\family default
, the calling application is closed as well because both applications are
 running in the same JVM.
 In many cases, this is not the intended outcome.
 
\end_layout

\begin_layout Standard
To prevent this outcome without modifying the library application, the calling
 application needs to enforce the architectural constraint that libraries
 can not terminate the JVM.
 In practice, applications enforce this architectural constraint by setting
 a security manager that prevents 
\family typewriter
System.exit()
\family default
 calls.
 If a manager has already been set, applications tend to save a copy of
 the current manager before replacing it with one that prevents termination
 of the JVM, but defer to the saved version for all security decisions that
 do not have to do with enforcing this particular constraint.
 The original security manager is often restored when the library application
 is finished executing.
\end_layout

\begin_layout Standard
This case appears in Eclipse, which uses Ant as a library.
 When an unrecoverable error condition occurs, Ant kills the JVM to terminate
 execution of the build script currently running.
 However, Eclipse should continue executing and report an error to the user
 when Ant runs into an error condition.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Eclipse-snippet"

\end_inset

 shows how Eclipse sets a security manager to enforce this constraint right
 before Ant is executed.
 After Ant closes and any error conditions are handled, the original manager
 is restored.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,firstnumber=691,xrightmargin={0.1cm},numbersep={-10pt}"
inline false
status open

\begin_layout Plain Layout

    System.setSecurityManager(new AntSecurityManager(originalSM, Thread.currentThr
ead()));
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,firstnumber=703,xrightmargin={0.1cm},numbersep={-10pt}"
inline false
status open

\begin_layout Plain Layout

    getCurrentProject().executeTargets(targets); 
\backslash

\backslash
Note: Ant is executed on this line
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,firstnumber=721,xrightmargin={0.1cm},numbersep={-10pt}"
inline false
status open

\begin_layout Plain Layout

    finally {
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,firstnumber=725,xrightmargin={0.1cm},numbersep={-10pt}"
inline false
status open

\begin_layout Plain Layout

        if (System.getSecurityManager() instanceof AntSecurityManager) {
 
\end_layout

\begin_layout Plain Layout

            System.setSecurityManager(originalSM); 
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Snippet of Eclipse code that uses a security manager to prevent Ant from
 terminating the JVM when Ant encounters an unrecoverable error.
\begin_inset CommandInset label
LatexCommand label
name "fig:Eclipse-snippet"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
GJMan also enforces this architectural constraint, as shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GJMan-snippet"

\end_inset

.
 A comment in the same source file references a blog post that we believe
 is the origin of this solution.
\begin_inset Foot
status open

\begin_layout Plain Layout
http://www.jroller.com/ethdsy/entry/disabling_system_exit
\end_layout

\end_inset

 The code contains an 
\family typewriter
apply
\family default
 method that creates and sets a security manager to prevent termination
 of the JVM and an 
\family typewriter
unapply
\family default
 method to disable the sandbox.
 GJMan is a library and does not use these methods itself, but applications
 that use it could.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,firstnumber=703,xrightmargin={0.1cm},numbersep={-10pt}"
inline false
status open

\begin_layout Plain Layout

    public static void apply() { 
\end_layout

\begin_layout Plain Layout

        final SecurityManager securityManager = new SecurityManager() {
 
\end_layout

\begin_layout Plain Layout

            public void checkPermission(Permission permission) { 
\end_layout

\begin_layout Plain Layout

                if(permission.getName().startsWith("exitVM")) { 
\end_layout

\begin_layout Plain Layout

                    throw new Exception(); 
\end_layout

\begin_layout Plain Layout

                } 
\end_layout

\begin_layout Plain Layout

            } 
\end_layout

\begin_layout Plain Layout

        }; 
\end_layout

\begin_layout Plain Layout

       System.setSecurityManager(securityManager); 
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    public static void unapply() { 
\end_layout

\begin_layout Plain Layout

        System.setSecurityManager(null); 
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Methods in GJMan that enable and disable the sandbox to prevent termination
 of the JVM when select code is running
\begin_inset CommandInset label
LatexCommand label
name "fig:GJMan-snippet"

\end_inset

.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In total, we found 3 applications that use a variation of this technique:
 Eclipse, GJMan, and AspectJ.
 While this technique does enforce the desired constraint, and appears to
 be the best solution available in Java at the moment, it may cause problems
 when applications are also using the sandbox for security purposes.
 The technique requires the application to dynamically change the security
 manager.
 This operation requires that the manager itself be defenseless or that
 the application is very carefully written to prevent malicious code from
 changing the manager or the policy it enforces.
 Defenseless security managers are not capable of reliably enforcing a serious
 security policy.
\end_layout

\begin_layout Subsubsection*
Reducing Web Application Development Complexity
\end_layout

\begin_layout Standard
We found that the Java security policies for web applications (applets and
 applications launched via Java Web Start)
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
url{http://www.oracle.com/technetwork/java/javase/javawebstart/index.html}
\end_layout

\end_inset


\end_layout

\end_inset

 created complexity for certain applications.
 In the latest versions of the JRE (1.7.72 and 1.8.25), users are prompted to
 allow the execution of Java web applications originating from a source
 other than the host machine.
 By default, Java executes such an application inside a restrictive sandbox
 that severely limits the operations the application can perform, excluding
 operations such as accessing local files, retrieving resources from any
 third party server, or changing the security manager.
 
\end_layout

\begin_layout Standard
For some applications, required behaviors may be prevented by the restrictive
 sandbox.
 Thus, Java provides a way to run applications outside the restrictive sandbox.
 To avoid executing the applet in a restrictive sandbox, a developer must
 first get the application digitally signed by a recognized certificate
 authority.
 Once the application has been properly signed, the developer may specify
 that the application should run outside of the sandbox.
 Before running this kind of application outside of the sandbox, the use
 must accept two prompts: one to run the application, and a second to run
 outside the sandbox.
 
\end_layout

\begin_layout Standard
If an application is executed inside a restrictive sandbox and uses permissions
 prevented by the restrictive sandbox, the application developer has two
 options: adjust the application to not require the restricted permissions
 or have the application terminate with a 
\family typewriter
SecurityException
\family default
.
 The first option would require the application to recognize the restrictive
 sandbox and then avoid using restricted permissions.
 Thus, the application would only be able to execute a subset of the full
 application.
 This requires more development effort because the application is essentially
 implemented twice, once as the restricted version and again as the full
 version.
 The other option does not allow the application to execute the application
 inside a restrictive sandbox.
 This option forces the user to run the application outside the sandbox.
 We found that applications using this method attempted to set the security
 manager to 
\family typewriter
null
\family default
 at the beginning of the application, causing the sandbox to catch the security
 violation and terminate the application.
 
\end_layout

\begin_layout Standard
We found two applications that used this method: Eclipse and Timelag.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Eclipse-jws-snippet"

\end_inset

 shows a snippet from Eclipse's WebStartMain.java file that performs this
 operation.
 The comment shows that Eclipse attempts to disable the sandbox to avoid
 the permission issues caused by the default sandbox for web start.
 Timelag performs the same operation in the file JTimelag.java but does not
 contain any comments, thus we can only infer the motivation behind turning
 off the sandbox.
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,firstnumber=22,xrightmargin={0.1cm},numbersep={-10pt}"
inline false
status open

\begin_layout Plain Layout

    /** 
\end_layout

\begin_layout Plain Layout

    * The launcher to start eclipse using webstart.
 To use this launcher, the client 
\end_layout

\begin_layout Plain Layout

    * must accept to give all security permissions.
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,firstnumber=55,escapechar={\%},xrightmargin={0.1cm},numbersep={-10pt}"
inline false
status open

\begin_layout Plain Layout

    public static void main(String[] args) { 
\end_layout

\begin_layout Plain Layout

    System.setSecurityManager(null); %
\backslash
textbf{//TODO Hack so that when the classloader loading the fwk is created
 we don't have funny permissions.
 This should be revisited.
 }
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
A snippet from Eclipse that disables the sandbox when Java Web Start is
 used to run the IDE.
\begin_inset CommandInset label
LatexCommand label
name "fig:Eclipse-jws-snippet"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Changing the Security Manager for Security Purposes
\end_layout

\begin_layout Standard
We found applications that set a security manager then either explicitly
 changed it or allowed the user to change it.
 Batik, Eclipse, and Spring-modules provide methods that allow the user
 to set and change an existing manager, and Ant, Freemind, and Netbeans
 explicitly set then change the manager.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,firstnumber=156,xrightmargin={0.1cm},numbersep={-10pt}"
inline false
status open

\begin_layout Plain Layout

    public void enforceSecurity(boolean enforce){ 
\end_layout

\begin_layout Plain Layout

    SecurityManager sm = System.getSecurityManager();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    if (sm != null && sm != lastSecurityManagerInstalled){
\end_layout

\begin_layout Plain Layout

        ...
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,firstnumber=163,xrightmargin={0.1cm},numbersep={-10pt}"
inline false
status open

\begin_layout Plain Layout

        throw new SecurityException
\end_layout

\begin_layout Plain Layout

            (Messages.getString(EXCEPTION_ALIEN_SECURITY_MANAGER));   
\end_layout

\begin_layout Plain Layout

    }                  
\end_layout

\begin_layout Plain Layout

    if (enforce) { 
\end_layout

\begin_layout Plain Layout

        ...
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,firstnumber=173,xrightmargin={0.1cm},numbersep={-10pt}"
inline false
status open

\begin_layout Plain Layout

        installSecurityManager();         
\end_layout

\begin_layout Plain Layout

    } else {             
\end_layout

\begin_layout Plain Layout

        if (sm != null) {                 
\end_layout

\begin_layout Plain Layout

           System.setSecurityManager(null);
\end_layout

\begin_layout Plain Layout

           lastSecurityManagerInstalled = null;             
\end_layout

\begin_layout Plain Layout

           ...
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Security manager interactions in Batik.
\begin_inset CommandInset label
LatexCommand label
name "fig:Batik-snippet"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Batik-snippet"

\end_inset

 shows an interesting case from Batik copied from 
\family typewriter
ApplicationSecurityEnforcer.java
\family default
.
 This method allows users to optionally constrain the execution of an an
 application that uses the Batik SVG Toolkit.
 It takes a parameter that acts as a switch to turn the sandbox on or off.
 Batik throws an exception if the user wants to toggle the sandbox while
 a non-Batik manager is set.
 The download page on the Batik website shows several examples of how to
 use the library.
 Two of the examples show ways to set a security manager at start up: the
 squiggle browser demo and the rasterizer demo.
 While the squiggle browser demo sets a manager and never changes it, the
 rasterizer demo can be set to call 
\family typewriter
enforceSecurity
\family default
 with a true argument the first time and a false argument the second time,
 which enables then disables the sandbox.
 While this was an interesting occurrence, there seems to be no valid reason
 to disable the sandbox in this case other than to show off the capability
 to do so.
\end_layout

\begin_layout Standard
Ant, Freemind, and Netbeans explicitly set and then change the manager during
 runtime.
 Ant allows the users to create build scripts that execute Java classes
 and JAR's during a build under a user specified permissions set.
 The user-specified permissions set is defined in the permissions element
 of an Ant build file.
 Inside the permissions element, a user can grant and revoke permissions
 available to the Java code.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Ant Permissions Example"

\end_inset

 shows the first example from the Ant Permissions website.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
https://ant.apache.org/manual/Types/permissions.html
\end_layout

\end_inset

 The contents of the 
\family typewriter
grant
\family default
 element provide the application all permissions.
 Then, the contents of the revoke element restricts the application from
 using all property permissions.
 The permissions mean that the application can perform all actions except
 those that require 
\family typewriter
PropertyPermissions
\family default
.
 This snippet also leads Ant to set a defenseless security manager.
 Malicious code can easily bypass the restrictions in this example by executing
 the line 
\family typewriter
System.setSecurityManager(null)
\family default
, which turns off the sandbox.
 Once the sandbox has been turned off, the malicious code can perform all
 actions which require 
\family typewriter
PropertyPermissions
\family default
.
 The Ant Permissions website does not mention that an implementation of
 this example would be vulnerable.
 The site also does not mention that allowing certain permissions will potential
ly enable the restricted application to bypass any user specified restrictions.
 
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=XML,basicstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

<permissions>   
\end_layout

\begin_layout Plain Layout

  <grant class="java.security.AllPermission"/>   
\end_layout

\begin_layout Plain Layout

  <revoke class="java.util.PropertyPermission"/> 
\end_layout

\begin_layout Plain Layout

</permissions>
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Example Ant build script element to grant all but one permission.
 This specific permission set leads to a defenseless security manager.
\begin_inset CommandInset label
LatexCommand label
name "fig:Ant Permissions Example"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,firstnumber=98,xrightmargin={0.1cm},numbersep={-10pt}"
inline false
status open

\begin_layout Plain Layout

    public synchronized void setSecurityManager() throws BuildException
 {         
\end_layout

\begin_layout Plain Layout

      origSm = System.getSecurityManager();         
\end_layout

\begin_layout Plain Layout

      init();         
\end_layout

\begin_layout Plain Layout

      System.setSecurityManager(new MySM());         
\end_layout

\begin_layout Plain Layout

      active = true;     
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    /**      
\end_layout

\begin_layout Plain Layout

      * Initializes the list of granted permissions, checks the list of
 revoked permissions.
      
\end_layout

\begin_layout Plain Layout

      */     private void init() throws BuildException {
\end_layout

\begin_layout Plain Layout

      ...
\end_layout

\end_inset


\begin_inset listings
lstparams "numbers=left,basicstyle={\scriptsize},firstnumber=169,xrightmargin={0.1cm},numbersep={-10pt}"
inline false
status open

\begin_layout Plain Layout

    public synchronized void restoreSecurityManager() {         
\end_layout

\begin_layout Plain Layout

      active = false;         
\end_layout

\begin_layout Plain Layout

      System.setSecurityManager(origSm);     
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Code snippet showing Ant's custom security manager architecture, used to
 enable build scripts run Java code under a specific set of permissions
 unique to the instantiated code.
\begin_inset CommandInset label
LatexCommand label
name "fig:Ant-Permissions-Enforcement"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ant uses the code section from 
\family typewriter
Permissions.java
\family default
 shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Ant-Permissions-Enforcement"

\end_inset

 to provide the user the ability to grant and revoke permissions.
 Ant calls the 
\family typewriter
setSecurityManager
\family default
 method of the 
\family typewriter
Permissions
\family default
 class when it is about to execute the restricted application.
 This method starts by saving the current security manager to a temporary
 variable.
 Then the 
\family typewriter
init
\family default
 method creates the set of granted permissions.
 The 
\family typewriter
setSecurityManager
\family default
 method then initializes a custom security manager, 
\family typewriter
MySM
\family default
, which enforces the permissions specified by the user.
 When the security manager is initially set, the security manager allows
 all permission checks to succeed, making it a defenseless security manager.
 Once the 
\family typewriter
setSecurityManager
\family default
 method changes altered to true, 
\family typewriter
MySM
\family default
 enforces the specified permissions.
 
\end_layout

\begin_layout Standard
When Ant has finished executing the application, it calls the method 
\family typewriter
restoreSecurityManager
\family default
 to remove the security manager.
 This method sets active to false, which turns off all permission checks
 performed by 
\family typewriter
MySM
\family default
.
 Once the permission checks of the current security manager are turned off,
 the method restores the original security manager.
 
\end_layout

\begin_layout Standard
With this implementation, Ant catches applications that perform actions
 restricted by the user, since the security manager is active when the applicati
on executes.
 Ant is also able to revert to the original security manager after executing
 the application.
 However, we are not sure that this implementation is free of vulnerabilities.
\end_layout

\begin_layout Standard
Netbeans similarly sets a security manager around a separate application.
 Both of these cases require a defenseless security manager, otherwise the
 application would not be able to change the current security manager.
 However, this technique may cause problems if Ant or Netbeans are used
 in security critical settings, which require a self-protecting security
 manager.
 A better implementation would use a custom class loader to load the untrusted
 classes into a constrained protection domain.
 This approach would align with the intended usage of the sandbox.
 Additionally, it would be more clearly correct and trustworthy while allowing
 Ant and Netbeans to run inside of a self-protecting sandbox.
\end_layout

\begin_layout Standard
Freemind 0.9.0 tried to solve a similar problem but ended up illustrating
 the dangers of a defenseless manager.
 Freemind is a mind mapping tool that allows users to execute Groovy scripts
 on an opened map.
 The scripts are written by the creator of the mind map.
 Groovy is a scripting language that is built on top of the JRE: A Java
 application that executes a script typically allows the script to execute
 in the same JVM as the application itself.
 As a result, a mind map could potentially be crafted to exploit a user
 that opens the map and runs its scripts, but while limited by the sandbox
 that encapsulates the Java application.
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,firstnumber=133,xrightmargin={0.1cm},numbersep={-10pt}"
inline false
status open

\begin_layout Plain Layout

   public void checkPermission(Permission pPerm, Object pContext) {
\end_layout

\begin_layout Plain Layout

     if(mFinalSecurityManager == null) return; 		
\end_layout

\begin_layout Plain Layout

     mFinalSecurityManager.checkPermission(pPerm, pContext); 	
\end_layout

\begin_layout Plain Layout

   }
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Code snippet showing how Freemind's custom security manager selectively
 enforces permissions.
 
\begin_inset CommandInset label
LatexCommand label
name "fig:Security-Checks-Freemind"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "numbers=left,basicstyle={\scriptsize},breaklines=true,firstnumber=30,xrightmargin={0.1cm},numbersep={-10pt}"
inline false
status open

\begin_layout Plain Layout

  /**  
\end_layout

\begin_layout Plain Layout

   * By default, everything is allowed.
  
\end_layout

\begin_layout Plain Layout

   * But you can install a different security controller once,  
\end_layout

\begin_layout Plain Layout

   * until you install it again.
 Thus, the code executed in   
\end_layout

\begin_layout Plain Layout

   * between is securely controlled by that different security manager.
  
\end_layout

\begin_layout Plain Layout

   * Moreover, only by double registering the manager is removed.
 So, no   
\end_layout

\begin_layout Plain Layout

   * malicious code can remove the active security manager.
  
\end_layout

\begin_layout Plain Layout

   *   
\end_layout

\begin_layout Plain Layout

   * @author foltin  
\end_layout

\begin_layout Plain Layout

   *  
\end_layout

\begin_layout Plain Layout

   */
\end_layout

\begin_layout Plain Layout

   public void setFinalSecurityManager(SecurityManager pFinalSecurityManager)
 {
\end_layout

\begin_layout Plain Layout

	 if(pFinalSecurityManager == mFinalSecurityManager){
\end_layout

\begin_layout Plain Layout

       mFinalSecurityManager = null;
\end_layout

\begin_layout Plain Layout

	   return;
\end_layout

\begin_layout Plain Layout

      } 		
\end_layout

\begin_layout Plain Layout

      if(mFinalSecurityManager != null) {
\end_layout

\begin_layout Plain Layout

      throw new SecurityException("There is a SecurityManager installed
 already."); 		
\end_layout

\begin_layout Plain Layout

      } 		
\end_layout

\begin_layout Plain Layout

      mFinalSecurityManager = pFinalSecurityManager;
\end_layout

\begin_layout Plain Layout

    }	
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Initialization of the field in Freemind's custom security manager that stores
 the active security manager.
\begin_inset CommandInset label
LatexCommand label
name "fig:Freemind-Security-Manager"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Freemind attempted to implement an architecture that would allow the sandbox
 to enforce a stricter policy on the Groovy scripts than on the rest of
 Freemind.
 Their design centers around the use of a custom security manager that is
 set as the system manager in the usual manner.
 This custom manager contains a field, 
\family typewriter
pFinalSecurityManager
\family default
, that specifies the manager that should be used during the execution of
 scripts.
 In this design, all checks to the security manager are ultimately deferred
 to the proxy manager set in this field, as shown in the example permission
 check in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Security-Checks-Freemind"

\end_inset

.
 When this field is set to 
\family typewriter
null
\family default
, the sandbox is effectively disabled even though the system's manager is
 still set to the custom manager.
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Freemind-Security-Manager"

\end_inset

 shows how Freemind sets the proxy security manager
\family typewriter
 
\family default
field in the file 
\family typewriter
FreemindSecurityManager.java
\family default
.
 Initially, the
\family typewriter
 setFinalSecurityManager
\family default
 method sets the field to the method argument.
 Once set, if the method is called again with a different security manager,
 a
\family typewriter
 SecurityException
\family default
 is thrown, but calling the method with a reference to the set manager
\family typewriter
 
\family default
disables the sandbox.
 The comment implies this specific sequence of operations was implemented
 to prevent malicious applications from changing the settings of the sandbox.
\end_layout

\begin_layout Standard
The Freemind code responsible for initiating the execution of the Groovy
 scripts sets a proxy security manager that does not allow unsigned scripts
 to create network sockets, access the file-system, or execute programs
 on the machine.
 The manager explicitly allows all other permissions.
 
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},firstnumber=199,xrightmargin={0.1cm},numbersep={-10pt}"
inline false
status open

\begin_layout Plain Layout

	public void checkSecurityAccess(String pTarget) { 	
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Freemind's custom security manager overrides permissions checks they are
 not concerned with, then fails to implement them.
 This effectively grants all permissions associated with the check.
\begin_inset CommandInset label
LatexCommand label
name "fig:Permission-Check-Groovy-Freemind"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Permission-Check-Groovy-Freemind"

\end_inset

 shows a sample permission check from the proxy manager in 
\family typewriter
ScriptingSecurityManager.java
\family default
.
 
\family typewriter
checkSecurityAccess
\family default
 typically checks if the sandbox may be changed but due to the its empty
 implementation the check will always succeed.
 A malicious script can call 
\family typewriter
System.setSecurityManger(null)
\family default
 to turn off the sandbox at any point.
\end_layout

\begin_layout Standard
We demonstrated that the custom security manager can easily be removed using
 reflection to show that the problem is more complex than simply fixing
 this permission check.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Example-Exploit-for-Freemind"

\end_inset

 shows an exploit to turn off the manager written as a Groovy script in
 a mind map.
 The script gets a reference to the system's manager and its class.
 The class has the same type as the custom security manager, thus the exploit
 gets a reference to the proxy manager field.
 The field is made public to allow the exploit to reflectively 
\family typewriter
null
\family default
 it, disabling the sandbox.
 Finally, a file is cre to demonstrate that a 
\begin_inset Quotes eld
\end_inset

forbidden
\begin_inset Quotes erd
\end_inset

 operation succeeds.
\end_layout

\begin_layout Standard
We sent a notice to the Freemind developers in August of 2014 to provide
 them with our example exploit and to offer our advice in achieving their
 desired outcome.
 
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,basicstyle={\scriptsize},breaklines=true"
inline false
status open

\begin_layout Plain Layout

def sm = System.getSecurityManager() 
\end_layout

\begin_layout Plain Layout

def sm_class = sm.getClass() 
\end_layout

\begin_layout Plain Layout

def final_sm = sm_class.getDeclaredField("mFinalSecurityManager")
\end_layout

\begin_layout Plain Layout

final_sm.setAccessible(true) 
\end_layout

\begin_layout Plain Layout

final_sm.set(sm, null)
\end_layout

\begin_layout Plain Layout

new File("hacked.txt").withWriter { out -> out.writeLine("HACKED!") }
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Example exploit that breaks out of the scripting sandbox in Freemind to
 execute arbitrary code.
\begin_inset CommandInset label
LatexCommand label
name "fig:Example-Exploit-for-Freemind"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
As a final example of security manager interactions that are for security
 purposes, we very briefly look at WildFlySecurityManager, a custom security
 manager that does not cleanly fit into our categories.
 WildFlySecurityManager allows permission checks to be disabled for classes
 granted a custom permission called 
\family typewriter
DO_UNCHECKED_PERMISSION
\family default
.
 This strategy is equivalent to running a privileged action with 
\family typewriter
doPrivileged.
\end_layout

\begin_layout Subsubsection*
Security Manager Interactions are Potentially Dangerous
\end_layout

\begin_layout Standard
We found an interesting reference to the security manager in IntelliJ IDEA
 Community Edition.
 The IntelliJ editor contains static analysis checks, called inspections,
\begin_inset Foot
status open

\begin_layout Plain Layout
http://www.jetbrains.com/idea/documentation/inspections.jsp
\end_layout

\end_inset

 to warn users of potentially problematic sections of code.
 In the inspections for security issues, the IntelliJ editor contains two
 inspections that directly pertain to interactions with the sandbox: one
 that highlights calls to 
\family typewriter
System.setSecurityManager()
\family default
 and another that highlights the definition of custom security manager classes.
 The descriptions for these inspections respectively contain warnings that
 imply that interaction with the manager can create security issues:
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

While often benign, any call to System.setSecurityManager() should be closely
 examined in any security audit.
\begin_inset Quotes eld
\end_inset

 
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

While not necessarily representing a security hole, such classes should
 be thoroughly and professionally inspected for possible security issues.
\begin_inset Quotes eld
\end_inset

 
\end_layout

\begin_layout Standard
IntelliJ's concern with developers interacting with the security manager
 in these ways is warranted given our findings that suggest vulnerabilities
 are often introduced when working with the sandbox.
\end_layout

\begin_layout Subsection
Limitations
\end_layout

\begin_layout Subsubsection

\series bold
Internal Validity
\end_layout

\begin_layout Standard
Our results are dependent on accurately studying the source code of applications
 and their comments.
 In most cases, security manager interactions are easily understood, but
 there are a few particularly complex interactions that may be misdiagnosed.
 Furthermore, we did not review all of the code the applications, thus we
 may have taken a comment or some source code out of context in larger applicati
ons.
 Finally, using two different reviewers may lead to variations in the interpreta
tions of some of the data.
 
\end_layout

\begin_layout Standard
We mitigated these threats by using a FindBugs plugin and JVMTI agent, providing
 reviewers consistent data about where to look in the code, and a means
 of validating their understanding of the code.
 Furthermore, we inspected entire source files when inspecting code that
 contained security manager operations.
 Even with this level of review, it is impossible to achieve a perfect understan
ding in every case in a reasonable period of time without reaching out to
 the developer that wrote the code.
 Finally, we tested our tools and processes in a pilot study to find and
 mitigate sources of inconsistencies.
 In our pilot study, each reviewer used the same inspection process and
 the tools listed earlier to ensure they consistently characterized sandbox
 interactions in the same set of six applications.
\end_layout

\begin_layout Subsubsection

\series bold
External Validity
\end_layout

\begin_layout Standard
The applications in the study were limited to open source programs, specifically
 well-known applications included in the Qualitas Corpus and publicly-available
 applications available on GitHub.
 It is possible that closed source applications interact with the security
 manager in ways that we did not see in the open source community.
 However, we inspected a few small applications with our aerospace collaborators.
 We did not find any code that suggested this is the case.
 
\end_layout

\begin_layout Subsubsection
Reliability
\end_layout

\begin_layout Standard
While the majority of the study is easily replicable, certain aspects of
 the our results change over time.
 GitHub search results are constantly changing.
 Using GitHub to generate a new dataset using our method would likely generate
 a different dataset.
 Furthermore, applications on GitHub can become inaccessible.
 Over the course of our security manager study, two applications either
 became private repositories or were removed from GitHub (FileManagerFtpHttpServ
er and Visor).
\end_layout

\begin_layout Section
Rules for Fortifying the Sandbox 
\begin_inset CommandInset label
LatexCommand label
name "sec:Rules-for-Fortifying"

\end_inset


\end_layout

\begin_layout Standard
Given the results of our investigation in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Security-Manager-Study"

\end_inset

 and the discussion in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Java-Exploits"

\end_inset

, we can fortify the sandbox for applications that set a
\emph on
 self-protecting
\emph default
 security manager.
 In this section, we define two rules to stop exploits from disabling the
 manager.
 These rules are backwards-compatible with benign applications: the Privilege
 Escalation rule and the Security Manager rule.
 
\end_layout

\begin_layout Subsection
Privilege Escalation Rule
\end_layout

\begin_layout Standard
The 
\shape italic
Privilege Escalation rule
\shape default
 ensures that, if a self-protecting security manager is set for the application,
 a class may not directly load a more privileged class.
 This rule is violated when the protection domain of a loaded class implies
 a permission that is not implied in the protection domain that loaded it.
 About half of recent exploits break this rule to elevate the privileges
 of their payload class.
\end_layout

\begin_layout Standard
If all classes in the Java Virtual Machine (JVM) instance were loaded at
 the start of an application, this rule would never be broken.
 However, the JVM loads certain classes on demand, and some of the JVM classes
 have the full privileges.
 The rule makes exceptions for classes in packages that are listed in the
 
\family typewriter
package.access
\family default
 property of 
\family typewriter
java.security.Security 
\family default
as these classes are intended to be loaded when accessed by a trusted proxy
 class.
 
\end_layout

\begin_layout Subsection
Security Manager Rule
\end_layout

\begin_layout Standard
The 
\shape italic
Security Manager rule
\shape default
 states that the manager cannot be changed if a 
\emph on
self-protecting
\emph default
 security manager has been set by the application.
 This rule is violated when code causes a change in the sandbox's configuration,
 the goal of many exploits.
\end_layout

\begin_layout Section
Mitigations 
\begin_inset CommandInset label
LatexCommand label
name "sec:Mitigations"

\end_inset


\end_layout

\begin_layout Standard
In section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Security-Manager-Study"

\end_inset

 we discussed (1) four hypotheses that could lead to Java exploit mitigations
 if validated and (2) how we went about validating them.
 We supported the strong hypothesis and rejected all of the others.
 Along the way, we learned practical lessons about how applications use
 the Java sandbox that are useful to exploit mitigation implementers.
 Our results included two backwards-compatible rules, discussed in section
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Rules-for-Fortifying"

\end_inset

, that can be enforced to stop current exploits.
 
\end_layout

\begin_layout Standard
In this section, we discuss the implementation and evaluation of runtime
 monitors that implement the Privilege Escalation and Security Manager rules.
 We collectively call these monitors the 
\shape italic
Java Sandbox Fortifier
\shape default
 (JSF).
 We evaluated JSF in collaboration with a large aerospace company.
 The company is currently working on deploying the tool to employee workstations
 focusing on those often the subject of attacks.
 
\end_layout

\begin_layout Standard
Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Implementation-Using-JVMTI"

\end_inset

 discusses how we implemented our runtime monitors using JVMTI.
 Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Effectiveness-at-Fortifying"

\end_inset

 explains the methodology behind and results of an experiment we conducted
 to determine how effective the monitors are at stopping existing exploits.
 Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Overhead"

\end_inset

 measures and discusses the overhead our monitors introduce to Java application
 execution.
 Finally, section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Related-Work-Mitigation"

\end_inset

 covers prior work related to our mitigations.
\end_layout

\begin_layout Subsection
Implementation Using JVMTI
\begin_inset CommandInset label
LatexCommand label
name "sub:Implementation-Using-JVMTI"

\end_inset


\end_layout

\begin_layout Standard
Prior work attempts to prevent exploits in native libraries used by language
 runtimes such as Java's 
\begin_inset CommandInset citation
LatexCommand cite
key "cappos_retaining_2010,li_quarantine:_2011,siefers_robusta:_2010,sun_jvm-portable_2012"

\end_inset

.
 The machine learning community has put some effort into detecting exploits
 delivered via drive-by downloads using Java applets and similar technologies
 
\begin_inset CommandInset citation
LatexCommand cite
key "cova_detection_2010,ford_analyzing_2009,helmer_anomalous_2001,schlumberger_jarhead_2012"

\end_inset

.
 We implemented a tool in JVMTI to proactively stop exploits written directly
 in the Java programming language to exploit vulnerable Java code.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Our tool, Java Sandbox Fortifier, is open source and hosted on GitHub at
 https://github.com/SecurityManagerCodeBase/JavaSandboxFortifier.
 
\series bold
REVIEWERS: INSPECTING THIS GITHUB PROJECT MAY REVEAL THE AUTHORS' IDENTITIES.
\end_layout

\end_inset

 In particular, our tool blocks operations that exploits use without affecting
 the execution of benign applications.
\end_layout

\begin_layout Standard
JVMTI is a native interface used to access JVM operations used to create
 analysis tools such as profilers, debuggers, monitors, and thread analyzers.
 Tools that use JVMTI are called agents, and are attached to a running Java
 application at a configuration-specific point in the application's lifecycle.
 The interface allows an agent to set capabilities, enabling the tool to
 intercept events such as class or thread creation, field access or modification
, breakpoints, etc.
 After acquiring the necessary capabilities, a JVMTI agent registers callbacks
 for the events the agent requires.
 
\end_layout

\begin_layout Standard
Our agent must intercept three events to enforce the Privilege Escalation
 and Security Manager rules: 
\family typewriter
ClassPrepare
\family default
, 
\family typewriter
FieldAccess
\family default
, and 
\family typewriter
FieldModification
\family default
.
 Enforcement of these rules is discussed in detail in subsections 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Enforcing-the-Privilege"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Enforcing-the-SecurityManager"

\end_inset

 below.
\end_layout

\begin_layout Standard
Our agent was written in C++.
 524 lines of code were required to enforce the Privilege Escalation rule;
 377 lines of code were required for the Security Manager rule.
 This code constitutes the attack surface for our tool, because a malicious
 class could potentially craft information such as class, field, or method
 names to exploit an issue in the rule enforcement code when the information
 is passed to the appropriate callback.
 The risk here is greatly reduced both by the fact that there is little
 attack surface to inspect and because work cited earlier in this section
 can be applied to our tool.
 For example, the software-based fault isolation subset of Robusta 
\begin_inset CommandInset citation
LatexCommand cite
key "siefers_robusta:_2010"

\end_inset

 can be applied to our tool to isolate the effects of an exploit.
 Using a security kernel for Java similar to Cappo's for Python 
\begin_inset CommandInset citation
LatexCommand cite
key "cappos_retaining_2010"

\end_inset

, our tool could be isolated to its own security layer with access only
 to the information it gets from JVMTI.
 We did not attempt to apply these solutions because the required tools
 and code are not publicly available, which would make it difficult, if
 not impossible, for most people to adopt our tool.
\end_layout

\begin_layout Standard
Our agent may be configured to run in 
\shape italic
enforce
\shape default
 or 
\shape italic
monitor
\shape default
 mode.
 In enforce mode, a violation of either rule causes the agent to log the
 offending behavior and terminate the JVM to which it is attached.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:A-popup-from"

\end_inset

 shows an example of a popup displayed after an exploit was caught breaking
 the Privilege Escalation rule.
 In monitor mode, the agent logs the offending behavior, but leaves the
 JVM's execution of the application untouched.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename rule_violation_popup.png
	width 3.25in

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
A popup from our agent after it caught an exploit breaking the Privilege
 Escalation rule.
\begin_inset CommandInset label
LatexCommand label
name "fig:A-popup-from"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Enforcing the Privilege Escalation Rule
\begin_inset CommandInset label
LatexCommand label
name "sub:Enforcing-the-Privilege"

\end_inset


\end_layout

\begin_layout Standard
The Privilege Escalation rule is enforced by ensuring that classes can only
 load or cause the loading of more privileged classes in restricted-access
 packages after a self-protecting security manager has been set.
 
\shape italic
Restricted-access packages
\shape default
 are packages that are public but not intended to be directly used by typical
 Java applications; they are meant for internal JRE use only.
 These packages are listed in the 
\family typewriter
package.access
\family default
 property in the 
\family typewriter
java.security.Security
\family default
 class.
 There are two ways to unsafely and directly access packages listed in this
 property: (1) exploit a vulnerability in a class that can access them or
 (2) allow access via the 
\family typewriter
accessClassInPackage
\family default
 permission.
\end_layout

\begin_layout Standard
Restricted-access package classes are often used by JRE classes that an
 application is allowed to use.
 We must allow a class to indirectly load them.
 For example, many of the classes in the 
\family typewriter
java.lang.reflect
\family default
 package are backed by classes in the 
\family typewriter
sun
\family default
 package, which is a restricted-access package containing the internal implement
ations for many Java features.
 However, enforcing the Privilege Escalation rule prevents exploits from
 elevating the privileges of their payloads because the payloads can not
 be in restricted-access packages with default JRE configurations.
\end_layout

\begin_layout Standard
To enforce the Privilege Escalation rule, our agent registers for the 
\family typewriter
ClassPrepare
\family default
 event, which allows it to inspect a class after it is fully loaded but
 just before any of its code is executed.
 Assuming the loaded class is not in a restricted-access package, the agent
 inspects the stack frame to determine which class caused the new class
 to be loaded.
 The agent must get the protection domains for both classes.
 This can not be done from the agent using the JNI because the required
 Java calls
\begin_inset Foot
status collapsed

\begin_layout Plain Layout

\family typewriter
Class.getProtectionDomain()
\end_layout

\end_inset

 will be performed with the same permissions as the executing Java application.
 Most applications where this operation is relevant (i.e.
 those that have a self-protecting manager) do not have the necessary permission
\begin_inset Foot
status collapsed

\begin_layout Plain Layout

\family typewriter
RuntimePermission(
\begin_inset Quotes eld
\end_inset

getProtectionDomain
\begin_inset Quotes erd
\end_inset

)
\end_layout

\end_inset

 to get a protection domain because the permission would allow a malicious
 class to probe the policy to determine which, if any, malicious operations
 it can perform.
 Because JVMTI agents are loaded into the JRE as a shared library, we instead
 load libjvm.so (jvm.dll on Microsoft Windows) to call JVM functions without
 security checks.
 Our agent leverages this ability to call the 
\family typewriter
GetProtectionDomain
\family default
 JVM function to get the protection domains.
 
\end_layout

\begin_layout Standard
With both protection domains, the current agent implementation simply checks
 to see whether the loaded class's protection domain has all permissions
 while the class that caused the loading does not.
 If the latter is true, the Privilege Escalation rule has been violated.
 This specific check was used because it is fast, simple, and all privileged
 classes allow all permissions under known circumstances.
 It would be easy to update this check to instead ensure that every permission
 in the loaded class's protection domain is also implied by the other protection
 domain to handle other cases.
\end_layout

\begin_layout Subsubsection
Enforcing the SecurityManager Rule
\begin_inset CommandInset label
LatexCommand label
name "sub:Enforcing-the-SecurityManager"

\end_inset


\end_layout

\begin_layout Standard
The SecurityManager rule is enforced by monitoring every read from and write
 to the 
\family typewriter
security
\family default
 field of the 
\family typewriter
System
\family default
 class: This field stores the security manager that is used by protected
 code.
 The agent implements the read and write monitors by respectively registering
 
\family typewriter
FieldAccess and FieldModification
\family default
 events for the field.
 Typically the field, which is private and static, is accessed via 
\family typewriter
System.getSecurityManager()
\family default
 and modified using 
\family typewriter
System.setSecurityManager()
\family default
, but we must monitor the field instead of instrumenting these methods to
 detect type confusion attacks.
 
\end_layout

\begin_layout Standard
The agent stores a shadow copy of the application's most recent security
 manager to have a trusted copy of the manager that can be used to check
 for rule violations.
 In a typical deployment, the agent is loaded by a JVM before the hosted
 Java application's code has begun executing.
 Even in the typical case, when a security manager is set on the command
 line that runs the application, the initial security manager would not
 be caught by the modification event because the write happens before the
 agent is loaded.
 To solve this problem, the shadow copy is first initialized by calling
 
\family typewriter
System.getSecurityManager()
\family default
 when the agent is loaded by a JVM.
 After this point, the shadow copy is only updated by the modification event,
 which receives the new manager as a parameter from JVMTI whenever the event
 is triggered.
\end_layout

\begin_layout Standard
Modification events are used to detect any change to a self-protecting security
 manager.
 When the field is written, the agent checks the shadow copy of the manager.
 Assuming the shadow copy is 
\family typewriter
null
\family default
, the agent knows the manager is being set for the first time and checks
 to see if the new manager is self-protecting.
 If the manager is self-protecting the agent simply updates the shadow copy.
 Otherwise the agent drops from 
\shape italic
enforce
\shape default
 to 
\shape italic
monitor
\shape default
 mode as applicable because the rules cannot be enforced for applications
 using defenseless managers.
 Rule enforcement in the presence of a defenseless security manager may
 break benign applications that use a defenseless manager, as shown in several
 examples in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Research-Questions-and"

\end_inset

.
 In any case, future modifications are logged as a violation of the rule,
 and trigger the operation relevant to the agent's current mode, discussed
 in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Implementation-Using-JVMTI"

\end_inset

.
\end_layout

\begin_layout Standard
Access events are used to detect type confusion attacks against the manager.
 The modification event we register will not be triggered when the manager
 is changed due to a type confusion attack.
 When a type confusion attack is used to masquerade a malicious class as
 the 
\family typewriter
System
\family default
 class, the malicious copy will have different internal JVM identifiers
 for the class itself and its methods.
 Even given these differences, updating a field in one version of the class
 updates the value the JVM stores for the field in both classes because
\family typewriter
 System
\family default
 is static and both classes appear to have the same type.
 The modification and access events are registered for specific field and
 class identifiers, thus the events are not triggered for operations on
 the malicious version.
 We leverage the mismatch this causes between the set security manager and
 our shadow copy by checking to see if the manager that is read in the access
 event has the same internal JVM reference as our shadow copy.
 When the two references do not match, the manager has been changed by a
 malicious class masquerading as 
\family typewriter
System
\family default
.
 Type confusion attacks may also be used to masquerade a class as a privileged
 class loader to elevate the privileges of a payload class that disables
 the manager; this scenario is detected by the modification event.
\end_layout

\begin_layout Subsection
Effectiveness at Fortifying the Sandbox 
\begin_inset CommandInset label
LatexCommand label
name "sub:Effectiveness-at-Fortifying"

\end_inset


\end_layout

\begin_layout Standard
We performed an experiment to evaluate how effective our agent is at blocking
 exploits that disable the sandbox.
 In our experiment, we ran Java 7 exploits for the browser from Metasploit
 4.10.0 on 64-bit Windows 7 against the initial release of version 7 of the
 JRE.
 This version of Metasploit contains twelve applets that are intended to
 exploit JRE 7 or earlier, but two did not successfully run due to Java
 exceptions we did not debug.
 Metasploit contains many Java exploits outside of the subset we used, but
 the excluded exploits either only work against long obsolete versions of
 the JRE or are not well positioned to be used in drive-by-downloads.
 
\end_layout

\begin_layout Standard
We ran the ten exploits in our set under the following conditions: (1) without
 the agent, (2) with the agent but only enforcing the Privilege Escalation
 rule, and (3) while enforcing both rules.
 We ran these conditions to respectively: (1) establish that the exploits
 succeed against our JRE, (2) test how effective the Privilege Escalation
 rule is without the security manager rule, and (3) evaluate how effective
 the agent is in the strictest configuration currently available.
 Running the Privilege Escalation rule alone shows how effective the tool
 is at stopping applet exploits with low runtime overhead.
 Overall, all ten of the exploits succeed against our JRE without the agent.
 Four were stopped by the Privilege Escalation rule.
 All ten were stopped when both rules were enforced.
 The exploits that were not stopped by the Privilege Escalation rule were
 either type confusion exploits or exploits that did not need to elevate
 the privileges of the payload class.
 The payload class does not need elevated privileges when it can directly
 access a privileged class to exploit.
 Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Exploit-experiment-summary"

\end_inset

 summarizes our results using the specific CVE's each exploit targeted.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Effectiveness test results.
\begin_inset CommandInset label
LatexCommand label
name "tab:Exploit-experiment-summary"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="11" columns="3">
<features rotate="0" booktabs="true" tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top" width="3cm">
<column alignment="left" valignment="top" width="0pt">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
CVE-ID
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Privilege Escalation Monitor
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Both Monitors
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2011-3544
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Attack Succeeded 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Attack Blocked
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2012-0507
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Attack Blocked
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Attack Blocked
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2012-4681
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Attack Succeeded 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Attack Blocked
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2012-5076
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Attack Succeeded 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Attack Blocked
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2013-0422
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Attack Blocked
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Attack Blocked
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2013-0431
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Attack Blocked
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Attack Blocked
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2013-1488
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Attack Succeeded 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Attack Blocked
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2013-2423
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Attack Succeeded 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Attack Blocked
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2013-2460
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Attack Blocked
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Attack Blocked
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2013-2465
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Attack Succeeded 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Attack Blocked
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Overhead
\begin_inset CommandInset label
LatexCommand label
name "sub:Overhead"

\end_inset


\end_layout

\begin_layout Standard
We measured JSF's performance overhead using version 9.12-bach of the DaCapo
 Benchmark Suite 
\begin_inset CommandInset citation
LatexCommand cite
key "DaCapo:paper"

\end_inset

, a standard set of real-world Java applications used for Java benchmarking.
 Performance was measured by running DaCapo 5 times using the converge switch
 
\emph on
--converge --max-iterations 30 --window 3.
 
\emph default
The average for each benchmark is the geometric mean of the last benchmark
 execution times from the 5 convergence iterations.
 We ran the benchmarks on an otherwise idle laptop with 8 gigabytes of RAM
 and an 8 core 64-bit Intel i7-3632QM CPU at 2.2 GHz.
 We used the 64-bit version of Java version 1.7.0, update 60.
\end_layout

\begin_layout Standard
The DaCapo benchmarks do not set a security manager.
 Thus, to measure JSF's overhead, we used a modified version of the agent
 that always performs JSF's rule checks.
 This produces the worst-case overhead, because the unmodified version of
 JSF only attempts to monitor for rule violations when a security manager
 has actually been set.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Performance-Test-Results."

\end_inset

 contains the performance results from these tests.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide true
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Performance test results.
\begin_inset CommandInset label
LatexCommand label
name "tab:Performance-Test-Results."

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="17" columns="8">
<features rotate="0" booktabs="true" tabularvalignment="middle">
<column alignment="left" valignment="top" width="0pt">
<column alignment="right" valignment="top" width="0pt">
<column alignment="right" valignment="top">
<column alignment="right" valignment="top">
<column alignment="right" valignment="top">
<column alignment="right" valignment="top">
<column alignment="right" valignment="top">
<column alignment="right" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No Tool
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Privilege Esc.
 Monitor
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Both Monitors
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No Tool Interpreted
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Program
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
time(ms)
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
time(ms)
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
overhead
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
time(ms)
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
overhead
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
time(ms)
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
overhead
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
avrora
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6,840
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6,458
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-5.6%
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
110,348
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1513%
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32,323
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
373%
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
batik
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1,184
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1,108
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-6.4%
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
17,279
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1359%
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6,860
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
479%
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
eclipse
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13,358
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13,481
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.9%
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
505,386
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3683%
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
188,801
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1313%
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
fop
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
272
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
265
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-2.4%
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
21,151
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7682%
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6,551
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2310%
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
h2
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6,168
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6,250
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.3%
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
422,526
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6750%
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
133,134
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2058%
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
jython
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1,581
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1,648
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4.3%
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
297,056
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
18694%
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
88,269
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5485%
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
luindex
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
748
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
674
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-9.9%
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
48,182
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6338%
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16,476
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2102%
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
lusearch
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
586
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
568
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-3.1%
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
43,848
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7385%
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
11,504
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1864%
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
pmd
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2,103
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2,122
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.9%
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
30,376
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1344%
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8,548
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
306%
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
sunflow
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1,935
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1,880
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-2.8%
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
203,036
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10394%
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
50,645
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2518%
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
tomcat
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1,635
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1,614
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-1.3%
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
24,995
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1429%
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9,166
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
461%
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
tradebeans
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8,979
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8,871
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-1.2%
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
414,509
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4516%
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
147,192
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1539%
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
tradesoap
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5,301
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5,310
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.2%
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
187,791
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3443%
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
62,169
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1073%
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
xalan
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
532
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
561
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5.5%
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
48,176
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8952%
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12,513
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2251%
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
total
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
51,221
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
50,811
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-0.8%
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2,374,659
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4536%
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
774,151
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1411%
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Our results indicate that the Privilege Escalation rule causes minimal slowdown,
 with an average of -0.8% overhead, which we believe is due to variations
 in the benchmark runs and not the tool.
 On the other hand, the Security Manager rule produced a significant slowdown,
 causing applications to run >45 times slower, on average.
 We investigated the cause of this slowdown, and found that read and write
 monitors on fields in JVMTI cause the program to run without the benefit
 of the JIT.
 We measured the benchmarks in interpreted mode to measure how much of this
 extensive slowdown is the result of the JIT being off.
 The tests determined that the interpreted applications runtime increased
 by 14.1 times relative to the JITed version of the application.
 We also measured performance with a version of the agent that receives
 the required events for both monitors but does nothing with them---the
 code that enforces the rules was removed.
 These tests produced results that are nearly identical to the results we
 received when the rule implementations were in place.
 This strongly suggests that the significant performance slowdown is caused
 by JVMTI's implementation of the events we register for to enforce the
 security manager rule.
\end_layout

\begin_layout Standard
The security manager rule slowdown can be largely mitigated by advancing
 JVMTI implementations, for example, to enable the JIT in all cases.
 However, JVMTI implementors tend to favor ease of implementation over speed
 because many non-research uses of JVMTI are not performance-critical.
 We hypothesize that the security manager rule can be implemented with significa
ntly less performance overhead if the rule is built into the JVM.
 This approach has the added benefit that the rules would become a permanent
 mitigation for all Java applications.
 We are actively communicating with Java developers to explore the prototype
 implementation of these rules in OpenJDK.
\end_layout

\begin_layout Standard
Since Java exploits are primarily delivered by drive-by-downloads, applets
 and Java Web Start applications are the greatest security security risk
 to most systems.
 With this in mind, a user can deploy JSF to only monitor applets and Java
 Web Start applications with both rules.
 This deployment option provides the strongest protection for the riskiest
 applications while allowing other applications to execute without a performance
 penalty.
 Many applets and Java Web Start applications do not require high performance,
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Many people could simply turn off the plugin to mitigate this issue, but
 large companies tend to leave it on because some employees need it: it
 is cheaper to have a standard, enterprise-wide configuration than custom
 configurations for the few employees that need applets.
 
\end_layout

\end_inset

 and both are relatively rare.
 A recent study found that less than 0.1% of websites on the entire Internet
 contain an applet 
\begin_inset CommandInset citation
LatexCommand cite
key "_applet_usage_stats"

\end_inset

.
\end_layout

\begin_layout Standard
Since both applets and Java Web Start applications run inside a browser,
 adjusting the browser plugin settings only effects both application types.
 The user can deploy the tool in only his browsers by configuring the runtime
 parameters of the Java browser plugin with the Java Control Panel.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
url{http://docs.oracle.com/javase/7/docs/technotes/guides/jweb/jcp/jcp.html#java}
\end_layout

\end_inset


\end_layout

\end_inset

 The user would set the runtime parameters to the same values used in the
 tool options environment variable in other deployments.
\end_layout

\begin_layout Subsection
Related Work
\begin_inset CommandInset label
LatexCommand label
name "sub:Related-Work-Mitigation"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Plain Layout
ZC: I am not sure if this related work section should go before the rules,
 after the rules, or after the mitigations section.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The mitigations in this study increase the security of the sandbox by removing
 unnecessary features.
 Prior work has taken a different approach, instead focusing on re-implementing
 the Java sandbox or adding to the sandbox to increase security.
 Cappos et al.
 created a new sandbox structure.
 They implemented a security isolated kernel to separate sandboxed applications
 from the main system 
\begin_inset CommandInset citation
LatexCommand cite
key "cappos_retaining_2010"

\end_inset

.
 This structure was validated by translating past Java CVEs into exploits
 for the new kernel.
 Li and Srisa-an extended the Java sandbox by providing extra protection
 for JNI calls.
 Their implementation, Quarantine, separates JNI accessible objects to a
 heap which contains extra protection mechanisms.
 The authors used the Dacapo Benchmark Suite 
\begin_inset CommandInset citation
LatexCommand cite
key "DaCapo:paper"

\end_inset

, a standard set of real-world Java applications, to measure Quarantine's
 performance effects.
 Siefers et al.
 creates a tool, Robusta, which separates JNI code into another sandbox
 
\begin_inset CommandInset citation
LatexCommand cite
key "siefers_robusta:_2010"

\end_inset

.
 Sun and Tan extend Robusta to be JVM independent 
\begin_inset CommandInset citation
LatexCommand cite
key "sun_jvm-portable_2012"

\end_inset

.
 
\end_layout

\begin_layout Standard
Java applets and Java Web Start applications are currently the most common
 way to transmit a Java exploit, usually using drive-by-downloads.
 Methods have been created to identify drive-by-downloads in JavaScript
 
\begin_inset CommandInset citation
LatexCommand cite
key "cova_detection_2010"

\end_inset

, and in Adobe Flash 
\begin_inset CommandInset citation
LatexCommand cite
key "ford_analyzing_2009"

\end_inset

.
 Helmer et al.
 used machine learning to identify malicious applets.
 Their approach was to monitor system call traces of applications to identify
 malicious behavior after execution.
 However, this approach can only respond after the malicious system calls
 have been made.
 Our approach terminate exploits when the exploit attempts to break out
 of the sandbox, before the exploit performs its payload.
 Schlumberger et al.
 used machine learning and static analysis of common exploit features to
 identify malicious applets.
 
\begin_inset Note Comment
status open

\begin_layout Plain Layout
ZC: I cannot think of a good sentence to differentiate the their approach
 from ours.
 Probably because its getting late.
 I will try to think of something tomorrow.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Plain Layout
ZC: All sentences with citations in the rest of the paper:
\end_layout

\begin_layout Plain Layout
Prior work has made an effort to prevent exploits in the native libraries
 used by language runtimes such as Java's 
\begin_inset CommandInset citation
LatexCommand cite
key "cappos_retaining_2010,li_quarantine:_2011,siefers_robusta:_2010,sun_jvm-portable_2012"

\end_inset

, and the machine learning community has put some effort into detecting
 exploits delivered via drive-by-downloads using Java applets and similar
 technologies 
\begin_inset CommandInset citation
LatexCommand cite
key "cova_detection_2010,ford_analyzing_2009,helmer_anomalous_2001,schlumberger_jarhead_2012"

\end_inset

.
 For example, the software-based fault isolation subset of Robusta 
\begin_inset CommandInset citation
LatexCommand cite
key "siefers_robusta:_2010"

\end_inset

 can be applied to our tool to isolate the effects of an exploit.
 Using a security kernel for Java similar to Cappo's for Python 
\begin_inset CommandInset citation
LatexCommand cite
key "cappos_retaining_2010"

\end_inset

, our tool could be isolated to its own security layer with access only
 to the information it gets from JVMTI.
 We measured performance overhead using version 9.12-bach of the DaCapo Benchmark
 Suite 
\begin_inset CommandInset citation
LatexCommand cite
key "DaCapo:paper"

\end_inset

, a standard set of real-world Java applications used for Java benchmarking.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Limitations
\end_layout

\begin_layout Standard
Neither of these rules will stop all Java exploits.
 While the rules catch all of the exploits in our set, some Java vulnerabilities
 can be exploited to cause significant damage without disabling the security
 manager.
 For example, our rules will not detect type confusion exploits that mimic
 privileged classes to perform their operations directly.
 However, our rules substantially improve Java sandbox security, and future
 work will be able to build upon these results to create mitigation techniques
 for additional types of exploits.
\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Standard
Our study of Java sandbox usage in open-source applications found that the
 majority of such applications do not change the security manager.
 Some of the remaining applications use the security manager only for non-securi
ty purposes.
 The final set of applications use the sandbox for security and either initializ
e a self-protecting security manager and never modify it or set a defenseless
 manager and modify it at run time.
 
\end_layout

\begin_layout Standard
These findings, in combination with our analysis of recent Java exploits,
 enabled us to build two security monitors which together successfully defeated
 Metasploit's applet exploits.
 Some of the studied applications used the security manager to prevent third
 party components from calling 
\family typewriter
System.exit()
\family default
.
 More generally, frameworks often need to enforce constraints on plugins
 (e.g.
 to ensure non-interference).
 This suggests that Java should provide a simpler, alternative mechanism
 for constraining access to global resources.
 This is supported by our findings that show developers attempting to make
 non-trivial use of the sandbox often do so incorrectly.
 
\end_layout

\begin_layout Standard
We indirectly observed many developers struggling to understand and use
 the security manager for any purpose.
 This is perhaps why there were only 47 applications in our sample.
 Some developers seemed to misunderstand the interaction between policy
 files and the security manager that enforces the policy.
 Other developers appear confused about how permissions work.
 In particular, they do not realize that restricting just one permission
 but allowing all others enables a 
\emph on
defenseless
\emph default
 sandbox.
 In general, developers appear to believe the sandbox functions as a blacklist
 when, in reality, it is a whitelist.
 These observations suggest that more resources---tool support, improved
 documentation, or better error messages---should be dedicated to helping
 developers correctly use the sandbox.
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "references"
options "ieeetr"

\end_inset


\end_layout

\end_body
\end_document
