#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass IEEEtran
\begin_preamble
\usepackage{fancyvrb}
\end_preamble
\options conference
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 1
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
author{
\backslash
IEEEauthorblockN{Zack Coker, Michael Maass, Tianyuan Ding, and Joshua Sunshine}
\end_layout

\begin_layout Plain Layout


\backslash
IEEEauthorblockA{School of Computer Science
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

Carnegie Mellon Univeristy, Pittsburgh, PA
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
{zfc, mmass
\backslash
}@cs.cmu.edu, tding@andrew.cmu.edu, sunshine@cs.cmu.edu}}
\end_layout

\end_inset


\end_layout

\begin_layout Title
Fortifying the Java Sandbox
\end_layout

\begin_layout Abstract
The Java sandbox was designed to safely execute code from untrusted sources.
 While the sandbox is an important part of Java application security, there
 is little knowledge in the research community of how applications use the
 sandbox in practice.
 The objective of this paper is to gain an understanding of how applications
 interact with the sandbox and make an initial attempt to fortify the sandbox
 against future exploits.
  To achieve the objective, we generated several claims about the nature
 of benign interactions with the sandbox and investigated the claims through
 a study of 46 open source applications.
 Our results include two backwards compatible rules, the privilege escalation
 rule and the security manager rule, whose enforcement successfully stops
 a set of 10 Java exploits that were actively used in the wild within the
 last 4 years.
 The study reveals that an implementation of the privilege escalation rule
 can stop 40% while an implementation of the security manager rule can stop
 100% of tested exploits.
 The implementation of the privilege escalation rule was found to slowdown
 the DaCapo benchmarks by XX.XX% while the implementation of the security
 manager rule was found to slowdown the DaCapo benchmarks by XX.XX%
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Plain Layout
Related science:
\end_layout

\begin_layout Plain Layout
1.
 Most Dangerous Code in the World
\end_layout

\begin_layout Plain Layout
2.
 Zero Day Vulnerabilities (Before We Knew It)
\end_layout

\begin_layout Plain Layout
3.
 Password Manager insecurity paper (from Sep 2014)
\end_layout

\begin_layout Plain Layout
Related science probably makes sense to go right before the flag post paragraph.
\end_layout

\begin_layout Plain Layout
This section should define JVMTI so that we can use it everywhere else but
 don't explain much about what it is here -- shouldn't be hard to do (cite
 the docs when doing it)
\end_layout

\begin_layout Plain Layout
Needs to mention JVM to define acronym.
\end_layout

\begin_layout Plain Layout
Be clear right up front that we aren't trying to stop all Java exploits,
 we are trying to harden existing foundations to shore up defenses for future
 mitigations.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Plain Layout
Write a paragraph to talk about why Java security is important.
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
A security goal of Java is to allow applications to safely execute untrusted
 code in a sandbox so that the application and the host machine are protected
 from malicious behavior.
 Unfortunately, recent exploits have shown that this security goal has not
 been achieved.
 Instead of the sandbox completely protecting the application, security
 researchers are constantly finding ways to exploit how the sandbox is implement
ed.
 Security Explorations, a company that researches security vulnerabilities
 in applications, found that the Java Virtual Machine (JVM) contained 19
 weaknesses and developed 12 exploits to demonstrate these weaknesses in
 a report on April 2nd 2012 
\begin_inset CommandInset citation
LatexCommand cite
key "security_explorations_2012"

\end_inset

.
 Hackers have also discovered zero-day exploits, with the exploit in August
 2012 and January 2013 making widespread news and detailed in a CERT blog
 post 
\begin_inset CommandInset citation
LatexCommand cite
key "svoboda_anatomy_blog_2013"

\end_inset

(not 100% happy with this sentence at the moment).
 If this trend continues, regular updates will not be enough to ensure the
 integrity of Java applications.
 
\end_layout

\begin_layout Standard
Past investigations of Java security exploits have shown Java malware commonly
 alters the sandbox's settings
\begin_inset CommandInset citation
LatexCommand cite
key "garber_2012"

\end_inset

.
 This alteration of the sandbox is usually achieved by turning the sandbox
 off with a call to 
\family typewriter
System.setSecurityManager(null)
\family default

\begin_inset CommandInset citation
LatexCommand cite
key "fireeye_2013,svoboda_anatomy_blog_2013,security_explorations_2012"

\end_inset

, 
\begin_inset CommandInset citation
LatexCommand cite
key "blackhat_2012"

\end_inset

, since the 
\family typewriter
SecurityManager
\family default
 is how the application interacts with the sandbox.
\end_layout

\begin_layout Standard
This knowledge leads to the question: can malicious applications be uniquely
 detected and stopped at runtime based on how they interact with the sandbox?
 To answer this question, it is important to know how benign applications
 interact with the sandbox, to avoid falsely halting an application that
 the user wants to run.
 After a thorough literature review, the authors were unable to find information
 on how Java applications interact with the sandbox.
\end_layout

\begin_layout Standard
We set up an investigation of 29 applications from the Qualitas Corpus and
 17 applications from GitHub to gain an understanding how the applications
 interacted with the sandbox.
 Specifically, the investigation focused on how the applications interacted
 with the SecurityManager since the SecurityManager is the developer facing
 side of the sandbox.
 Applications were first analyzed statically with 2 tools: one that located
 possible initializations of the sandbox and another that found possible
 sandbox interactions.
 The applications were then all manually inspected to analyze the output
 of the static analysis tools in context and to understand important sandbox
 interactions.
 Finally, application runs were monitored to see how the sandbox changed
 at runtime, verifying the results of the static analysis
\end_layout

\begin_layout Standard
Based on the findings of this analysis, two rules for fortifying the sandbox
 were implemented: the Privilege Escalation rule, which prevents applications
 from loading a class with less restrictions from a restricted class when
 a sandbox is set, and the SecurityManager rule, which prevents changes
 to the sandbox when a self-protecting Sandbox is set.
 These fortifications were found to allow benign applications to execute
 while stopping a significant portion of malicious exploits.
 
\end_layout

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Plain Layout
MM: Don't have this separate section.
 Your first sentence below makes it clear why you shouldn't have a section
 for just related work and we already compare to related work where appropriate
 (i.e.
 if you do a separate section there is no way you're going to prevent it
 from being pitiful).
 I suggest merging the discussion of these three studies into the intro
 as was originally noted above.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Plain Layout
Related Work
\end_layout

\begin_layout Plain Layout
ZC: Maybe add this later
\end_layout

\begin_layout Plain Layout
There is little work on how Java applications use the Sandbox and the security
 manager.
\end_layout

\begin_layout Plain Layout
- list studies into Java exploits
\end_layout

\begin_layout Plain Layout
- list other empirical studies into sandboxes
\end_layout

\begin_layout Plain Layout
- list other Java empirical studies relating to security
\end_layout

\end_inset


\end_layout

\begin_layout Section
Background
\end_layout

\begin_layout Subsection
The Java Sandbox
\begin_inset CommandInset label
LatexCommand label
name "sub:The-Java-Sandbox-background"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
The Java sandbox was designed to safely execute code from untrusted sources.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Java sandbox protects an application by assigning permissions to individual
 classes and then enforcing the permissions through permissions checks.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Sandbox-high-level-summary"

\end_inset

 summarizes the components of the sandbox that are relevant to this work.
 Essentially, when a class loader loads a class from some location (e.g.,
 network, filesystem, etc.) the class is assigned a code source.
 The assigned code source is used to indicate the origin of the code and
 to associate the class with a protection domain.
 Protection domains segment the classes of an application into different
 groups, where each group is assigned a unique permission set.
 The permission sets contain permissions explicitly allowing actions with
 possible security implications such as writing to the filesystem, accessing
 the network, using certain reflection features, etc.
 (see a more complete list at 
\begin_inset CommandInset citation
LatexCommand cite
key "_permissions_2014"

\end_inset

).
 The application defines how to assign classes to different protection domains,
 as well as the specific permission set for each protection domain, based
 on the permissions granted in the policy.
 
\begin_inset Note Comment
status open

\begin_layout Plain Layout
ZC: The previous sentence is too long.
 Fix later
\end_layout

\end_inset

The policy specifies the permissible behavior for the application.
 The sandbox restricts the behavior of the application to what is allowed
 in the policy.
 By default, applications which are executed from the local file system
 are run without a sandbox.
 Web applets, on the other hand, are set to run inside a sandbox by default,
 preventing the applet from performing malicious operations to the determent
 of the host system.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename sandbox_overview.png
	scale 20

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
A high-level summary of the Java sandbox as it pertains to this work.
\begin_inset CommandInset label
LatexCommand label
name "fig:Sandbox-high-level-summary"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Even if a policy is defined, the policy will not be enforced unless the
 sandbox is activated.
 The sandbox is activated by setting the security manager for the system,.
 This security manager acts as the gateway between the sandbox and the rest
 of the application.
 Whenever a class attempts to execute a method with security implications
 inside a sandbox, the security manager handles the permission check.
 For example, if an application attempts to write to a file (e.g 
\family typewriter
java.io.FileOutputStream
\family default
) inside a sandbox, the sandbox will ensure that this location inside the
 application has permission to write a file.
 The permission check is usually verified by the security manager checking
 each class in the current stack frame to make sure each class has the required
 permission.
 The permission check usually checks all of the classes in the stack frame,
 going from the class that attempted the write to the main class of the
 application.
 However, the stack walk can be stopped by a privileged class, when the
 privileged class specifically wraps the executing section inside a 
\family typewriter
doPrivileged()
\family default
 call.
 This allows for privileged code sections to perform actions with security
 implications at the request of non-privileged code sections, once the request
 has been properly verified.
 If the permission check reaches a class in the stack frame that does not
 have the correct permissions, the security manager will throw a 
\family typewriter
SecurityException
\family default
.
 Stack-based access control is discussed in more detail in 
\begin_inset CommandInset citation
LatexCommand cite
key "banerjee_stack-based_2005,besson_stack_2004,d._s._wallach_understanding_1998,erlingsson_irm_2000,fournet_stack_2002,pistoia_beyond_2007,zhao_type_2005"

\end_inset

.
 
\end_layout

\begin_layout Standard
Java provides flexibility when setting up a sandbox, allowing a sandbox
 to be set at any time during the execution of an application, or in many
 cases, before an application is started.
 In the default case for web applets and applications that use Java Network
 Protocol, a self-protecting security manager is set before the applet is
 loaded from the network.
 The security manager, and thus the sandbox, is self-protecting in the sense
 that the sandbox does not allow the application to change the settings
 of the sandbox during execution.
 A security manager can also be defenseless, meaning not self protecting.
 A defenseless manager does little to improve the security of the Java applicati
on being sandboxed.
 However, in our study, we have come to find that defenseless security managers
 have uses in certain applications 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Research-Questions-and"

\end_inset

.
 Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:defenseless-permissions"

\end_inset

 summarizes the set of permissions used to distinguish between self-protecting
 and defenseless security managers.
 A security manager enforcing a policy that contains even one of the listed
 permissions is defenseless.
 A subset of the permissions in this list were identified in 
\begin_inset CommandInset citation
LatexCommand cite
key "security_explorations_2012"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Float table
wide true
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
A security manager enforcing a policy that contains any permission in this
 list is defenseless.
\begin_inset CommandInset label
LatexCommand label
name "tab:defenseless-permissions"

\end_inset


\begin_inset Newline newline
\end_inset

*Any combination of write or execute in this permission ensures the manager
 is defenseless.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Permission
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Risk
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RuntimePermission(
\begin_inset Quotes eld
\end_inset

createClassLoader
\begin_inset Quotes erd
\end_inset

)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Load classes into any protection domain
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RuntimePermission(
\begin_inset Quotes eld
\end_inset

accessClassInPackage.sun
\begin_inset Quotes erd
\end_inset

)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Access powerful restricted-access internal classes
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RuntimePermission(
\begin_inset Quotes eld
\end_inset

setSecurityManager
\begin_inset Quotes erd
\end_inset

)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Change the application's current security manager
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ReflectPermission(
\begin_inset Quotes eld
\end_inset

suppressAccessChecks
\begin_inset Quotes erd
\end_inset

)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Allow access to all class fields and methods as if they are public
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FilePermission(
\begin_inset Quotes eld
\end_inset

<<ALL FILES>>
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

write, execute
\begin_inset Quotes erd
\end_inset

)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Write to or execute any file*
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SecurityPermission(
\begin_inset Quotes eld
\end_inset

setPolicy
\begin_inset Quotes erd
\end_inset

)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Modify the application's permissions at will
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SecurityPermission(
\begin_inset Quotes eld
\end_inset

setProperty.package.access
\begin_inset Quotes erd
\end_inset

)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Make privileged internal classes accessible
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Java Exploits
\begin_inset CommandInset label
LatexCommand label
name "sub:Java-Exploits"

\end_inset


\end_layout

\begin_layout Standard
Malicious drive-by downloads using Java applets as the vector were widely
 reported between 2011 and 2013 (&& probably should add a citation here
 &&: http://java-0day.com/).
 While Java applets should prevent malicious applications from executing
 their payload, vulnerabilities in the Java Runtime Environment (JRE) were
 leveraged by exploits to set the security manager to 
\family typewriter
null
\family default
.
 Setting the security manager to null disables the Java sandbox, allowing
 previously constrained classes to perform any operation that the JRE can
 perform, meaning the malicious application can now execute the payload
 on the host system.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:A-typical-exploit-payload"

\end_inset

 shows a typical payload.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset listings
lstparams "language=Java,basicstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

import java.lang.reflect.Method; 
\end_layout

\begin_layout Plain Layout

import java.security.AccessController; 
\end_layout

\begin_layout Plain Layout

import java.security.PrivilegedExceptionAction;   
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class Payload implements PrivilegedExceptionAction {         
\end_layout

\begin_layout Plain Layout

    public Payload() {
\end_layout

\begin_layout Plain Layout

        try {
\end_layout

\begin_layout Plain Layout

            AccessController.doPrivileged(this);
\end_layout

\begin_layout Plain Layout

        } catch(Exception exception) { }     
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    public void run() throws Exception {
\end_layout

\begin_layout Plain Layout

        // Disable sandbox
\end_layout

\begin_layout Plain Layout

        System.setSecurityManager(null);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    public static void outSandbox() throws Exception {
\end_layout

\begin_layout Plain Layout

        // Do malicious operations
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
A typical Java exploit payload from http://pastebin.com/QWU1rqjf.
\begin_inset CommandInset label
LatexCommand label
name "fig:A-typical-exploit-payload"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Some Java exploits use type confusion to bypass the sandbox.
 A type confusion vulnerability is exploited by breaking type safety, thus
 allowing the attacker to craft an object that can perform operations as
 if it is an instance of a class of a different type.
 For example, attackers will craft objects that either (1) point to the
 
\family typewriter
System
\family default
 class to cause any operation they perform to happen on the real 
\family typewriter
System
\family default
 class, thus allowing them to directly alter the field where the security
 manager is stored or (2) act as if they have the same type as a privileged
 class loader to load a payload class with all permissions (see CVE-2012-0507
 
\begin_inset CommandInset citation
LatexCommand cite
key "_vulnerability_2012_0507"

\end_inset

).
\end_layout

\begin_layout Standard
A prominent subclass of Java exploits take advantage of a confused deputy
 vulnerability 
\begin_inset CommandInset citation
LatexCommand cite
key "hardy_confused_1988"

\end_inset

, which is a subset of privilege escalation.
 In the case of a confused deputy exploit, the exploit convinces a privileged
 class to return a reference to a class which performs privileged operations
 without security checks, such as the classes in the sun package.
 These privileged classes without security checks are isolated from a self-prote
cting sandbox, and only callable by classes which have already performed
 security checks.
 However, when untrusted code is able to gain direct access to privileged
 classes without security checks, actions with security effects can be executed
 in a way that avoids the restrictions of the sandbox.
 Once an exploit gains access to a privileged class without security checks,
 the privileged class is usually used to remove the sandbox (see CVE-2012-4681
 
\begin_inset CommandInset citation
LatexCommand cite
key "_vulnerability_2012_4681"

\end_inset

), allowing the exploit to execute its payload.
\end_layout

\begin_layout Standard
Many of the recent vulnerabilities would not have been introduced if the
 JRE was developed while strictly following 
\begin_inset Quotes eld
\end_inset

The CERT Oracle Secure Coding Standard for Java
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "long_cert_2011"

\end_inset

.
 For example, Svoboda 
\begin_inset CommandInset citation
LatexCommand cite
key "svoboda_anatomy_blog_2013,svoboda_anatomy_2014"

\end_inset

 pointed out that CVE-2012-0507 and CVE-2012-4681 were caused by violating
 a total of six different secure coding rules and four guidelines.
 In the typical case, following just one or two of the broken rules and
 guidelines would have prevented a serious exploit.
 In the rest of this paper we concern ourselves with ways to fortify the
 Java sandbox without breaking backwards compatibility and not with the
 specifics of particular exploits.
\end_layout

\begin_layout Section
Security Manager Study
\begin_inset CommandInset label
LatexCommand label
name "sec:Security-Manager-Study"

\end_inset


\end_layout

\begin_layout Standard
Our intent is to proactively stop exploits that disable the Java sandbox.
 We focus our efforts on the security manager as it is the means by which
 applications interact with the sandbox.
 To successfully stop even 0-day exploits, we must understand which operations
 both exploits and benign applications perform on the security manager.
 Assuming there is a difference between the set of operations performed
 by exploits and those performed by benign applications, we can exclude
 the operations that exploits depend on that are not of use to benign applicatio
ns.
 This outcome could effectively narrow the range of possible operations
 on the manager to stop exploits while achieving backwards compatibility
 with benign applications.
 Additionally, this strategy would help ensure the sandbox will continue
 to enforce its policy in a given execution without having to deal with
 the wide diversity in the manifestations of vulnerabilities within the
 JRE or the subtleties of their exploits.
 In this section we describe the methodology for and results of an empirical
 study that validated this strategy.
\end_layout

\begin_layout Subsection
Methodology
\end_layout

\begin_layout Standard
As discussed in previous sections, it is widely known within the Java security
 community that current exploits that operate on the security manager perform
 one operation: they disable it.
 To understand the operations benign applications perform on the manager,
 we undertook an empirical analysis consisting of static, dynamic, and manual
 inspections of the open source Java application landscape.
 Our empirical analysis aimed to validate the following claims, roughly
 categorized by the strength of the mitigation that is possible if the claim
 is true:
\end_layout

\begin_layout Standard

\series bold
Weak Claim:
\series default
 
\shape italic
Benign applications do not disable the security manager.

\shape default
 If this claim is shown to be true, exploits can be differentiated from
 benign applications by number of attempts to turn off the the current security
 manager for the system, which would turn off the sandbox.
 A mitigation strategy using this claim would easily be able to differentiate
 between a benign application and an exploit using this strategy.
 However, exploits which weaken the sandbox but do not disable the sandbox,
 would not be caught.
 For example, attackers could bypass the mitigation strategy by either weakening
 the policies enforced by the manager or replacing the current manager with
 one that never throws a 
\family typewriter
SecurityException
\family default
.
\end_layout

\begin_layout Standard

\series bold
Moderate Claim:
\series default
 
\emph on
Benign applications do not weaken the s
\emph default
ecurity manager.
 The goal of this claim is to be able to differentiate between benign applicatio
ns and exploits by the changes to the sandbox.
 A mitigation using this claim would prevent weakening the sandbox during
 runtime and thus catch both exploits which turn off the sandbox and exploits
 which only weaken the sandbox.
 However, an implementation of this mitigation would require differentiating
 between changes which weaken the sandbox and changes which do not weaken
 the sandbox.
 Classifying changes to the sandbox is difficult because it requires context
 specific information that a general mitigation strategy may not have.
 For example, if a permission to write to a file is replaced by a permission
 to write to a different file, is the sandbox weakened, strengthened, or
 exactly as secure?
\end_layout

\begin_layout Standard

\series bold
Strong Claim:
\series default
 
\shape italic
Benign applications do not change the sandbox if a self-protecting security
 manager has been set
\shape default
.
 This claim would allow differentiating exploits from benign applications
 if the sandbox is changed while the application is using the sandbox for
 security.
 A mitigation strategy using this claim would allow clear differentiation
 between benign applications and exploits, while also preventing exploits
 from changing the sandbox in any way.
 Implementing this claim requires determining if the security manager is
 self-protecting, which can be easily achieved at any time.
\end_layout

\begin_layout Standard

\series bold
Ideal Claim:
\series default
 
\shape italic
Benign applications do not change the security manager.

\shape default
 The goal of this claim is to be able to differentiate between benign applicatio
ns and exploits using the separator that only exploits change the sandbox
 during execution.
 If the study supports this claim, any attempted change to the security
 manager could be used to determine an exploit attempt.
 A mitigation strategy using this claim could clearly differentiate between
 benign applications and exploits, while also preventing the sandbox from
 changing in any way.
\end_layout

\begin_layout Standard
Our empirical analysis used applications from the Qualitas Corpus (QC) 
\begin_inset CommandInset citation
LatexCommand cite
key "QualitasCorpus:APSEC:2010"

\end_inset

 and GitHub to form a dataset of applications that use the security manager.
 To filter relevant applications out of the 112 applications in QC we performed
 a simple grep of each application's source code to find the keyword 
\shape italic
SecurityManager
\shape default
.
 Assuming any instance of the keyword was found, we included the application
 in our dataset.
 This filtering reduced the set of applications to inspect from 112 to 29.
 The 29 applications were then inspected to make sure the application could
 be compiled.
 If the specific application version used in the Qualitas Corpus was difficult
 to compile, the application was updated to a more recent version.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Applications-Studied"

\end_inset

 lists the versions of the applications used in the study.
 We performed a similar process using the GitHub search feature configured
 search through Java files for the SecurityManager keyword.
 Initially, we extracted the top 6 applications which used the term SecurityMana
ger, but upon initial inspection, we came to find this filtering method
 was producing a high false positive rate, meaning that developers were
 using the word SecurityManager in ways that were unrelated to java.lang.SecurityM
anager (later in-depth inspection determined 4 out of the 6 applications
 did not use the java.lang.SecurityManager).
 We then refined our search to only include applications which seemed to
 set up a sandbox.
 Thus we extracted the top 7 applications which used the term System.setSecurityM
anager().
 To make sure we covered applications which disabled the security manager,
 the top 7 applications where extracted which used the term System.setSecurityMan
ager(null).
 Upon inspecting the extracted results, 2 applications were already covered
 in the Qualitas Corpus so they were removed from the dataset.
 We also removed an application which was written in Ruby but contained
 Java files for a final total of 17 applications in the Github dataset.
 All applications that were downloaded from Github were downloaded as the
 latest commits so the Github applications did not need to be updated.
\end_layout

\begin_layout Standard
We created static and dynamic analysis tools to assist the manual inspection
 of applications.
 Our static analysis tool consisted of a plugin for FindBugs 
\begin_inset CommandInset citation
LatexCommand cite
key "hovemeyer_finding_2004"

\end_inset

, a tool used to statically analyze Java programs for code that matches
 a given bug pattern.
 Our plugin used the dataflow analysis in FindBugs to determine the lines
 in the application where 
\family typewriter
System.setSecurityManager
\family default
() was called, as well as the lines where the argument used in the setSecurityMa
nager call was initialized.
 We also created a dynamic analysis tool using the Java Virtual Machine
 Tool Interface (JVMTI)
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
http://docs.oracle.com/javase/7/docs/technotes/guides/jvmti/
\end_layout

\end_inset

.
 JVMTI is designed to allow tools to inspect the current state of Java applicati
ons and allow tools to control the execution of the Java application.
 JVTMI is commonly used for Java debugging and profiling tools.
 Our dynamic analysis tool set a modification watch on the 
\family typewriter
security
\family default
 field of Java's 
\family typewriter
System
\family default
 class, similar to the way debuggers watch a variable.
 The security field of the System class was chosen because the security
 field is the variable which holds the current security manager object for
 the application, and thus the current sandbox object.
 The field watch printed out the class name, source file name, and line
 of code where any change that effected the security field took place.
 The printed message contained a special notice if the security field was
 set to 
\family typewriter
null
\family default
.
 
\end_layout

\begin_layout Standard
We split the applications that used the security manager between two reviewers.
 The reviewers both analyzed applications in using the same steps, which
 are listed below.
\end_layout

\begin_layout Enumerate
The reviewer ran grep on all the Java files in the application to output
 the lines which contain the word SecurityManager.
\end_layout

\begin_layout Enumerate
If it was possible to quickly determine the application only used the SecurityMa
nager in comments or in ways that were unrelated to java.lang.SecurityManager,
 the reviewer labeled the application as a false positive.
\end_layout

\begin_layout Enumerate
If the application was not a false positive and could be compiled, the reviewer
 ran the FindBugs plugin on the application to highlight where the application
 sets the security manager for the system (turns on the sandbox).
\end_layout

\begin_layout Enumerate
The reviewer manually inspected the lines mentioned in the static analysis.
 Starting with the line where the system security manager was set and tracing
 the code to where the security manager was initialized.
 
\end_layout

\begin_layout Enumerate
The reviewer then manually inspected all of the lines mentioned in the grep
 results from step 1 to see how the application interacted with the sandbox.
 
\end_layout

\begin_layout Enumerate
For applications that were not a false positive, could be compiled, and
 effected the security manager during the execution of the application,
 the reviewer monitored the applications with the dynamic analysis tool
 while executing the applications in ways that effect the security manager.
 This step verified the conclusions made from previous steps
\end_layout

\begin_layout Enumerate
Finally, the reviewer summarized the interaction between the application
 and the security manager with an emphasis on points that support or invalidate
 each claim.
\end_layout

\begin_layout Standard
As a way to ensure the analysis steps produced the expected results and
 that both reviewers produced similar reviews for the same application,
 the analysis started with both reviewers independently analyzed the same
 6 applications.
 These provided feedback to the reviewers, allowing the reviewers to focus
 on the same interactions in the application as well as notify the reviewer
 if he was missing something important.
\end_layout

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Plain Layout
I'm not happy with this preceding paragraph.
 I think it sounds weird.
 I can't think how to word it correctly so I'll come back to it later.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Applications Studied
\begin_inset CommandInset label
LatexCommand label
name "sec:Applications-Studied"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide true
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "Table: Qualitas Dataset"

\end_inset

Qualitas Corpus Dataset
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="30" columns="3">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Application Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Version Studied
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(Apache) Ant
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.9.4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Java Project Builder
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(Apache) Batik
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SVG Image Toolkit
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
C-JDBC
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.0.2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Database Clustering Middleware
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Compiere
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Business Management Tools
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(Apache) Derby
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10.10.2.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Relational Database
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DrJava
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20130901-r5756
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Lightweight Development Environment
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Eclipse 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4.4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integrated Development Environment
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FreeMind
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.9.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Mind-Mapping Tool
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Galleon
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.5.5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Media Server
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(Apache) Hadoop
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.4.1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Distributed Computing Framework
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hibernate
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4.2.2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Object-Relational Mapping Tool
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HyperSQL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.3.2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SQL Relational Database
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
JBoss
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5.1.0.GA
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Application Middleware
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
JRuby
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.7.13
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ruby Interpreter
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(Apache) Lucene
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4.9.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Search Software
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(Apache) MyFaces
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.2.4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Server Software
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NekoHTML
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.9.21
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HTML Parser
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Netbeans
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integerated Development Enviroment
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OpenJMS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.7.7-beta
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Messaging Service
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Quartz 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.2.1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Job Scheduler
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
QuickServer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.0.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TCP Server Framework
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Spring Framework
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4.0.6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Web Development Library
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(Apache) Struts
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.3.16.3 GA
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Web Development Library
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(Apache) Tapestry
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5.3.7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Web Development Library
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(Apache) Tomcat
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8.0.9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Web Server
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Vuze
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5.3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
File Sharing Application
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Weka
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Machine Learning Algorithms
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(Apache) Xalan
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.7.1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
XML Transforming Library
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(Apache) Xerces
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.11.0.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
XML Parsing Library
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qualitas Corpus 
\begin_inset CommandInset citation
LatexCommand cite
key "QualitasCorpus:APSEC:2010"

\end_inset

 is a managed collection of open source Java applications, maintained for
 being a dataset for empirical studies .
 The goal of the Qualitas Corpus is to provide a standard set of well-known
 Java applications that is available to all researchers and can provide
 a basis for comparing results.
 Empirical studies which use an available, standard set of applications
 increase the chance that future researchers can reproduce the results of
 the study.
 
\end_layout

\begin_layout Standard
The original 112 application list was taken from the 20130901 version of
 the Qualitas Corpus.
 Using the filtering methods in the Methodology section, the 112 applications
 were reduced to 29 applications of interest.
 Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "Table: Qualitas Dataset"

\end_inset

 contains the 29 applications used the Qualitas Dataset of this study.
 11 of the 29 applications are developed by the Apache Software Foundation.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide true
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
GitHub Dataset
\begin_inset CommandInset label
LatexCommand label
name "Table: Github Dataset"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="18" columns="3">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Application Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Git Commit Studied
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
AspectJ
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
d0b8c7a1bfbc2b2f92b22bcf63598ab2442781b6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Java Extension
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DemoPermissions
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
907dfc7610da3b0e1df76ca6b561cfbc4c60f158
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Spring Extension
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
driveddoc
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12993baabfd0dd0ca629e4bb8046097f290d1bb8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Application Connector
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FileManagerFtpHttpServer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
02f775b196ed6eae8e0cd2a7760193c315846498
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FTP Server
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gjman
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
79c668c24ca65c33dc9d48d2b8372cea112ad59d
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Development Toolkit
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IntelliJ IDEA Community Edition
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4ec1634e99ab375bb44ecf2b22a62ee4f0e39a4d
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integrated Development Environment
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Jmin
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9cec118eceb92b008f183d15cc9f991a98a88402
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Lightweight JDK
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MCVersion-Control
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
74b5e6d5c055a6fd204bac8ea3300626d70bd6cb
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Minecraft Version Changer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NGOMS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
35349cca1c518382d30f0267ef077a0a1bf52606
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Business Management Tool
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
oxygen-libcore
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
79a44848bcbb39474864610cab59d0fc170ae722
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Android Development Library
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
refact4j
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
fe0cdc5eb70c492993dfb55c39f5a90294383fa1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Generic and Functional Programming Framework
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Security-Manager
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
96651247e313dd4662e52a6f8949632fdee2793e
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Alternate Security Manager
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Spring-Modules
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
583b9c78f663720f6a4433c488614fd8f18f82d2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Spring Extension
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
System Rules
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
baea2a647da1ab4965c9d4ad8a232786ea80ce1a
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
JUnit Extension
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TimeLag
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
817075e61b8fbf02b65326e9ba4af7c118679b77
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sound Application
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TracEE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
c05cb9e8127a39017202e5bfa213d1879e6bdbc7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
JavaEE Support Tool
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Visor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
31e032ac14d0d423e1b585de7041c054ddf83b0e
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Closure Library
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide true
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Classification of Applications Interacting with the SecurityManager
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="4">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Category
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Qualitas Dataset
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GitHub Dataset
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Total
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
 Change SecurityManager
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
 Only Set SecurityManager
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.
 Interact With SecurityManager
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
21
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4.
 Interacted in Main Application (sub-category of 3)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5.
 Only Interacted In Test Cases (sub-category of 3)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6.
 No Interaction (False Positive)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Plain Layout
Table 4 isn't for this section but putting it here to put all of the big
 tables on one page
\end_layout

\end_inset


\end_layout

\begin_layout Standard
While the Qualitas Corpus provides a strong basis for the study, the researchers
 wanted to collect a more diverse dataset (&& Josh said a better reason
 for this earlier.
 Ask him about it.
 &&).
 Thus, applications were also collected from GitHub, a code sharing site.
 Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "Table: Github Dataset"

\end_inset

 contains the 17 applications used in the GitHub Dataset.While the Qualitas
 Corpus provides a strong basis for the study, the researchers wanted to
 collect a more diverse dataset (&& Josh said a better reason for this earlier.
 Ask him about it.
 &&).
 Thus, applications were also collected from GitHub, a code sharing site.
 Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "Table: Github Dataset"

\end_inset

 contains the 17 applications used in the GitHub Dataset.
 refact4j is the only application without a description because the comments
 were in a language that the authors could not read.
\end_layout

\begin_layout Subsection
Results
\begin_inset CommandInset label
LatexCommand label
name "sec:Research-Questions-and"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Plain Layout
How commonly are SM's used?
\end_layout

\begin_layout Plain Layout
Why do apps use the SM? - ZC: I like How better than Why
\end_layout

\begin_layout Plain Layout
What are the common mistakes made by apps using the SM?
\end_layout

\begin_layout Plain Layout
This section should cover the rules too (or maybe mitigations should do
 it up front?) -- call them privilege escalation and SecurityManager rules
 or change the names for the rules used in Mitigations section.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Categorizing Security Manager Interactions
\end_layout

\begin_layout Standard
The first goal of our inspection of Java applications was to gain an understandi
ng of how Java applications interacted with the SecurityManager.
 To do so, applications were divided into categories based on how the applicatio
n interacted with the SecurityManager.
 The categories were: setting a SecurityManager and then changing the applicatio
n's SecurityManager during execution, setting a SecurityManager and not
 changing it during execution, interacting with a SecurityManager but never
 setting one, and not interacting with a SecurityManager at all.
 
\end_layout

\begin_layout Standard
The first category, setting a SecurityManager and then changing the SecurityMana
ger during execution, means that the applications either sets a different
 SecurityManager as the SecurityManager for the system, or the application
 alters the current SecurityManager for the system.
 Since this category was the most likely category to affect the validity
 of the claims, the applications in this category are further explained
 in later sections of this paper.
 
\end_layout

\begin_layout Standard
The second category, setting a SecurityManager and not changing it during
 execution, meant that for each execution path, there was at most one place
 the application set a security manager.
 For example, most of the executable files of Weka do not set a security
 manager.
 However, if the executable method in RemoteEngine.java runs without a security
 manage set for the JVM, the application sets a security manager.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},firstnumber=321,xrightmargin={0.1cm},numbersep={-10pt},frame=single,framesep=2mm"
inline false
status open

\begin_layout Plain Layout

    public static void main(String[] args) {     
\end_layout

\begin_layout Plain Layout

        if (System.getSecurityManager() == null) {       
\end_layout

\begin_layout Plain Layout

            System.setSecurityManager(
\end_layout

\begin_layout Plain Layout

                new RMISecurityManager());   
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Only one application in this category (JTimelag), explicitly set the security
 manager to null.
 This situation is discussed further in the section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Reducing-Web-Application-Complexity"

\end_inset

.
 
\end_layout

\begin_layout Standard
The third category, interacting with a SecurityManager but never setting
 one, consists of applications which contained code indicating the application
 was designed to work inside of a sandbox but never explicitly set up a
 sandbox in the application.
 The indicating code consists of adding extra permission checks if the applicati
on was inside of a sandbox, using doPrivileged calls to avoid checking the
 permissions of all classes on the stack, or ensuring that sections of the
 application would work within a sandbox using test cases.
 This category was further subdivided into applications which altered execution
 inside the main application (meaning extra permission checks or calling
 doPrivileged) and applications which only contained test cases that interacted
 with the sandbox.
 The only contained test cases category also includes one application, system-ru
les, which was a utility for test cases.
 
\end_layout

\begin_layout Standard
The final category, not interacting with a SecurityManager at all, means
 that the application either explicitly referenced the SecurityManager in
 comments but not in the source code or the application defined a class
 containing the name SecurityManager but the defined class did not extend
 java.lang.SecurityManager in any way.
\end_layout

\begin_layout Standard
After inspecting the 29 applications in the filtered Qualitas dataset, the
 applications were classified based on how they interacted with the SecurityMana
ger.
 Five of the applications set and then changed the SecurityManager as the
 program was running.
 Six of the applications contained code that set a SecurityManager, but
 did not change the SecurityManager after it was set.
 Thirteen applications contained code that indicated they were designed
 to run inside a SecurityManager.
 Of those thirteen applications, ten contained code in the application that
 altered behavior when a SecurityManager was set.
 Three of those thirteen applications only interacted with a SecurityManager
 in test cases.
 The remaining five applications in the filtered Qualitas dataset were false
 positives.
\end_layout

\begin_layout Standard
The GitHub dataset also contained similar results.
 Three of the seventeen applications set and then changed the SecurityManager.
 One application set a SecurityManager and then did not change the set SecurityM
anager as the program was running.
 Eight applications contained code that indicated they were designed to
 work inside a sandbox if one was set.
 Of those eight applications, three altered execution if a sandbox was set
 while five of the eight applications only interacted with a sandbox in
 test cases.
 The other five applications were false positives.
\end_layout

\begin_layout Subsection
Evaluation of the Claims
\end_layout

\begin_layout Standard
The study focused on whether the applications in the dataset supported the
 four claims listed in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Security-Manager-Study"

\end_inset

.
 The way the claims were worded, one example that contradicted the claim
 would invalidate the claim.
\end_layout

\begin_layout Standard
The first claim listed was the 
\series bold
weak claim
\series default
: 
\shape italic
Benign applications do not disable the security manager.
 
\emph on
The investigation determined that some benign applications turn off the
 system's security manger, which turns off the sandbox.
 The applications, which explicitly turned off the sandbox, usually turned
 off the sandbox for non-security purposes, which are further explained
 in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Non-security-uses-of"

\end_inset

.
 Some applications turned off the sandbox to make updating the sandbox easier
\end_layout

\begin_layout Standard
The second claim listed was the 
\series bold
moderate claim
\series default
: 
\emph on
Benign applications do not weaken the security manager.
 
\emph default
This claim was not definitively falsified if turning off the security manager
 is excluded from weakening.
 However, multiple applications provided methods for the user to dynamically
 change the security manager.
 The methods did not restrict users from weakening the security manager,
 and thus the sandbox, during execution.
\end_layout

\begin_layout Standard
The third claim was the 
\series bold
strong claim
\series default
: 
\shape italic
Benign applications do not change the security manager if a self-protecting
 security manager has been set
\shape default
.
 This claim was supported by both datasets.
 When false positives are excluded from the datasets, 19 out of 24 applications
 in the Qualitas dataset and 9 out of 12 applications in the GitHub dataset
 did not change the security manager during execution.
 This likely implies that the applications did not want the security manager
 to change during runtime.
 In the applications that allowed changing the sandbox, no application ensured
 that the application could change the sandbox in all cases.
 If a self-protecting sandbox is set for all applications in the datasets,
 all attempts to change the sandbox would be prevented by the self-protecting
 sandbox.
\end_layout

\begin_layout Standard
The fourth claim was the 
\series bold
ideal claim
\series default
:
\shape italic
 Benign applications do not change the security manager.
 
\emph on
This claim was shown to be false as multiple applications changed the security
 manager, and thus the sandbox, both for security reasons and non-security
 reasons.
\end_layout

\begin_layout Subsection
Non-security uses of the Sandbox
\begin_inset CommandInset label
LatexCommand label
name "sub:Non-security-uses-of"

\end_inset


\end_layout

\begin_layout Standard
When investigating the applications in both of the datasets, the investigators
 discovered applications used the sandbox in ways that were not designed
 to increase the security of the system.
 Specifically, the sandbox was used to enforce architectural constraints
 when interacting with other applications and to reduce development complexity
 in web application development.
\end_layout

\begin_layout Subsubsection
Enforcing Architectural Constraints 
\end_layout

\begin_layout Standard
Java applications commonly call 
\family typewriter
System.exit()
\family default
 if the application throws a non-recoverable error condition.
 However, this error handling method causes problems when applications work
 together, specifically when an application calls another application which
 will exit on an error.
 The problem with this interaction is that when the called application executes
 the 
\family typewriter
System.exit()
\family default
 line, the called application kills the calling application as well.
 The calling application is killed along with the called application because
 the execution of 
\family typewriter
System.exit()
\family default
 stops the virtual machine instance in which both applications are running.
\end_layout

\begin_layout Standard
In many cases, the ability for the called application to kill the calling
 application is an unintended side-effect.
 Thus the calling application needs to enforce the architectural constraint
 that called applications can not terminate the execution of the calling
 application.
 To enforce this architectural constraint, Java applications that call other
 applications set a SecurityManager that prevents 
\family typewriter
System.exit()
\family default
 calls.
 The new SecurityManager usually stops all calls to 
\family typewriter
System.exit()
\family default
 while the new SecurityManager is set and, if a SecurityManager was previously
 set, the new SecurityManager defers all other security checks to the previously
 set SecurityManager.
 When the calling application determines that the called application has
 finished, the calling application usually restores the previously set SecurityM
anager if one exists.
\end_layout

\begin_layout Standard
One example of an application preventing another application from calling
 
\family typewriter
System.exit()
\family default
 is Eclipse in Qualitas which calls Ant.
 When Ant reaches an unrecoverable error condition, Ant will call 
\family typewriter
System.exit()
\family default
 to terminate the compilation.
 However, Eclipse wants to continue executing and report an error to the
 user if Ant runs into a error condition.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{table}[h] 
\end_layout

\begin_layout Plain Layout


\backslash
begin{minipage}[b]{0.95
\backslash
linewidth} 
\end_layout

\begin_layout Plain Layout


\backslash
setbox0=
\backslash
vbox{%
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[breaklines,language=Java,numbers=left,numbersep=-10pt,firstnum
ber=691,basicstyle={
\backslash
scriptsize},framesep=2mm]
\end_layout

\begin_layout Plain Layout

    System.setSecurityManager(new AntSecurityManager(originalSM, Thread.currentThr
ead()));
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[breaklines,language=Java,numbers=left,numbersep=-10pt,firstnum
ber=703,basicstyle={
\backslash
scriptsize},framesep=2mm] 
\end_layout

\begin_layout Plain Layout

    getCurrentProject().executeTargets(targets); 
\backslash

\backslash
Note: Ant is executed on this line
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Java,numbers=left,numbersep=-10pt,firstnumber=721,bas
icstyle={
\backslash
scriptsize},framesep=2mm]
\end_layout

\begin_layout Plain Layout

    finally {
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[breaklines,language=Java,numbers=left,numbersep=-10pt,firstnum
ber=725,basicstyle={
\backslash
scriptsize},framesep=2mm]
\end_layout

\begin_layout Plain Layout

        if (System.getSecurityManager() instanceof AntSecurityManager) {
 
\end_layout

\begin_layout Plain Layout

            System.setSecurityManager(originalSM); 
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting} 
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout


\backslash
hspace*{0.1cm}
\end_layout

\begin_layout Plain Layout


\backslash
fbox{
\backslash
box0} 
\end_layout

\begin_layout Plain Layout


\backslash
end{minipage} 
\end_layout

\begin_layout Plain Layout


\backslash
end{table}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Shown in the code above, on line 691 Eclipse sets a SecurityManager to prevent
 Ant from calling 
\family typewriter
System.exit()
\family default
.
 After performing some other checks, Ant is executed.
 Then after handling other error conditions, the original SecurityManager
 is restored.
\end_layout

\begin_layout Standard
Another example of enforcing the architectural constraint occurs in GJMan
 in the GitHub data set.
 The code references a blog page describing this problem and the implemented
 solution: http://www.jroller.com/ethdsy/entry/disabling_system_exit.
 The code reads 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,firstnumber=703,xrightmargin={0.1cm},numbersep={-10pt},frame=single,framesep=2mm"
inline false
status open

\begin_layout Plain Layout

    public static void apply() { 
\end_layout

\begin_layout Plain Layout

        final SecurityManager securityManager = new SecurityManager() {
 
\end_layout

\begin_layout Plain Layout

            public void checkPermission(Permission permission) { 
\end_layout

\begin_layout Plain Layout

                if(permission.getName().startsWith("exitVM")) { 
\end_layout

\begin_layout Plain Layout

                    throw new Exception(); 
\end_layout

\begin_layout Plain Layout

                } 
\end_layout

\begin_layout Plain Layout

            } 
\end_layout

\begin_layout Plain Layout

        }; 
\end_layout

\begin_layout Plain Layout

       System.setSecurityManager(securityManager); 
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    public static void unapply() { 
\end_layout

\begin_layout Plain Layout

        System.setSecurityManager(null); 
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The code contains the allow method which creates a SecurityManager that
 stops System.exit calls and the sets the created SecurityManager as the
 Sandbox for the Java Virtual Machine.
 The file also includes a method to remove the SecurityManager and removes
 the Sandbox from the Java Virtual Machine.
 While GJMan does not execute these lines explicitly, GJMan is written to
 be a library for other applications, so this file is likely used in other
 applications.
 
\end_layout

\begin_layout Standard
In total, we found 3 applications using a variation of this technique: Eclipse,
 GJMan, and AspectJ.
 While this technique is useful in applying architectural constraints, and
 probably the best architectural solution available in Java at the moment,
 this technique is likely to cause problems when applications desire the
 sandbox to also enforce security constraints.
 The reason this technique creates problems when trying to enforce security
 constraints is that the sandbox must be set in a state which it can be
 dynamically removed, otherwise the calling application could never terminate.
 By allowing the sandbox to be dynamically removed, the application must
 be carefully written to avoid allowing malicious code to turn off the sandbox.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Reducing-Web-Application-Complexity"

\end_inset

Reducing Complexity In Web Application Development
\end_layout

\begin_layout Standard
When Java web applications are run inside modern web browser, the application
 is sandboxed to protect the machine which hosts the browser.
 When the sandbox is set up, applications have to work inside the restrictions
 of the sandbox, meaning that applications are only approved to use the
 permissions allowed in the standard web browser sandbox.
 
\end_layout

\begin_layout Standard
To support applications which need to use permissions unavailable in the
 standard web browser sandbox, web browsers allow Java web applications
 to run without a sandbox after obtaining user approval.
 Developers, aware that users can turn off the sandbox, can develop applications
 in a way that require the sandbox to be explicitly turned off.
 Specifically, these applications ensure that the sandbox is off at the
 start of executing the web application.
 If a default sandbox is set, this check will cause the applications to
 crash with a SecurityException.
 Thus, the only way to run the applications are to turn off the sandbox.
\end_layout

\begin_layout Standard
In total we found two applications that were using this method: Eclipse
 in Qualitas and Timelag in Github.
 Since malicious applications are also known to turn off the sandbox, i.e.
 null the SecurityManager, it is important to carefully distinguish between
 a benign application which turns off the sandbox and a malicious application
 which turns off the sandbox.
 In the case where the application attempts to turn off the sandbox when
 starting the application and the application does not attempt to ensure
 the turn off attempt will succeed, it is determined that the application
 is trying to check if a sandbox is set and, if so, stop the application.
 On the other hand, applications which attempt to ensure that the sandbox
 is turned off, even when one is set, are likely malicious.
\end_layout

\begin_layout Standard
Eclipse contains the following code section in the file WebStartMain.java
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{table}[h] 
\end_layout

\begin_layout Plain Layout


\backslash
begin{minipage}[b]{0.95
\backslash
linewidth} 
\end_layout

\begin_layout Plain Layout


\backslash
setbox0=
\backslash
vbox{%
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[breaklines,language=Java,numbers=left,numbersep=-10pt,firstnum
ber=22,basicstyle={
\backslash
scriptsize},framesep=2mm]
\end_layout

\begin_layout Plain Layout

    /** 
\end_layout

\begin_layout Plain Layout

    * The launcher to start eclipse using webstart.
 To use this launcher, the client 
\end_layout

\begin_layout Plain Layout

    * must accept to give all security permissions.
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[numbers=left,numbersep=-10pt,basicstyle={
\backslash
scriptsize},firstnumber=55,framesep=2mm,escapechar=
\backslash
%]
\end_layout

\begin_layout Plain Layout

    public static void main(String[] args) { 
\end_layout

\begin_layout Plain Layout

    System.setSecurityManager(null); %
\backslash
textbf{//TODO Hack so that when the classloader loading the fwk is created
 we don't have funny permissions.
 This should be revisited.
 }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
hspace*{0.1cm}
\end_layout

\begin_layout Plain Layout


\backslash
fbox{
\backslash
box0} 
\end_layout

\begin_layout Plain Layout


\backslash
end{minipage} 
\end_layout

\begin_layout Plain Layout


\backslash
end{table}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Eclipse comments show that the attempt to turn off the sandbox was done
 to avoid the permission issues caused by the default sandbox for Java Web
 Start.
 Timelag also contains the 
\family typewriter
System.setSecurityManager(null);
\family default
 line as the first line of its main function in the file JTimelag.java but
 does not contain any comments.
 So the motivation behind turning off the sandbox at the beginning of execution
 had to be inferred.
\end_layout

\begin_layout Subsection
Changing the SecurityManager for Security Purposes
\end_layout

\begin_layout Standard
In both datasets, we found applications that set a SecurityManager at one
 point a program and then either explicitly change or allow the user to
 change the currently set SecurityManager.
 Three applications allow the user to set and change the currently set SecurityM
anager using provided methods (Batik, Eclipse, and Spring-modules) while
 three applications attempted to explicitly set and change the SecurityManager
 during execution (Ant, Freemind, and Netbeans (!! Not 100% sure about this
 one from what Tianyuan wrote, will need to investigate it later!!)).
 
\end_layout

\begin_layout Standard
For the applications that allowed the user to set and change the SecurityManager
, it seems the applications are attempting to provide the flexibility of
 the current Sandbox implementation in Java, with no strong security case
 for implementing the SecurityManager interactions this way.
 
\end_layout

\begin_layout Standard
For example, in Batik, the file ApplicationSecurityEnforcer contains the
 code segment:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{table}[h] 
\end_layout

\begin_layout Plain Layout


\backslash
begin{minipage}[b]{0.95
\backslash
linewidth} 
\end_layout

\begin_layout Plain Layout


\backslash
setbox0=
\backslash
vbox{%
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Java,numbers=left,numbersep=-10pt,basicstyle={
\backslash
scriptsize},framesep=2mm,firstnumber=156]
\end_layout

\begin_layout Plain Layout

    public void enforceSecurity(boolean enforce){ 
\end_layout

\begin_layout Plain Layout

    SecurityManager sm = System.getSecurityManager();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    if (sm != null && sm != lastSecurityManagerInstalled){
\end_layout

\begin_layout Plain Layout

        ...
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[breaklines,language=Java,numbers=left,numbersep=-10pt,basicsty
le={
\backslash
scriptsize},framesep=2mm,firstnumber=163]
\end_layout

\begin_layout Plain Layout

        throw new SecurityException
\end_layout

\begin_layout Plain Layout

            (Messages.getString(EXCEPTION_ALIEN_SECURITY_MANAGER));   
\end_layout

\begin_layout Plain Layout

    }                  
\end_layout

\begin_layout Plain Layout

    if (enforce) { 
\end_layout

\begin_layout Plain Layout

        ...
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Java,numbers=left,numbersep=-10pt,basicstyle={
\backslash
scriptsize},framesep=2mm,firstnumber=173]
\end_layout

\begin_layout Plain Layout

        installSecurityManager();         
\end_layout

\begin_layout Plain Layout

    } else {             
\end_layout

\begin_layout Plain Layout

        if (sm != null) {                 
\end_layout

\begin_layout Plain Layout

           System.setSecurityManager(null);
\end_layout

\begin_layout Plain Layout

           lastSecurityManagerInstalled = null;             
\end_layout

\begin_layout Plain Layout

           ...
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout


\backslash
hspace*{0.1cm}
\end_layout

\begin_layout Plain Layout


\backslash
fbox{
\backslash
box0} 
\end_layout

\begin_layout Plain Layout


\backslash
end{minipage} 
\end_layout

\begin_layout Plain Layout


\backslash
end{table}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This method was designed to allow users to add a SecurityManager to an applicati
on that uses the Batik library.
 The method first takes a Boolean, then checks to make sure a Batik specific
 SecurityManager is not set.
 If a SecurityManager defined outside of Batik was not set, the application
 either sets a Batik SecurityManager, which refreshes the policy for the
 SecurityManager or sets the SecurityManager to null which turns off the
 sandbox.
 This methods use was demonstrated in some of the examples provided in the
 application download from the Batik website.
 Two of the downloads provide ways to set a SecurityManager at start up,
 the squiggle browser demo and the rasterizer demo.
 While the squiggle browser demo sets a SecurityManager and never changes
 it, the rasterizer demo can be set to call enforceSecurity with a true
 argument the first time and a false argument the second time, cause the
 application to set a SecurityManager and then remove it at the end of the
 demo.
 While this was an interesting occurrence, there seemed to be no valid reason,
 other than showing off the capabilities for the library, to turn the SecurityMa
nager off at the end of the execution.
\end_layout

\begin_layout Standard
Only in the case where an application can not be reset and the application
 cannot predict future required permissions, which we believe to be rare,
 applications would need the ability to dynamically refresh the sandbox.
 In all other cases, the ability to dynamically adjust the SecurityManager
 and the sandbox's policy is not required.
 As long as the required permission can be predicted before the application
 is running, class loaders with defined permission sets can assign the permissio
n to any newly loaded Java classes, thus allowing applications to provide
 permissions to the classes that require them.
 (&& I don't like this section's wording - I should ask Michael for input
 on how to word it correctly).
\end_layout

\begin_layout Standard
As mentioned earlier, Ant, Freemind, and Netbeans explicitly set and then
 change the current SecurityManager during runtime.
 Ant wants to allow the user the capability to execute Java applications
 during a build under a user specified set of permissions.
 To provide this capability, Ant sets the SecurityManager before executing
 the Java application and then removes the SecurityManager after the application
 has finished executing.
 Netbeans also takes a similar approach ( && need to check this &&).
\end_layout

\begin_layout Standard
Freemind 0.9.0 also tried to solve a similar problem, but demonstrates the
 difficulty of correctly implementing this solution.
 Freemind is a diagram drawing tool that allows users to execute Groovy
 scripts on the current drawing.
 The developers of Freemind implemented the sandbox so that it would turn
 on before executing a user run script and would turn off after the script
 finished executing.
 The security goals of the Freemind sandbox was to stop malicious scripts
 from creating files, executing programs on the machine, and creating network
 sockets to establish connections with outside entities.
 Unfortunately, in the version we analyzed , these goals were not achieved.
 By implementing the SecurityManager in the old SecurityManager style, explicitl
y removing privileges, multiple dangerous permissions were left, such as
 the ability to alter private variables with reflection.
 This privilege made it trivial to remove the currently set SecurityManager
 inside a Groovy script, thus turning off the sandbox, and allowing the
 script to create files.
 The authors submitted a sample exploit to the Freemind development group
 and made recommendations on how to improve the security of the Freemind
 sandbox.
 (*** also should probably mention something about the SecurityManager indirecti
on ***).
\end_layout

\begin_layout Standard
As with the applications that allow setting and chaining the SecurityManager,
 we believe the applications which set and change the SecurityManager explicitly
 can execute correctly using a static SecurityManager with class loaders
 which limit the permissions of the restricted code sections.
 
\end_layout

\begin_layout Standard
The one application that did not fall into either of these categories was
 WildflySecurityManager.
 The WildflySecurityManager allows turning off the permission checks for
 classes which have been granted the DO_UNCHECKED_PERMISSION.
 However, this method of permission checks seems to be the same as assigning
 the privileged classes the AllPermissions and then executing doPrivileged
 on the privileged actions that the privileged class needs to do.
\end_layout

\begin_layout Section
Privilege Escalation in the JVM
\begin_inset CommandInset label
LatexCommand label
name "sec:Privilege-Escalation-in"

\end_inset


\end_layout

\begin_layout Standard
Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Java-Exploits"

\end_inset

 provided background on exploits that attack privilege escalation vulnerabilitie
s in Java code.
 Essentially, these exploits either (1) exploit a privileged class loader
 to load a payload class with all permissions or (2) attack a confused deputy
 they have direct access to.
 The former is quite rare and typically the fault of a vulnerable third-party
 library because directly exposing privileged classes is a violation of
 the 
\shape italic
access control
\shape default
 principle that is part of the Java development culture
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
https://blogs.oracle.com/jrose/entry/the_isthmus_in_the_vm
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
For the most part, benign applications have no reason to directly access
 privileged classes.
 The majority of the JRE's privileged classes are internal implementations
 of features that Java provides applications less-privileged access to.
 For example, many reflection operations are implemented in the 
\family typewriter
sun.reflect
\family default
 package, which has all permissions, but Java applications are supposed
 to use classes in the 
\family typewriter
java.lang.reflect
\family default
 package to use reflection and do not have direct access to the sun classes
 given default JRE configurations.
 Classes in the java package do not perform privileged operations themselves,
 but do have permission to access classes in the sun package.
\end_layout

\begin_layout Standard
To load a privileged class, a privileged class loader must be used, thus
 a class should typically not have direct access to a class more privileged
 than itself unless the former had its privileges reduced at some point
 in the application's execution.
 This is implicit in the Java security model: if any class could load more
 privileged classes and directly cause them to execute operations, the sandbox
 in its current form would serve little purpose.
 We can leverage these distinctions to further fortify the sandbox because
 classes should not be loading more privileged classes in the presence of
 a self-protecting security manager because a self-protecting security manager
 will not allow the creation of a privileged classloader to load a class
 with all permissions (see the createClassLoader permission in table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:defenseless-permissions"

\end_inset

).
\end_layout

\begin_layout Section
Rules for Fortifying the Sandbox
\end_layout

\begin_layout Standard
Given the results of our investigation in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Security-Manager-Study"

\end_inset

 and the discussion in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Privilege-Escalation-in"

\end_inset

, we can fortify the sandbox for applications that set 
\emph on
a self-protecting
\emph default
 security manager.
 In this section we define two rules to stop exploits from disabling the
 manager that are backwards compatible with benign applications: the Privilege
 Escalation Rule and the Security Manager rule.
 
\end_layout

\begin_layout Subsection
Privilege Escalation Rule
\end_layout

\begin_layout Standard
The 
\shape italic
privilege escalation rule
\shape default
 ensures that a class may not load a more permissive class if a self-protecting
 security manager is set for the application.
 This rule is violated when the protection domain of a loaded class implies
 a permission that in not implied in the protection domain that loaded it.
 This rule is based around the fact that many exploits load a class with
 more privileges than the calling class to break out of the sandbox.
 
\end_layout

\begin_layout Standard
If all classes in the Java Virtual Machine (JVM) instance were loaded at
 the start of an application, this rule would never be broken.
 However, the JVM loads certain classes on demand, and some of the JVM classes
 have the full privileges.
 Thus the rule has to make an exception for these classes.
 Specifically, the rule makes exceptions for classes returned by the call
 
\family typewriter
java.security.Security.getProperty(
\begin_inset Quotes eld
\end_inset

package.access
\begin_inset Quotes erd
\end_inset

);.
 
\end_layout

\begin_layout Subsection
Security Manager Rule
\end_layout

\begin_layout Standard
The Security Manager Rule states that a Security Manager cannot change if
 a 
\emph on
self-protecting
\emph default
 Security Manager has been set by the application.
 By setting a 
\emph on
self-protecting 
\emph default
Security Manager, the application is removing ability of changing or removing
 the sandbox.
 Thus, the rule is violated if something in the application causes a change
 in the sandbox's setting, which is what many exploits try to ensure will
 happen.
 (&& probably should tie these to the hypotheses somehow but need to read
 the paper to understand how to do that.&&)
\end_layout

\begin_layout Section
Mitigations
\end_layout

\begin_layout Standard
In section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Security-Manager-Study"

\end_inset

 we discussed (1) three claims that would lead to Java exploit mitigations
 if validated and (2) how we went about validating them.
 In section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Research-Questions-and"

\end_inset

 we discussed additional research questions we answered while successfully
 validating the strong claim and the overall results of our empirical analysis
 of the open source Java landscape.
 The results included two backwards-compatible rules that can be enforced
 to stop current exploits.
 In this section we discuss the implementation and evaluation of a tool
 that implements the privilege escalation and SecurityManager rules.
 We evaluated this tool in collaboration with a large aerospace company
 that is currently working on deploying the tool to workstations that belong
 to employees that are often the subject of targeted attacks.
 
\end_layout

\begin_layout Subsection
Implementation Using JVMTI
\end_layout

\begin_layout Standard
Prior work has made an effort to prevent exploits in the native libraries
 used by language runtimes such as Java's 
\begin_inset CommandInset citation
LatexCommand cite
key "cappos_retaining_2010,li_quarantine:_2011,siefers_robusta:_2010,sun_jvm-portable_2012"

\end_inset

, and the machine learning community has put some effort into detecting
 exploits delivered via drive-by-downloads using Java applets and similar
 technologies 
\begin_inset CommandInset citation
LatexCommand cite
key "cova_detection_2010,ford_analyzing_2009,helmer_anomalous_2001,schlumberger_jarhead_2012"

\end_inset

.
 We implemented a tool in JVMTI to pro-actively stop exploits written directly
 in the Java programming language to exploit vulnerable Java code
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Our tool, Java Sandbox Fortifier, is open source and hosted on GitHub at
 https://github.com/SecurityManagerCodeBase/JavaSandboxFortifier.
 REVIEWERS: INSPECTING THIS GITHUB PROJECT MAY REVEAL THE AUTHORS' IDENTITIES.
\end_layout

\end_inset

.
 In particular, our tool focuses on fortifying the Java sandbox by reducing
 the methods that the sandbox can be successfully bypassed in an attack.
\end_layout

\begin_layout Standard
JVMTI is a native interface used to access JVM operations that are intended
 to be used to create analysis tools such as profilers, debuggers, monitors,
 and thread analyzers.
 Tools that use JVMTI are called agents and are attached to a running Java
 application at some configuration specific point in the application's lifecycle.
 The interface allows an agent to set capabilities that enable the tool
 to intercept events such as class and thread creation, field access and
 modifications, breakpoints, and much more.
 After acquiring the necessary capabilities, a JVMTI agent registers callbacks
 for the events they want to receive.
 JVMTI provides a rich API, hooks for instrumenting the bytecode of loaded
 classes, and access to the JNI, all of which can be used to perform nearly
 any operation on classes, threads, etc.
 that a tool may want to perform at the time when an event occurs.
 Our agent must intercept three events to enforce the privilege escalation
 and SecurityManager rules: 
\family typewriter
ClassPrepare
\family default
, 
\family typewriter
FieldAccess
\family default
, and 
\family typewriter
FieldModification
\family default
.
 Enforcement of these rules is discussed in detail in subsections below.
\end_layout

\begin_layout Standard
Our agent was written in C++.
 524 lines of code were required to enforce the privilege escalation rule
 while 377 lines of code were required for the SecurityManager rule when
 counted using the Linux tool 
\family typewriter
wc
\family default
.
 This code constitutes the attack surface for our tool because a malicious
 class could potentially craft information such as class, field, or method
 names to exploit an issue in the rule enforcement code when the information
 is passed to the appropriate callback.
 The risk here is greatly reduced both by the fact that there is little
 attack surface to inspect and due to the previously cited work that can
 be applied to our tool.
 For example, the software-based fault isolation subset of Robusta 
\begin_inset CommandInset citation
LatexCommand cite
key "siefers_robusta:_2010"

\end_inset

 can be applied to our tool to isolate the effects of an exploit.
 Using a security kernel for Java similar to Cappo's for Python 
\begin_inset CommandInset citation
LatexCommand cite
key "cappos_retaining_2010"

\end_inset

, our tool could be isolated to its own security layer with access only
 to the information it gets from JVMTI.
 We did not attempt to apply these solutions because the required tools
 and code are not publicly available, which would make it difficult, if
 not impossible, for most people to adopt our tool.
\end_layout

\begin_layout Standard
Our agent may be configured to run in enforce or monitor mode.
 In enforce mode a violation of either rule causes the agent to log the
 offending behavior and terminate the JVM to which the agent is attached.
 In monitor mode the agent logs the offending behavior but leaves the JVM's
 execution of the application untouched.
 In either case, a popup is shown to the user to let them know why their
 Java application was terminated when the agent has been configured to show
 popups (this was made configurable to prevent popups on headless servers).
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:A-popup-from"

\end_inset

 shows an example of a popup displayed after an exploit was caught breaking
 the privilege escalation rule.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename rule_violation_popup.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
A popup from our agent after it caught an exploit breaking the privilege
 escalation rule.
\begin_inset CommandInset label
LatexCommand label
name "fig:A-popup-from"

\end_inset


\end_layout

\end_inset


\begin_inset Note Comment
status open

\begin_layout Plain Layout
JSS: Fix this screenshot so the left side is not cut off and there is not
 a black artifact in the top left corner.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Enforcing the Privilege Escalation Rule
\end_layout

\begin_layout Standard
The privilege escalation rule is enforced by ensuring that, after a self-protect
ing security manager has been set, classes do not load or cause the loading
 of more privileged classes unless the privileged class is in a restricted-acces
s package.
 
\shape italic
Restricted-access packages
\shape default
 are packages that are public but not intended to be directly used by typical
 Java applications; they are meant for internal JRE use only.
 These packages are listed in the 
\family typewriter
package.access
\family default
 property in the 
\family typewriter
java.security.Security
\family default
 class.
 There are two ways to directly access packages listed in this property:
 (1) exploit a vulnerability in a class that can access them or (2) allow
 access via the 
\family typewriter
accessClassInPackage
\family default
 permission.
 The latter option would ensure the security manager is defenseless, thus
 the application would not be protected by the agent (see table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:defenseless-permissions"

\end_inset

).
\end_layout

\begin_layout Standard
We must allow a class to indirectly load a class in a restricted-access
 package because classes in these packages are often used by JRE classes
 that an application is allowed to use.
 For example, many of the classes in the 
\family typewriter
java.lang.reflect
\family default
 package are backed by classes in the 
\family typewriter
sun
\family default
 package, the latter of which is a restricted-access package that contains
 the internal implementations for many Java features.
\end_layout

\begin_layout Standard
To enforce this rule, our agent registers for the 
\family typewriter
ClassPrepare
\family default
 event, which allows it to inspect a class after it is fully loaded but
 just before any of its code is executed.
 Assuming the loaded class is not in a restricted-access package, the agent
 inspects the stack frame to determine which class caused the new class
 to be loaded.
 The agent must get the protection domains for both classes, but this can
 not be done by calling the necessary Java methods
\begin_inset Foot
status collapsed

\begin_layout Plain Layout

\family typewriter
Class.getProtectionDomain()
\end_layout

\end_inset

 via the JNI from the agent because the Java calls will be performed with
 the same permissions as the application the agent is attached to.
 Most applications where this operation is relevant (i.e.
 those that have a self-protecting manager) do not have the necessary permission
 to get a protection domain
\begin_inset Foot
status collapsed

\begin_layout Plain Layout

\family typewriter
RuntimePermission(
\begin_inset Quotes eld
\end_inset

getProtectionDomain
\begin_inset Quotes erd
\end_inset

)
\end_layout

\end_inset

 because it would allow a malicious class to probe the policy to determine
 which, if any, malicious operations it can perform.
 Due to the fact that JVMTI agents are loaded into the JRE as a shared-library,
 we instead load libjvm.so (jvm.dll on Microsoft Windows) to call JVM functions
 without security checks.
 Our agent leverages this ability to call the 
\family typewriter
GetProtectionDomain
\family default
 JVM function to get the protection domains.
 
\end_layout

\begin_layout Standard
With both protection domains, the implementation of the agent as of the
 time of this writing simply checks to see if the loaded class's protection
 domain has 
\family typewriter
AllPermissions
\family default
 while the class that caused the loading doesn't.
 If the latter is true, the privilege escalation rule has been violated.
 This specific check was used because it is fast, simple, and all privileged
 classes allow 
\family typewriter
AllPermissions
\family default
 under known circumstances.
 It would be easy to update this check to instead ensure that every permission
 in the loaded class's protection domain is also in the other protection
 domain to handle cases we are currently not aware of.
\end_layout

\begin_layout Subsubsection*
Enforcing the SecurityManager Rule
\end_layout

\begin_layout Standard
The SecurityManager rule is enforced by monitoring every read from and write
 to the 
\family typewriter
security
\family default
 field of the 
\family typewriter
System
\family default
 class; this field stores the security manager that is used by protected
 code.
 The agent implements the read and write monitors by respectively registering
 
\family typewriter
FieldAccess and FieldModification
\family default
 events for the field.
 Typically the field, which is private and static, is accessed via 
\family typewriter
System.getSecurityManager()
\family default
 and modified using 
\family typewriter
System.setSecurityManager()
\family default
, but we must monitor the field instead of instrumenting these methods to
 detect type confusion attacks, as discussed later in this section.
 
\end_layout

\begin_layout Standard
The agent stores a shadow copy of the application's most recent security
 manager to have a trusted copy of the manager that can be used to check
 for rule violations.
 In a typical deployment, the agent is loaded by a JVM before the hosted
 Java application's code has begun executing.
 Even in the typical case, when a security manager is set on the command
 line that runs the application, the initial security manager would not
 be caught by the modification event because the write happens before the
 agent is loaded.
 To solve this problem, the shadow copy is first initialized by calling
 
\family typewriter
System.getSecurityManager()
\family default
 when the agent is loaded by a JVM.
 After this point, the shadow copy is only updated by the modification event,
 which receives the new manager as a parameter from JVMTI whenever the event
 is triggered.
\end_layout

\begin_layout Standard
Modification events are used to detect any change to a self-protecting security
 manager.
 When the field is written, the agent checks the shadow copy of the manager.
 Assuming the shadow copy is 
\family typewriter
null
\family default
, the agent knows the manager is being set for the first time and checks
 to see if the new manager is self-protecting.
 If the manager is self-protecting the agent simply updates the shadow copy,
 otherwise the agent will also drop into monitor mode when enforce mode
 is configured because the rules cannot be enforced for applications that
 use defenseless managers.
 We cannot enforce the rules in the presence of a defenseless security manager
 because enforcement may break the function of benign applications that
 utilize a defenseless manager, as in several examples in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Research-Questions-and"

\end_inset

.
 In any case, future modifications are logged as a violation of the rule
 and trigger the operation relevant to the agents current mode as discussed
 above.
\end_layout

\begin_layout Standard
Access events are used to detect type confusion attacks against the manager.
 The modification event we register will not be triggered when the manager
 is changed due to a type confusion attack.
 When a type confusion attack is used to masquerade a malicious class as
 the 
\family typewriter
System
\family default
 class, the malicious copy will have different internal JVM identifiers
 for the field that stores the manager, the class itself, and its methods
 even though writing to the field in one version of the class updates the
 same field in the other version.
 The modification and access events are registered for specific field and
 class identifiers, thus the events are not triggered for operations on
 the malicious version.
 We leverage the mismatch this causes between the set security manager and
 our shadow copy in the access event by checking to see if the manager that
 was just read has the same internal JVM reference as our shadow copy.
 When the two references do not match, the manager has been changed as the
 result of a malicious class masquerading as the 
\family typewriter
System
\family default
 class.
 Type confusion attacks may also be used to masquerade a class as a privileged
 class loader to elevate the privileges of a payload class that disables
 the manager, but this scenario is detected by the modification event.
\end_layout

\begin_layout Subsection
Overhead
\end_layout

\begin_layout Standard
Overhead is an important metric of security tools.
 Specifically for these rule implementations, the important metrics which
 need to be investigated are performance overhead, memory overhead, and
 user overhead.
 
\end_layout

\begin_layout Standard
Performance overhead was tested using version 9.12 of the Dacapo Benchmark
 
\begin_inset CommandInset citation
LatexCommand cite
key "DaCapo:paper"

\end_inset

, a standard set of Java applications with non-trivial memory loads.
 The applications in the benchmark are Avrora, Batik, Eclipse, Fop, H2,
 Jython, Luindex, Lusearch, PMD, Sunflow, Tomcat, TradeBeans, TradeSoap,
 and Xalan.
 Performance was measured by running the provided section of the application
 5 times and the the mean of the runtimes was computed.
 All performance tests were ran on an 8 Intel i7 core HP Envy M4 laptop
 with 8 GBs of RAM.
\end_layout

\begin_layout Standard
Since the Dacapo Benchmarks did not set a security manager during any of
 the benchmark runs, the the tool had to be altered to work in all cases,
 instead of when a security manager is set.
 (add something about how the altered version produces the maximum overhead
 possible) This created problems for Eclipse, Tradebeans, and Tradesoap
 where the altered Privilege Escalation Rule implementation prevented the
 benchmark from running.
 Catching the applications with the altered Privilege Escalation Rule implementa
tion is not a problem because the non-altered Privilege Escalation Rule
 implementation can successful execute the Eclipse, Tradebeans, and Tradesoap
 benchmarks.
 
\end_layout

\begin_layout Standard
\begin_inset Float table
wide true
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Performance Test Results.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="14" columns="6">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="2.5cm">
<column alignment="center" valignment="top" width="2.5cm">
<column alignment="center" valignment="top" width="2.5cm">
<column alignment="center" valignment="top" width="2.5cm">
<column alignment="center" valignment="top" width="2.5cm">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Runtime (s) / Runtime relative to no tool (%)
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
 No Tool 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
 Privilege Escalation 
\end_layout

\begin_layout Plain Layout
Rule
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.
 Both Rules 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4.
 No Tool and Interpreted 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5.
 Both Rules and Interpreted
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Avrora
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6.80 / 100
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6.86 / 100.9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
109.89 / 1615.28
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
57.04 / 838.49
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
103.36 / 1519.23
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Batik
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.70 / 100
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.90 / 70.4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20.28 / 749.9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
21.26 / 786.44
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20022.8 / 1472.42
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fop
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.379 / 100
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.87 / 135.3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
21.36 / 1548.06
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
17.31 / 1254.25
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20.32 / 1472.42
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
H2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7.20 / 100
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6.42 / 89.3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
420.29 / 5840.5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
258.07 / 3586.2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
408.69 / 5679.3
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Jython
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6.00 /100
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.94 / 65.9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
309.45 / 5178.54
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
248.258 / 4154.53
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
301.29 / 5042.05
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Luindex
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.28 / 100
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
942 / 73.84
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
48.35 / 3790.1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
43.49 / 3408.6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
45.55 / 3570.3
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Lusearch
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.39 / 100
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.06 / 76.40
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
50.24 / 3608.61
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
27.32 / 1962.5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
37.75 / 2711.7
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pmd
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.01 / 100
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.60 / 86.45
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
43.23 / 1437.78
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
21.98 / 731.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
28.15 / 936.1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sunflow
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.04 / 100
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.02 / 97.78
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
249.20 / 12163.6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
114.8 / 5603.9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
174.32 / 8508.8
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Tomcat
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.16 / 100
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.56 / 118.20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
34.49 / 1593.31
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20.90 / 965.34
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
23.54 / 1087.4
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Xalan
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.54 / 100
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.50 / 97.98
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
58.58 / 3816.50
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
29.30 / 1908.53
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
41.09 / 2676.93
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Average
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
92.12
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3758.40
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2251.69
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3085.88
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The results of the performance tests indicate that the Privilege Escalation
 Rule implementation caused minimal slowdown, and actually ran 8% faster
 than the benchmarks without a tool set.
 This increase is believed to be due to the fluctuations between runs and
 not due to any effects of the tool.
 The Security Manager Rule implementation, on the other hand, produced a
 significant slowdown, causing applications to run over 37 times slower
 on average.
 We investigated the cause of this slowdown and found two causes 1) checking
 for variable changes in JVMTI cause the program to run in interpreted mode
 and 2) JVMTI checks if the watched object reference was changed at every
 object reference.
 To determine how much of a speed increase could be gained by implementing
 the Security Manager Rule using a tool that does not require the application
 to run in interpreted mode, we measured how long the benchmarks took to
 complete in interpreted mode.
 The tests determined that the interpreted applications runtime increased
 by 22.5 times the original Just-In-Time Compiled runtime.
 While this is not the full portion of the slowdown for the Security Manager
 Rule implementation, running the application in interpreted mode is over
 60% of the slowdown.
 It is likely that the Security Manager implementation could also be improved
 by avoiding the overhead associated with checking for a security manager
 change in every object change.
 Finally, to confirm that the Security Manager Rule implementation was running
 in interpreted mode, the benchmark was timed with both tools in interpreted
 mode.
 While running the tool in interpreted mode was faster than running the
 tool without interpreted mode explicitly set, the author believe this result
 is either due to the variations of individual performance tests or that
 explicitly setting interpreted mode causes the mode switch to occur faster.
\end_layout

\begin_layout Standard
Future work could address the slowdown associated with the Security Manager
 rule implementation.
 These approaches could focus on the underlying reasons for the slowdown
 in the tool or re-implement the rule in a different way.
 
\begin_inset Note Comment
status open

\begin_layout Plain Layout
Fill this in later.
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
The authors hypotheses that the Security Manager Rule can be implemented
 with significantly less performance overhead if the rule is built into
 the JVM.
 The problem with implementing the rule by changing the JVM is that any
 unofficial changes would not be supported by the JVM developers, thus increases
 the difficulty to update the JVM to the latest released version.
 Thus, the rule would likely need to be implemented by the JVM maintainers
 to create a significantly faster version without losing the ability to
 update the JVM.
\end_layout

\begin_layout Standard
The memory overhead of the tool is likely very small relative to a large
 program.
 The tool only copies a couple of memory references, such as the loaded
 classes permission set, when performing both types of security checks.
 The copies are also deallocated after each check.
 A few objects, such as the system's security manager and references to
 repeatedly called methods in the JVM are saved between security checks.
 All objects created by the tool likely have a minimal memory footprint
 compared to the complete application, although the memory footprint was
 not explicitly measured in this study.
\end_layout

\begin_layout Standard
The user overhead of the tool is also minimal.
 To use the tool in the default configuration, a user either has to compile
 the tool using the provided makefile or download a binary version of the
 tool for their system.
 Once the tool is compiled, the tool can be set to fortify all Java applications
 on a standard Oracle JVM in two steps: 1) set the JAVA_TOOL_OPTIONS environment
 variable to point to the library file for the tool with the command 
\emph on
-agentpath=path_to_library
\emph default
 2) set the JSF_HOME environment variable to point to the directory with
 the appropriately named configuration file.
 JAVA_TOOL_OPTIONS is the environment variable provided by Oracle that allows
 executing a JVMTI agent for all instances of the JVM.
 The JSF_HOME environment variable is an environment variable only applicable
 to the tool.
 These two options can be set for the whole system or only a terminal using
 a short script.
 
\end_layout

\begin_layout Standard
The default configuration of the tool is the Privilege Escalation Rule implement
ation is turned on while the Security Manager Rule is turned off.
 The default mode of the tool is enforce mode, which was described in the
 JVMTI Implementation section.
 The other default configuration option is to output the security logs to
 a file named jsf.log in the current directory of the running application.
 All of these options can be changed in the configuration file.
 The default configuration of only the Privilege Escalation rule implementation
 provides the security benefit of the Privilege Escalation Rule without
 incurring the performance hit of the Security Manage Rule implementation,
 which is discussed in the next section.
 The Security Manager Rule implementation can be turned on in the configuration
 file, adding an extra check while incurring the performance cost of the
 Security Manager Rule implementation.
 The tool can be switched from enforce mode to monitor mode if only the
 log files are desired.
 The resulting logs can also be set to a single file by specifying the file's
 path in the configuration file.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Discuss the different deployment options to work around the slowdown
\end_layout

\begin_layout Plain Layout
Explicitly mention the default configuration here! (e.g.
 SM rule off)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Plain Layout
ZC: At the moment, I'm not happy enough with the performance results to
 write this section.
 I'll come back to it when I have better numbers.
 
\end_layout

\begin_layout Plain Layout
Update - I realize this section is crap but it doesn't seem like I'm going
 to get any response on my questions until I write something here so here
 my best effort.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Effectiveness at Fortifying the Sandbox 
\end_layout

\begin_layout Standard
We performed an experiment to evaluate how effective our agent is at blocking
 exploits that disable the sandbox.
 In our experiment, we ran Java 7 exploits for the browser from Metasploit
 4.10.0
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
http://www.metasploit.com/
\end_layout

\end_inset

 on 64-bit Windows 7 against the initial release of version 7 of the JRE.
 This version of Metasploit contains twelve applets that are intended to
 exploit JRE 7 or earlier, but two did not successfully run due to Java
 exceptions we did not debug.
 Metasploit contains many Java exploits outside of the subset we used, but
 the excluded exploits either only work against long obsolete versions of
 the JRE or are not well positioned to be used in drive-by-downloads.
 
\end_layout

\begin_layout Standard
We ran the ten exploits in our set under the following conditions: without
 the agent, with the agent but only enforcing the privilege escalation rule,
 and while enforcing both rules.
 We ran these conditions to respectively: establish that the exploits succeed
 against our JRE, test how effective the privilege escalation rule is without
 the security manager rule, and evaluate how effective the agent is in the
 strictest configuration currently available.
 Running the privilege escalation rule alone shows how effective the current
 tool is at stopping applet exploits with low runtime overhead.
 Overall, all ten of the exploits succeed against our JRE without the agent,
 four were stopped by the privilege escalation rule, and all ten were stopped
 when both rules were enforced.
 The exploits that were not stopped by the privilege escalation rule were
 either type confusion exploits or exploits that did not need to elevate
 the privileges of the payload class.
 The payload class does not need elevated privileges when it can directly
 access a privileged class to exploit.
 Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Exploit-experiment-summary"

\end_inset

 summarizes our results using the specific CVE's each exploit targeted.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
A summary of CVE's we ran exploits for and how effective the agent was at
 stopping them in the following conditions: (1) just the privilege escalation
 rule enforced and (2) both rules enforced.
 Blocked exploits were stopped by the agent before the malicious payload
 could run, but fully executed exploits were able to complete their malicious
 operations.
\begin_inset CommandInset label
LatexCommand label
name "tab:Exploit-experiment-summary"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="11" columns="3">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="3cm">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Exploited CVE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Privilege Escalation Enforced
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Both Rules Enforced
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2011-3544
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fully Executed
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Blocked
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2012-0507
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Blocked
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Blocked
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2012-4681
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fully Executed
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Blocked
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2012-5076
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fully Executed
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Blocked
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2013-0422
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Blocked
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Blocked
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2013-0431
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Blocked
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Blocked
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2013-1488
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fully Executed
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Blocked
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2013-2423
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fully Executed
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Blocked
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2013-2460
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Blocked
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Blocked
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2013-2465
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fully Executed
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Blocked
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Limitations
\end_layout

\begin_layout Standard
Neither of these rules will able to stop 100% of all Java exploits.
 Both rules are unable to catch exploits which are able to escape the sandbox
 without violating the constraints the rules impose.
 While the privilege escalation rule is able to stop many of the most common
 Java exploits (40% of tested exploits), the rule still does not catch a
 significant portion of the exploits.
 The SecurityManager rule is also not able to catch all exploits.
 While the SecurityManager rule was able to catch all tested exploits, Java
 makes it possible to write exploits that do not turn off the SecurityManager
 but are still able to cause significant damage.
 While the authors believe the rules created in this study provide a substantial
 improvement over the current sandbox implementation, the authors also believe
 that future work will be able to build upon the results of this study to
 create improved mitigation techniques.
\end_layout

\begin_layout Standard

\series bold
Internal Validity
\series default
: The source of data for this study was source code and comments.
 In most cases, security manager interactions could clearly be determined
 although the reason behind complex interactions may be misdiagnosed.
 Also comments and source code could have been taken out of context, leading
 to incorrect conclusions.
 Finally using two different reviewers leads to the possibility of different
 interpretations for the same data.
 Misdiagnosing complex interactions was reduced by using the FindBugs tool
 and the JVMTI tool to help with the analysis, providing a way for the researche
rs to test their analyses.
 The issue of interpreting comments and source code out of context was reduced
 by examining the whole file but can not be completely reduced without extra
 data sources, such as developer interviews.
 Reducing the possibility of misinterpreting these sections of the program
 is left to future work.
 The issue of using two different researchers reaching different conclusions
 was reduced by comparing the 6 different independent analyses when testing
 the methodology of the study.
\end_layout

\begin_layout Standard

\series bold
External Validity:
\series default
 The applications in the study were limited to open source programs, specificall
y well known applications included in the Qualitas Corpus and publicly available
 applications available on GitHub.
 It is possible that closed source applications interact with the security
 manager differently, although investigating this problem is left to future
 work.
 Another possible problem for the study is that 11 out of 46 applications
 where created by the Apache Software Foundation.
 This problem was reduced by filtering a larger set of applications initially
 for the Qualitas Corpus, showing that in a diverse set of 112 Java applications
, 83 were determined to not interact with the security manager at all from
 the initial filtering process.
 
\end_layout

\begin_layout Standard

\series bold
Reliability: 
\series default
While the majority of the study is easily replicable, certain aspects of
 the studies results change over time.
 Github search results are constantly changing and so using GitHub to generate
 a new dataset using our method would likely generate a different dataset.
 Another problem is that applications on GitHub can become inaccessible.
 Ever the course of the study, 2 applications either became private repositories
 or were removed from Github (FileManagerFtpHttpServer and Visor).
 It is also possible that different researchers reach different conclusions
 for what the project developers intended.
 This threat to validity was reduced by the two investigators cross checking
 how 6 applications were interpreted.
 We expect that with similar studies will reach similar conclusions.
\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Standard
The main findings of the study are:
\end_layout

\begin_layout Enumerate
The majority of applications that use the sandbox do not change the SecurityMana
ger (19/29 in Qualitas and 9/17 in GitHub).
  These applications either set a SecurityManager and never change it or
 never set a SecurityManager but are designed to work inside a sandbox if
 the application is ran inside a sandbox.
\end_layout

\begin_layout Enumerate
A small portion of the applications  studied used the SecurityManager for
 non security purposes (1/29 in Qualitas and 3/17 in GitHub).
\end_layout

\begin_layout Enumerate
Multiple developers had difficult implementing the security manager correctly,
 as shown by the vulnerable Freemind implementation and multiple developers'
 comments.
\end_layout

\begin_layout Standard
From the results of this study, we
\end_layout

\begin_layout Enumerate
Determined two rules which could be used to strengthen the sandbox in a
 majority of applications: the Privilege Escalation Rule and the SecurityManager
 Rule.
\end_layout

\begin_layout Enumerate
Tested the two rules against 10 of the most popular past Java exploits and
 were able to stop 40% of the exploits with the Privilege Escalation Rule
 and 100% with the SecurityManager rule.
\end_layout

\begin_layout Enumerate
Found the Privilege Escalation Rule could be implemented with low overhead.
\end_layout

\begin_layout Standard
With this study, we were able to take the first steps to understanding how
 Java applications use the sandbox.
 While these results are only from the studied open source applications,
 we believe that the results will generalize to other Java applications.
 We also believe that the study has found many important implications for
 future work to build upon:
\end_layout

\begin_layout Enumerate
Extra security can be gained by restricting Java applications from using
 rarely used features.
\end_layout

\begin_layout Enumerate
Java applications need a way to enforce architectural constraints when running
 other Java applications in a way that doesn't conflict with security- such
 as the ability to prevent the called application from calling System.exit()
 without setting the sandbox.
\end_layout

\begin_layout Enumerate
There is a need to help developers correctly implement the Java sandbox.
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "references"
options "ieeetr"

\end_inset


\end_layout

\end_body
\end_document
