#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass IEEEtran
\begin_preamble
\usepackage{fancyvrb}
\end_preamble
\options conference
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 1
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
author{
\backslash
IEEEauthorblockN{Zack Coker, Michael Maass, Tianyuan Ding, and Joshua Sunshine}
\end_layout

\begin_layout Plain Layout


\backslash
IEEEauthorblockA{School of Computer Science
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

Carnegie Mellon Univeristy, Pittsburgh, PA
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
{zfc, mmass
\backslash
}@cs.cmu.edu, tding@andrew.cmu.edu, sunshine@cs.cmu.edu}}
\end_layout

\end_inset


\end_layout

\begin_layout Title
Fortifying the Java Sandbox
\end_layout

\begin_layout Abstract
The ubiquitously-installed Java Runtime Environment (JRE) is designed to
 execute untrusted code.
 The JRE relies on the Java sandbox to protect the host machine from malicious
 code.
 However, many recent exploits have successfully escaped the sandbox, thereby
 enabling attackers to infect countless Java hosts.
 To prevent future exploits it is essential to distinguish patterns of malicious
 use from patterns of benign use.
 We therefore performed an empirical study of benign, open-source Java applicati
ons and compared their use of the sandbox to the usage present in recent
 exploits.
 We found that benign applications with secured sandboxes do not modify
 the security manager, the security policy enforcement mechanism, after
 it is first set and do not attempt to directly use privileged classes.
 Exploits do both routinely.
 We used these results to develop two runtime monitors, one that prevents
 security manager modification and one that prevents privilege escalation.
 The privilege escalation monitor stops four of ten Metasploit Java exploits
 with negligible overhead of X%.
 Running both monitors stops all ten exploits with significant overhead
 of XXX%, which may be acceptable when running applets since they represent
 the biggest danger.
 
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Plain Layout
Related science:
\end_layout

\begin_layout Plain Layout
1.
 Most Dangerous Code in the World
\end_layout

\begin_layout Plain Layout
2.
 Zero Day Vulnerabilities (Before We Knew It)
\end_layout

\begin_layout Plain Layout
3.
 Password Manager insecurity paper (from Sep 2014)
\end_layout

\begin_layout Plain Layout
Related science probably makes sense to go right before the flag post paragraph.
\end_layout

\begin_layout Plain Layout
This section should define JVMTI so that we can use it everywhere else but
 don't explain much about what it is here -- shouldn't be hard to do (cite
 the docs when doing it)
\end_layout

\begin_layout Plain Layout
Needs to mention JVM to define acronym.
\end_layout

\begin_layout Plain Layout
Be clear right up front that we aren't trying to stop all Java exploits,
 we are trying to harden existing foundations to shore up defenses for future
 mitigations.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Plain Layout
Write a paragraph to talk about why Java security is important.
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Java Runtime Environment (JRE) is widely installed on user endpoints
 and it executes external code in the form of applets.
 These facts, combined with the hundreds of recently discovered vulnerabilities
 in Java, including a zero-day vulnerability (CVE-2013-0422), have made
 Java an extremely popular exploit vector (see Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:most-targeted-applications"

\end_inset

).
 Attackers typically lure users to websites containing hidden, yet malicious
 applets.
 Once the user visits the website, the exploit triggers a series of events
 that ends with the delivery of malware, all while the user is left unaware.
\end_layout

\begin_layout Standard
Java was designed to safely execute untrusted code and safely isolate components
 from each other in a sandbox so that the application and the host machine
 are protected from malicious behavior.
 However, the exploits cited above show that this goal has not been achieved.
 Past investigations of Java security exploits have shown Java malware commonly
 alters the sandbox's settings 
\begin_inset CommandInset citation
LatexCommand cite
key "garber_2012"

\end_inset

.
 Typically, exploits disables the security manager, the component of the
 sandbox responsible for enforcing the security policy 
\begin_inset CommandInset citation
LatexCommand cite
key "fireeye_2013,svoboda_anatomy_blog_2013,security_explorations_2012,blackhat_2012"

\end_inset

.
 It seems plausible that benign applications interact with the security
 manager differently.
 If true, this difference can be exploited to prevent future exploits.
 To investigate this further, we conducted an empirical study of benign
 open source Java applications.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename most_targeted_apps_ibm_xforce.pdf
	width 2in

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:most-targeted-applications"

\end_inset

Most targeted applications in the enterprise, according to a Dec.
 2013 survey of Trusteer customers 
\begin_inset CommandInset citation
LatexCommand cite
key "xforceQ12013"

\end_inset

.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Our empirical study was designed to answer the following research question:
 how to benign applications modify the security manager? To answer this
 question, we identified every Java project in the Qualitas Corpus
\begin_inset CommandInset citation
LatexCommand cite
key "QualitasCorpus:APSEC:2010"

\end_inset

 and the Github repository that make use of the security manager.
 We analyzed the resulting 47 projects using a custom FindBugs 
\begin_inset CommandInset citation
LatexCommand cite
key "hovemeyer_finding_2004"

\end_inset

plugin to isolate code involved in the initialization or modification of
 the security manager.
 We then manually categorized the security manager usage in each of the
 isolated code snippets.
 Finally, we used a JVMTI agent to confirm that our categorizations of code
 were accurate at runtime.
 
\end_layout

\begin_layout Standard
We discovered two types of security managers: defenseless security managers
 which enforce a security policy which enable code inside the sandbox to
 modify sandbox settings, and self-protecting security managers which disallow
 such behavior.
 Applications with defenseless security managers are inherently insecure
 and these applications sometimes modified or disabled the security manager
 during program execution.
 Some of these applications use the security manager to enforce policies
 that are unrelated to security.
 On the other hand, we found that applications with self-protecting security
 managers, a category which includes all applets, do not change sandbox
 settings during program execution.
 
\end_layout

\begin_layout Standard
Based on our analysis benign and malicious applications, we implemented
 two runtime monitors.
 The first monitor prevents privilege escalation by preventing restricted
 classes inside a sandbox from loading classes with fewer restrictions.
 The second monitor, prevents changes to the sandbox when a self-protecting
 security manager is initialized.
 We evaluated the effectiveness of our monitors against the 10 applets in
 Metasploit 4.10.0 that succesfully exploit the initial release of Java 7.
 The priviledge escalation monitor detected and stopped four of the ten
 exploits, while using both monitors together detected and stopped all ten
 exploits.
 
\end_layout

\begin_layout Standard
We evaluated the performance of our monitors using the DaCapo benchmark
 suite
\begin_inset CommandInset citation
LatexCommand cite
key "DaCapo:paper"

\end_inset

.
 The priviledge escalation monitor resulted in negligible overhead of X%
 which is low enough to enable monitoring of any Java application.
 The security manager monitor is implemented as a JVMTI agent and it monitors
 a static field, which unfotunately disables just-in-time compilation (JIT).
 Therefore, the security manager monitor resulted in substatial overhead
 of XXX%, which is unacceptable for most Java applications.
 However, the greatest threat comes from Java applets, and many of these
 are not performance intensive (e.g.
 they are web forms), so it may be reasonable to enable the security manager
 monitor only for untrusted applets and use only the priviledge escalation
 monitor for all other applications.
\end_layout

\begin_layout Standard
The contributions of this papers are as follows:
\end_layout

\begin_layout Itemize
An empirical study of Java sandbox usage in benign, open-source applications
 (Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Security-Manager-Study"

\end_inset

).
\end_layout

\begin_layout Itemize
An analysis of priviledge escalation in the Java security model and recent
 Java exploits (Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Privilege-Escalation-in"

\end_inset

).
\end_layout

\begin_layout Itemize
Two novel rules for distinguishing between benign and malicious Java programs
 (Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Rules-for-Fortifying"

\end_inset

).
\end_layout

\begin_layout Itemize
Implementations of the two rules as runtime monitors, with accompanying
 security and performance evaluations (Section
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Mitigations"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Plain Layout
Related Work
\end_layout

\begin_layout Plain Layout
ZC: Maybe add this later
\end_layout

\begin_layout Plain Layout
There is little work on how Java applications use the Sandbox and the security
 manager.
\end_layout

\begin_layout Plain Layout
- list studies into Java exploits
\end_layout

\begin_layout Plain Layout
- list other empirical studies into sandboxes
\end_layout

\begin_layout Plain Layout
- list other Java empirical studies relating to security
\end_layout

\end_inset


\end_layout

\begin_layout Section
Background
\begin_inset CommandInset label
LatexCommand label
name "sec:Background"

\end_inset


\end_layout

\begin_layout Subsection
The Java Sandbox
\begin_inset CommandInset label
LatexCommand label
name "sub:The-Java-Sandbox-background"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
The Java sandbox was designed to safely execute code from untrusted sources.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Java sandbox protects an application by assigning permissions to individual
 classes and then enforcing the permissions through permissions checks.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Sandbox-high-level-summary"

\end_inset

 summarizes the components of the sandbox that are relevant to this work.
 Essentially, when a class loader loads a class from some location (e.g.,
 network, filesystem, etc.) the class is assigned a code source.
 The assigned code source is used to indicate the origin of the code and
 to associate the class with a protection domain.
 Protection domains segment the classes of an application into different
 groups, where each group is assigned a unique permission set.
 The permission sets contain permissions explicitly allowing actions with
 possible security implications such as writing to the filesystem, accessing
 the network, using certain reflection features, etc.
 (see a more complete list at 
\begin_inset CommandInset citation
LatexCommand cite
key "_permissions_2014"

\end_inset

).
 The application defines how to assign classes to different protection domains,
 as well as the specific permission set for each protection domain, based
 on the permissions granted in the policy.
 
\begin_inset Note Comment
status open

\begin_layout Plain Layout
ZC: The previous sentence is too long.
 Fix later
\end_layout

\end_inset

The policy specifies the permissible behavior for the application.
 The sandbox restricts the behavior of the application to what is allowed
 in the policy.
 By default, applications which are executed from the local file system
 are run without a sandbox.
 Web applets, on the other hand, are set to run inside a sandbox by default,
 preventing the applet from performing malicious operations to the determent
 of the host system.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename sandbox_overview.png
	scale 20

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
A high-level summary of the Java sandbox as it pertains to this work.
\begin_inset CommandInset label
LatexCommand label
name "fig:Sandbox-high-level-summary"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Even if a policy is defined, the policy will not be enforced unless the
 sandbox is activated.
 The sandbox is activated by setting the security manager for the system,.
 This security manager acts as the gateway between the sandbox and the rest
 of the application.
 Whenever a class attempts to execute a method with security implications
 inside a sandbox, the security manager handles the permission check.
 For example, if an application attempts to write to a file (e.g 
\family typewriter
java.io.FileOutputStream
\family default
) inside a sandbox, the sandbox will ensure that this location inside the
 application has permission to write a file.
 The permission check is usually verified by the security manager checking
 each class in the current stack frame to make sure each class has the required
 permission.
 The permission check usually checks all of the classes in the stack frame,
 going from the class that attempted the write to the main class of the
 application.
 However, the stack walk can be stopped by a privileged class, when the
 privileged class specifically wraps the executing section inside a 
\family typewriter
doPrivileged()
\family default
 call.
 This allows for privileged code sections to perform actions with security
 implications at the request of non-privileged code sections, once the request
 has been properly verified.
 If the permission check reaches a class in the stack frame that does not
 have the correct permissions, the security manager will throw a 
\family typewriter
SecurityException
\family default
.
 Stack-based access control is discussed in more detail in 
\begin_inset CommandInset citation
LatexCommand cite
key "banerjee_stack-based_2005,besson_stack_2004,d._s._wallach_understanding_1998,erlingsson_irm_2000,fournet_stack_2002,pistoia_beyond_2007,zhao_type_2005"

\end_inset

.
 
\end_layout

\begin_layout Standard
Java provides flexibility when setting up a sandbox, allowing a sandbox
 to be set at any time during the execution of an application, or in many
 cases, before an application is started.
 In the default case for web applets and applications that use Java Network
 Protocol, a self-protecting security manager is set before the applet is
 loaded from the network.
 The security manager, and thus the sandbox, is self-protecting in the sense
 that the sandbox does not allow the application to change the settings
 of the sandbox during execution.
 A security manager can also be defenseless, meaning not self protecting.
 A defenseless manager does little to improve the security of the Java applicati
on being sandboxed.
 However, in our study, we have come to find that defenseless security managers
 have uses in certain applications 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Research-Questions-and"

\end_inset

.
 Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:defenseless-permissions"

\end_inset

 summarizes the set of permissions used to distinguish between self-protecting
 and defenseless security managers.
 A security manager enforcing a policy that contains even one of the listed
 permissions is defenseless.
 A subset of the permissions in this list were identified in 
\begin_inset CommandInset citation
LatexCommand cite
key "security_explorations_2012"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Float table
wide true
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
A security manager enforcing a policy that contains any permission in this
 list is defenseless.
\begin_inset CommandInset label
LatexCommand label
name "tab:defenseless-permissions"

\end_inset


\begin_inset Newline newline
\end_inset

*Any combination of write or execute in this permission ensures the manager
 is defenseless.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Permission
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Risk
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RuntimePermission(
\begin_inset Quotes eld
\end_inset

createClassLoader
\begin_inset Quotes erd
\end_inset

)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Load classes into any protection domain
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RuntimePermission(
\begin_inset Quotes eld
\end_inset

accessClassInPackage.sun
\begin_inset Quotes erd
\end_inset

)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Access powerful restricted-access internal classes
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RuntimePermission(
\begin_inset Quotes eld
\end_inset

setSecurityManager
\begin_inset Quotes erd
\end_inset

)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Change the application's current security manager
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ReflectPermission(
\begin_inset Quotes eld
\end_inset

suppressAccessChecks
\begin_inset Quotes erd
\end_inset

)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Allow access to all class fields and methods as if they are public
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FilePermission(
\begin_inset Quotes eld
\end_inset

<<ALL FILES>>
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

write, execute
\begin_inset Quotes erd
\end_inset

)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Write to or execute any file*
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SecurityPermission(
\begin_inset Quotes eld
\end_inset

setPolicy
\begin_inset Quotes erd
\end_inset

)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Modify the application's permissions at will
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SecurityPermission(
\begin_inset Quotes eld
\end_inset

setProperty.package.access
\begin_inset Quotes erd
\end_inset

)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Make privileged internal classes accessible
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Java Exploits
\begin_inset CommandInset label
LatexCommand label
name "sub:Java-Exploits"

\end_inset


\end_layout

\begin_layout Standard
Malicious drive-by downloads using Java applets as the vector were widely
 reported between 2011 and 2013 (&& probably should add a citation here
 &&: http://java-0day.com/).
 While Java applets should prevent malicious applications from executing
 their payload, vulnerabilities in the Java Runtime Environment (JRE) were
 leveraged by exploits to set the security manager to 
\family typewriter
null
\family default
.
 Setting the security manager to null disables the Java sandbox, allowing
 previously constrained classes to perform any operation that the JRE can
 perform, meaning the malicious application can now execute the payload
 on the host system.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:A-typical-exploit-payload"

\end_inset

 shows a typical payload.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset listings
lstparams "language=Java,basicstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

import java.lang.reflect.Method; 
\end_layout

\begin_layout Plain Layout

import java.security.AccessController; 
\end_layout

\begin_layout Plain Layout

import java.security.PrivilegedExceptionAction;   
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class Payload implements PrivilegedExceptionAction {         
\end_layout

\begin_layout Plain Layout

    public Payload() {
\end_layout

\begin_layout Plain Layout

        try {
\end_layout

\begin_layout Plain Layout

            AccessController.doPrivileged(this);
\end_layout

\begin_layout Plain Layout

        } catch(Exception exception) { }     
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    public void run() throws Exception {
\end_layout

\begin_layout Plain Layout

        // Disable sandbox
\end_layout

\begin_layout Plain Layout

        System.setSecurityManager(null);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    public static void outSandbox() throws Exception {
\end_layout

\begin_layout Plain Layout

        // Do malicious operations
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
A typical Java exploit payload from http://pastebin.com/QWU1rqjf.
\begin_inset CommandInset label
LatexCommand label
name "fig:A-typical-exploit-payload"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Some Java exploits use type confusion to bypass the sandbox.
 A type confusion vulnerability is exploited by breaking type safety, thus
 allowing the attacker to craft an object that can perform operations as
 if it is an instance of a class of a different type.
 For example, attackers will craft objects that either (1) point to the
 
\family typewriter
System
\family default
 class to cause any operation they perform to happen on the real 
\family typewriter
System
\family default
 class, thus allowing them to directly alter the field where the security
 manager is stored or (2) act as if they have the same type as a privileged
 class loader to load a payload class with all permissions (see CVE-2012-0507
 
\begin_inset CommandInset citation
LatexCommand cite
key "_vulnerability_2012_0507"

\end_inset

).
\end_layout

\begin_layout Standard
A prominent subclass of Java exploits take advantage of a confused deputy
 vulnerability 
\begin_inset CommandInset citation
LatexCommand cite
key "hardy_confused_1988"

\end_inset

, which is a subset of privilege escalation.
 In the case of a confused deputy exploit, the exploit convinces a privileged
 class to return a reference to a class which performs privileged operations
 without security checks, such as the classes in the sun package.
 These privileged classes without security checks are isolated from a self-prote
cting sandbox, and only callable by classes which have already performed
 security checks.
 However, when untrusted code is able to gain direct access to privileged
 classes without security checks, actions with security effects can be executed
 in a way that avoids the restrictions of the sandbox.
 Once an exploit gains access to a privileged class without security checks,
 the privileged class is usually used to remove the sandbox (see CVE-2012-4681
 
\begin_inset CommandInset citation
LatexCommand cite
key "_vulnerability_2012_4681"

\end_inset

), allowing the exploit to execute its payload.
\end_layout

\begin_layout Standard
Many of the recent vulnerabilities would not have been introduced if the
 JRE was developed while strictly following 
\begin_inset Quotes eld
\end_inset

The CERT Oracle Secure Coding Standard for Java
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "long_cert_2011"

\end_inset

.
 For example, Svoboda 
\begin_inset CommandInset citation
LatexCommand cite
key "svoboda_anatomy_blog_2013,svoboda_anatomy_2014"

\end_inset

 pointed out that CVE-2012-0507 and CVE-2012-4681 were caused by violating
 a total of six different secure coding rules and four guidelines.
 In the typical case, following just one or two of the broken rules and
 guidelines would have prevented a serious exploit.
 In the rest of this paper we concern ourselves with ways to fortify the
 Java sandbox without breaking backwards compatibility and not with the
 specifics of particular exploits.
\end_layout

\begin_layout Section
Security Manager Study
\begin_inset CommandInset label
LatexCommand label
name "sec:Security-Manager-Study"

\end_inset


\end_layout

\begin_layout Standard
Our intent is to pro-actively stop exploits that disable the Java sandbox.
 We focus our efforts on the security manager as it is the means by which
 applications interact with the sandbox.
 To successfully stop even 0-day exploits, we must understand which operations
 both exploits and benign applications perform on the security manager.
 Assuming there is a difference between the set of operations performed
 by exploits and those performed by benign applications, we can exclude
 the operations that exploits depend on that are not of use to benign applicatio
ns.
 This outcome could effectively narrow the range of possible operations
 on the manager to stop exploits while achieving backwards compatibility
 with benign applications.
 Additionally, this strategy would help ensure the sandbox continues to
 enforce its policy in a given execution without having to deal with the
 wide diversity in the manifestations of vulnerabilities within the JRE
 or the subtleties of their exploits.
 In this section we describe the methodology for and results of an empirical
 study that validated this strategy.
\end_layout

\begin_layout Subsection
Methodology
\end_layout

\begin_layout Standard
As discussed in previous sections, it is widely known within the Java security
 community that current exploits that operate on the security manager perform
 one operation: they disable it.
 To understand the operations benign applications perform on the manager,
 we undertook an empirical analysis consisting of static, dynamic, and manual
 inspections of the open source Java application landscape.
 Our empirical analysis aimed to validate the following claims, roughly
 categorized by the strength of the mitigation that is possible if the claim
 is true:
\end_layout

\begin_layout Standard

\series bold
Weak Claim:
\series default
 
\shape italic
Benign applications do not disable the security manager.

\shape default
 If this claim is true, exploits can be differentiated from benign applications
 by any attempt to disable the current security manager.
 While this mitigation would be easy to implement, exploits that weaken
 the sandbox without disabling it would remain a threat.
 For example, attackers could potentially bypass the mitigation by modifying
 the enforced policy to allow the permissions they need or they could replace
 the current manager with one that never throws a 
\family typewriter
SecurityException
\family default
.
\end_layout

\begin_layout Standard

\series bold
Moderate Claim:
\series default
 
\emph on
Benign applications do not weaken the s
\shape italic
\emph default
ecurity manager
\shape default
.
 Validation of this claim would enable mitigations that prevent attackers
 from weakening or disabling the sandbox.
 However, an implementation of this mitigation would require differentiating
 between changes which weaken the sandbox and those that do not.
 Classifying changes in this manner is difficult because it requires context
 specific information that a general mitigation strategy may not have.
 For example, if a permission to write to a file is replaced by a permission
 to write to a different file, is the sandbox weakened, strengthened, or
 exactly as secure?
\end_layout

\begin_layout Standard

\series bold
Strong Claim:
\series default
 
\shape italic
Benign applications do not change the sandbox if a self-protecting security
 manager has been set
\shape default
.
 If true, it is possible to implement a mitigation strategy whereby any
 change to a security manager that is enforcing a strict policy (as defined
 in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:The-Java-Sandbox-background"

\end_inset

) is disallowed.
 To implement this claim a runtime monitor must determine if a security
 manager is self-protecting at the time the manager is set, which can be
 easily achieved.
 While this mitigation has the same outcome as the mitigation enabled by
 successful validation of the moderate claim, this mitigation is significantly
 easier to implement and is therefore stronger.
\end_layout

\begin_layout Standard

\series bold
Ideal Claim:
\series default
 
\shape italic
Benign applications do not change a set security manager.

\shape default
 If the study supports this claim, any attempted change to an already establishe
d security manager can be considered malicious.
\end_layout

\begin_layout Standard
Our empirical analysis used applications from the Qualitas Corpus (QC) 
\begin_inset CommandInset citation
LatexCommand cite
key "QualitasCorpus:APSEC:2010"

\end_inset

 and GitHub to form a dataset of applications that use the security manager.
 To filter relevant applications out of the 112 applications in QC, we performed
 a simple grep of each application's source code to find instances of the
 keyword 
\shape italic
SecurityManager
\shape default
.
 Assuming any instance of the keyword was found, we included the application
 in our dataset.
 This filtering reduced the set of applications to inspect from 112 to 29.
 We attempted to compile each of the 29 included applications and updated
 those where problems arose with modern build tools to the newest version.
 Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Applications-Studied"

\end_inset

 lists the versions of the applications used in this study.
 
\end_layout

\begin_layout Standard
We performed a similar process using the GitHub search feature configured
 to search through Java files for the same keyword.
 Initially, we extracted the top 6 applications from the search results,
 but we came to find this filtering method was producing a high false positive
 rate: 4 out of 6 of the applications didn't actually use the 
\family typewriter
SecurityManager
\family default
 class (e.g.
 the keyword appeared in a code comment).
 To counteract these false positives, we refined our search to more precisely
 include applications that set a manager by using the keyword 
\shape italic
System.setSecurityManager(
\shape default
.
 We selected the top 7 applications from these search results while keeping
 the true positives from the previous search.
 To ensure we included applications that disable the security manager, we
 repeated this process using the keyword 
\shape italic
System.setSecurityManager(null)
\shape default
.
 From this starting point of 20 applications, we excluded 2 that were already
 covered in the Qualitas Corpus and a Ruby application that mistakenly made
 it into the set because it contained Java files.
 We always downloaded the latest commit of each application to ensure the
 GitHub dataset reflected their most current versions.
\end_layout

\begin_layout Standard
With the dataset in hand, we created static and dynamic analysis tools to
 assist in the manual inspection of each application.
 Our static analysis tool is a FindBugs 
\begin_inset CommandInset citation
LatexCommand cite
key "hovemeyer_finding_2004"

\end_inset

 plugin that uses a dataflow analysis to determine where 
\family typewriter
System.setSecurityManager
\family default
() is called, as well as the lines of code where the method's arguments
 were initialized.
 We also created a dynamic analysis tool using the Java Virtual Machine
 Tool Interface (JVMTI)
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
http://docs.oracle.com/javase/7/docs/technotes/guides/jvmti/
\end_layout

\end_inset

.
 JVMTI is designed to allow tools to inspect the current state of Java applicati
ons and control their execution; it is commonly used to create Java debugging
 and profiling tools.
 Our dynamic analysis tool set a modification watch on the 
\family typewriter
security
\family default
 field of Java's 
\family typewriter
System
\family default
 class.
 This particular field holds the current security manager object for the
 application, which is used throughout the application's execution to ensure
 that code has the correct permissions to perform protected operations.
 The watch prints out the class name, source file name, and line of code
 where any change to the field took place.
 A special notice is printed when the field is set to 
\family typewriter
null
\family default
.
 
\end_layout

\begin_layout Standard
We split the dataset between two reviewers.
 The reviewers both analyzed applications using the steps listed here:
\end_layout

\begin_layout Enumerate
The reviewer ran grep on all Java source files in the application to output
 the lines which contain the keyword 
\shape slanted
SecurityManager
\shape default
 and the 5 lines before and after these lines.
\end_layout

\begin_layout Enumerate
When it was clear from the grep output that the keyword was used in comments
 or in ways that were unrelated to the security manage class, the reviewer
 labeled the application as a false positive.
\end_layout

\begin_layout Enumerate
For true positives that compiled, the reviewer ran FindBugs on the application
 with only our plugin enabled.
 
\end_layout

\begin_layout Enumerate
The reviewer manually inspected code specified in the FindBugs findings,
 starting with the line where the manager was set and tracing the code to
 where the security manager was initialized.
 
\begin_inset Note Comment
status open

\begin_layout Plain Layout
JSS: Did these lines differ substantially from the lines fround by grep?
 If so, why? If not, what was the point of the Findbugs step?
\end_layout

\end_inset

 
\end_layout

\begin_layout Enumerate
The reviewer manually inspected all of the lines mentioned in the grep results
 from step 1 to see how the application interacted with the sandbox.
 
\end_layout

\begin_layout Enumerate
For true positives that compiled and effected the security manager during
 the execution of the application, the application was executed, while being
 monitored by our dynamic analysis tool, using parameters and actions the
 reviewer determined in steps 4 and 5 effect the security manager.
 This step verified the conclusions from previous steps.
\begin_inset Note Comment
status open

\begin_layout Plain Layout
JSS: We need more detail here about how the application was 
\begin_inset Quotes eld
\end_inset

executed.
\begin_inset Quotes erd
\end_inset

 What exactly are the 
\begin_inset Quotes eld
\end_inset

parameters and actions determined in step 4 and 5?
\begin_inset Quotes erd
\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Finally, the reviewer summarized the operations the application performed
 on the security manager with an emphasis on points that support or reject
 each claim.
\end_layout

\begin_layout Standard
To ensure the reviewers understood the analysis steps and produced consistent
 results, we undertook a pilot study where each reviewer independently inspected
 the same 6 applications.
 This pilot study was invaluable in ensuring the inspections were performed
 consistently because one of the reviewers played no role in creating the
 tools and was therefore less informed about what to expect than our more
 experienced reviewer.
\end_layout

\begin_layout Subsection
The Security Manager Dataset
\begin_inset CommandInset label
LatexCommand label
name "sec:Applications-Studied"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide true
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Studied Applications from the Qualitas Corpus 
\begin_inset CommandInset label
LatexCommand label
name "Table: Qualitas Dataset"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="30" columns="3">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Application Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Version Studied
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(Apache) Ant
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.9.4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Java Project Builder
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(Apache) Batik
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SVG Image Toolkit
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
C-JDBC
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.0.2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Database Clustering Middleware
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Compiere
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Business Management Tools
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(Apache) Derby
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10.10.2.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Relational Database
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DrJava
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20130901-r5756
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Lightweight Development Environment
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Eclipse 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4.4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integrated Development Environment
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FreeMind
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.9.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Mind-Mapping Tool
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Galleon
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.5.5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Media Server
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(Apache) Hadoop
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.4.1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Distributed Computing Framework
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hibernate
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4.2.2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Object-Relational Mapping Tool
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HyperSQL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.3.2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SQL Relational Database
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
JBoss
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5.1.0.GA
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Application Middleware
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
JRuby
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.7.13
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ruby Interpreter
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(Apache) Lucene
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4.9.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Search Software
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(Apache) MyFaces
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.2.4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Server Software
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NekoHTML
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.9.21
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HTML Parser
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Netbeans
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integrated Development Environment
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OpenJMS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.7.7-beta
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Messaging Service
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Quartz 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.2.1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Job Scheduler
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
QuickServer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.0.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TCP Server Framework
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Spring Framework
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4.0.6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Web Development Library
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(Apache) Struts
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.3.16.3 GA
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Web Development Library
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(Apache) Tapestry
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5.3.7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Web Development Library
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(Apache) Tomcat
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8.0.9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Web Server
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Vuze
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5.3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
File Sharing Application
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Weka
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Machine Learning Algorithms
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(Apache) Xalan
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.7.1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
XML Transforming Library
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(Apache) Xerces
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.11.0.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
XML Parsing Library
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Qualitas Corpus is a curated collection of open source Java applications
 for use in reproducible software studies.
 Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "Table: Qualitas Dataset"

\end_inset

 contains a list of the 29 applications from QC version 20130901 that are
 used in this study.
 11 of the 29 applications are developed by the Apache Software Foundation
 (ASF), which may increase the homogeneity of their operations on the manager.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide true
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Studied Applications from GitHub 
\begin_inset CommandInset label
LatexCommand label
name "Table: Github Dataset"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="18" columns="3">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Application Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Git Commit Studied
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
AspectJ
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
d0b8c7a1bfbc2b2f92b22bcf63598ab2442781b6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Java Extension
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DemoPermissions
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
907dfc7610da3b0e1df76ca6b561cfbc4c60f158
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Spring Extension
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
driveddoc
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12993baabfd0dd0ca629e4bb8046097f290d1bb8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Application Connector
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FileManagerFtpHttpServer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
02f775b196ed6eae8e0cd2a7760193c315846498
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FTP Server
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gjman
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
79c668c24ca65c33dc9d48d2b8372cea112ad59d
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Development Toolkit
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IntelliJ IDEA Community Edition
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4ec1634e99ab375bb44ecf2b22a62ee4f0e39a4d
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integrated Development Environment
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Jmin
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9cec118eceb92b008f183d15cc9f991a98a88402
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Lightweight JDK
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MCVersion-Control
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
74b5e6d5c055a6fd204bac8ea3300626d70bd6cb
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Minecraft Version Changer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NGOMS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
35349cca1c518382d30f0267ef077a0a1bf52606
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Business Management Tool
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
oxygen-libcore
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
79a44848bcbb39474864610cab59d0fc170ae722
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Android Development Library
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
refact4j
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
fe0cdc5eb70c492993dfb55c39f5a90294383fa1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Generic and Functional Programming Framework
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Security-Manager
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
96651247e313dd4662e52a6f8949632fdee2793e
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Alternate Security Manager
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Spring-Modules
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
583b9c78f663720f6a4433c488614fd8f18f82d2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Spring Extension
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
System Rules
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
baea2a647da1ab4965c9d4ad8a232786ea80ce1a
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
JUnit Extension
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TimeLag
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
817075e61b8fbf02b65326e9ba4af7c118679b77
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sound Application
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TracEE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
c05cb9e8127a39017202e5bfa213d1879e6bdbc7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
JavaEE Support Tool
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Visor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
31e032ac14d0d423e1b585de7041c054ddf83b0e
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Closure Library
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide true
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Classification of Application Interactions with the Security Manager
\begin_inset CommandInset label
LatexCommand label
name "tab:Classification-of-Application"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="4">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Type of Interaction
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Qualitas Dataset
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GitHub Dataset
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Total
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
 Set a manager without later changing it
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
 Change a set security manager
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.
 Interact with manager in production code
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4.
 Interact with manager only in unit tests
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5.
 Do not interact (false positive)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
While QC provides a strong starting point for the construction of a dataset
 for this study, their inclusion criteria
\begin_inset Foot
status open

\begin_layout Plain Layout
http://qualitascorpus.com/docs/criteria.html
\end_layout

\end_inset

 lends to the inclusion of large, popular applications and frameworks.
 Given this point and the emphasis on ASF applications in our filtered set,
 we chose to diversify our dataset by turning to GitHub.
 Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "Table: Github Dataset"

\end_inset

 contains the 17 applications we included from GitHub.
\end_layout

\begin_layout Subsection
Results
\begin_inset CommandInset label
LatexCommand label
name "sec:Research-Questions-and"

\end_inset


\end_layout

\begin_layout Standard
We divided the security manager dataset into categories based on the operations
 each application performed on the security manager.
 The categories are summarized as follows: (1) applications that set a security
 manager that does not get changed later in the application's execution,
 (2) applications that change a set manager at some point in the program's
 execution, (3) applications that interact with a security manager in production
 code if one is set, (4) applications that only interact with the manager
 in unit tests, and (5) false positives that do not actually interact with
 the manager.
 Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Classification-of-Application"

\end_inset

 shows a breakdown of how each application in our dataset was categorized.
 The number for each category type in the table corresponds to the number
 in the previous list and throughout the rest of this section.
\end_layout

\begin_layout Standard
Type 1 applications set a security manager that is not changed during any
 execution of the application after it is set.
 In other words, for each possible execution path, there is at most one
 place the application sets a security manager.
 For example, Weka contains several main methods, most of which never set
 a security manager.
 However, the main method RemoteEngine.java sets a security manager, as shown
 in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Weka-snippet"

\end_inset

, unless the environment set one already (e.g.
 the user set one on the command line or Weka is running as an applet or
 JNLP application).
 One type 1 application, JTimeLag, didn't actually set a security manager,
 but did set the security manager to null as discussed in the section below
 titled 
\begin_inset Quotes eld
\end_inset

Reducing Web Application Development Complexity
\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,firstnumber=321,xrightmargin={0.1cm},numbersep={-10pt}"
inline false
status open

\begin_layout Plain Layout

    public static void main(String[] args) {     
\end_layout

\begin_layout Plain Layout

        if (System.getSecurityManager() == null) {       
\end_layout

\begin_layout Plain Layout

            System.setSecurityManager(new RMISecurityManager());   
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
The only location in the Weka code where interaction with a security manager
 occurs.
\begin_inset CommandInset label
LatexCommand label
name "fig:Weka-snippet"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Type 2 applications are of particular interest in validating the claims
 because they change a set security manager at some point later in the applicati
on's execution.
 In other words, they potentially falsify the weak, moderate, and ideal
 claims.
 Due to their effect on our claims, applications of this type are discussed
 in detail below.
\end_layout

\begin_layout Standard
Type 3 applications contain code that enables them to interact with a security
 manager if one is set, but never actually set a security manager themselves.
 These applications contain code that either (A) performs permission checks
 if the application is sandboxed or (B) uses privileged actions
\begin_inset Foot
status open

\begin_layout Plain Layout
http://docs.oracle.com/javase/7/docs/api/java/security/PrivilegedAction.html
\end_layout

\end_inset

 to ensure the application works if constrained.
 Similarly, type 4 applications contain code in unit test that ensure the
 application works correctly if sandboxed or that set a manager themselves,
 but these applications are not useful for validating our claims because
 their interactions with the manager are not in production code.
\end_layout

\begin_layout Standard
Type 5 primarily includes applications that have a class whose name contains
 the word 
\begin_inset Quotes eld
\end_inset

SecurityManager
\begin_inset Quotes erd
\end_inset

 but whose type does not extend the 
\family typewriter
SecurityManager
\family default
 class.
 These custom classes cannot be used to enforce a JRE-wide security policy,
 thus applications of this type are false positives.
 
\end_layout

\begin_layout Subsubsection
Evaluation of our Claims
\end_layout

\begin_layout Standard
We only require one counterexample to falsify a claim from section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Security-Manager-Study"

\end_inset

.
 This section summarizes how our claims held up against the results of this
 study.
\end_layout

\begin_layout Standard

\series bold
Weak claim
\series default
: 
\shape italic
Benign applications do not disable the security manager.
 
\emph on
The investigation determined that some benign applications disable the security
 manager, which turns off the sandbox.
 The applications that explicitly disabled the manager typically were not
 using the sandbox for security purposes; these cases are further explained
 in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Non-security-uses-of"

\end_inset

.
 However, some of these applications turned off the sandbox temporarily
 to update the imposed security policy.
\end_layout

\begin_layout Standard

\series bold
Moderate claim
\series default
: 
\emph on
Benign applications do not weaken the security manager.
 
\emph default
This claim was not definitively falsified if turning off the security manager
 is excluded from weakening.
 However, multiple applications provided methods for the user to dynamically
 change the security policy or the manager.
 These methods did not restrict their callers from weakening the manager
 during execution.
\end_layout

\begin_layout Standard

\series bold
Strong claim
\series default
: 
\shape italic
Benign applications do not change the security manager if a self-protecting
 security manager has been set
\shape default
.
 This claim was supported by both datasets.
 When false positives are excluded, 19 out of 24 true positives in the Qualitas
 dataset and 9 out of 12 true positives in the GitHub dataset did not change
 a set security manager or the policy it enforced during execution.
\end_layout

\begin_layout Standard

\series bold
Ideal claim
\series default
:
\shape italic
 Benign applications do not change a set security manager.
 
\emph on
This claim was shown to be false: multiple applications changed the security
 manager, both for security and non-security reasons.
\end_layout

\begin_layout Subsubsection
Non-security uses of the Sandbox
\begin_inset CommandInset label
LatexCommand label
name "sub:Non-security-uses-of"

\end_inset


\end_layout

\begin_layout Standard
We found several cases where applications use the sandbox in ways that were
 not intended to increase the security of the system.
 These applications tended to use the sandbox to enforce architectural constrain
ts when interacting with other applications or forcibly disable the sandbox
 to reduce development complexity.
\end_layout

\begin_layout Subsubsection*
Enforcing Architectural Constraints 
\end_layout

\begin_layout Standard
It is common for Java applications to call 
\family typewriter
System.exit()
\family default
 when a non-recoverable error condition occurs.
 This error handling strategy causes problems when an application uses another
 application that implements this strategy as a library.
 When the library application executes 
\family typewriter
System.exit()
\family default
, the calling application is closed as well because both applications are
 running in the same JVM.
 In many cases, this is not the intended outcome.
 
\end_layout

\begin_layout Standard
To prevent this outcome without modifying the library application, the calling
 application needs to enforce the architectural constraint that libraries
 can not terminate the JVM.
 In practice, applications enforce this architectural constraint by setting
 a security manager that prevents 
\family typewriter
System.exit()
\family default
 calls.
 If a manager has already been set, applications tend to save a copy of
 the current manager before replacing it with one that prevents termination
 of the JVM, but defer to the saved version for all security decisions that
 do not have to do with enforcing this particular constraint.
 The original security manager is often restored when the library application
 is finished executing.
\end_layout

\begin_layout Standard
This case appears in Eclipse, which uses Ant as a library.
 Ant kills the JVM when an unrecoverable error condition occurs to terminate
 execution of the build script it is running.
 However, Eclipse wants to continue executing and to report an error to
 the user when Ant runs into a error condition.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Eclipse-snippet"

\end_inset

 shows how Eclipse sets a security manager to enforce this constraint right
 before Ant is executed.
 After Ant closes and any error conditions are handled, the original manager
 is restored.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,firstnumber=691,xrightmargin={0.1cm},numbersep={-10pt}"
inline false
status open

\begin_layout Plain Layout

    System.setSecurityManager(new AntSecurityManager(originalSM, Thread.currentThr
ead()));
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,firstnumber=703,xrightmargin={0.1cm},numbersep={-10pt}"
inline false
status open

\begin_layout Plain Layout

    getCurrentProject().executeTargets(targets); 
\backslash

\backslash
Note: Ant is executed on this line
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,firstnumber=721,xrightmargin={0.1cm},numbersep={-10pt}"
inline false
status open

\begin_layout Plain Layout

    finally {
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,firstnumber=725,xrightmargin={0.1cm},numbersep={-10pt}"
inline false
status open

\begin_layout Plain Layout

        if (System.getSecurityManager() instanceof AntSecurityManager) {
 
\end_layout

\begin_layout Plain Layout

            System.setSecurityManager(originalSM); 
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
This code snippet from Eclipse shows how it uses the manager to prevent
 Ant from terminating the JVM when an unrecoverable error occurs.
\begin_inset CommandInset label
LatexCommand label
name "fig:Eclipse-snippet"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
GJMan also enforces this architectural constraint, as shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GJMan-snippet"

\end_inset

.
 The code references a blog post
\begin_inset Foot
status open

\begin_layout Plain Layout
http://www.jroller.com/ethdsy/entry/disabling_system_exit
\end_layout

\end_inset

 that appears to be the origin of this solution.
 The code contains an 
\family typewriter
apply
\family default
 method that creates and sets a security manager to prevent termination
 of the JVM and an 
\family typewriter
unapply
\family default
 method to disable the sandbox.
 GJMan is a library and does not use these methods itself, but applications
 that use it could.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,firstnumber=703,xrightmargin={0.1cm},numbersep={-10pt}"
inline false
status open

\begin_layout Plain Layout

    public static void apply() { 
\end_layout

\begin_layout Plain Layout

        final SecurityManager securityManager = new SecurityManager() {
 
\end_layout

\begin_layout Plain Layout

            public void checkPermission(Permission permission) { 
\end_layout

\begin_layout Plain Layout

                if(permission.getName().startsWith("exitVM")) { 
\end_layout

\begin_layout Plain Layout

                    throw new Exception(); 
\end_layout

\begin_layout Plain Layout

                } 
\end_layout

\begin_layout Plain Layout

            } 
\end_layout

\begin_layout Plain Layout

        }; 
\end_layout

\begin_layout Plain Layout

       System.setSecurityManager(securityManager); 
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    public static void unapply() { 
\end_layout

\begin_layout Plain Layout

        System.setSecurityManager(null); 
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
The methods in GJMan that enable and disable the sandbox to prevent termination
 of the JVM when select code is running
\begin_inset CommandInset label
LatexCommand label
name "fig:GJMan-snippet"

\end_inset

.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In total, we found 3 applications that use a variation of this technique:
 Eclipse, GJMan, and AspectJ.
 While this technique does enforce the desired constraint, and is probably
 the best solution available in Java at the moment, it is likely to cause
 problems when applications are also using the sandbox for security purposes.
 The technique requires the application to dynamically change the security
 manager, which requires that the manager itself be defenseless or that
 the application is very carefully written to prevent malicious code from
 changing the manager or the policy it enforces.
 Defenseless security managers are not capable of reliably enforcing a serious
 security policy.
\end_layout

\begin_layout Subsubsection*
Reducing Web Application Development Complexity
\end_layout

\begin_layout Standard
Java automatically sandboxes applets and applications launched via Java
 Web Start
\begin_inset Foot
status open

\begin_layout Plain Layout
http://www.oracle.com/technetwork/java/javase/javawebstart/index.html
\end_layout

\end_inset

.
 These applications typically need to be written to comply with the default
 security policy that Java imposes on applications from remote sources.
 In cases where this is not possible, Java allows applications to run without
 a sandbox after obtaining user approval.
 Some developers cause their applications to throw a 
\family typewriter
SecurityException
\family default
 when the sandbox is enabled to force users to turn the sandbox off if they
 want to use the application.
 We found two applications that were using this method: Eclipse and Timelag.
 
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Eclipse-jws-snippet"

\end_inset

 shows a snippet from Eclipse's WebStartMain.java file that performs this
 operation.
 The comment shows that Eclipse attempts to disable the sandbox to avoid
 the permission issues caused by the default sandbox for web start.
 Timelag performs the same operation in the file JTimelag.java but does not
 contain any comments, thus we can only infer the motivation behind turning
 off the sandbox.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,firstnumber=22,xrightmargin={0.1cm},numbersep={-10pt}"
inline false
status open

\begin_layout Plain Layout

    /** 
\end_layout

\begin_layout Plain Layout

    * The launcher to start eclipse using webstart.
 To use this launcher, the client 
\end_layout

\begin_layout Plain Layout

    * must accept to give all security permissions.
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,firstnumber=55,escapechar={\%},xrightmargin={0.1cm},numbersep={-10pt}"
inline false
status open

\begin_layout Plain Layout

    public static void main(String[] args) { 
\end_layout

\begin_layout Plain Layout

    System.setSecurityManager(null); %
\backslash
textbf{//TODO Hack so that when the classloader loading the fwk is created
 we don't have funny permissions.
 This should be revisited.
 }
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
A snippet from Eclipse that disables the sandbox when Java Web Start is
 used to run the IDE.
\begin_inset CommandInset label
LatexCommand label
name "fig:Eclipse-jws-snippet"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Changing the Security Manager for Security Purposes
\end_layout

\begin_layout Standard
We found applications that set a security manager then either explicitly
 change it at some later point or allow the user to change it.
 Batik, Eclipse, and Spring-modules provide methods that allow the user
 to set and change an existing manager, and Ant, Freemind, and Netbeans
 explicitly set then change the manager.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,firstnumber=156,xrightmargin={0.1cm},numbersep={-10pt}"
inline false
status open

\begin_layout Plain Layout

    public void enforceSecurity(boolean enforce){ 
\end_layout

\begin_layout Plain Layout

    SecurityManager sm = System.getSecurityManager();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    if (sm != null && sm != lastSecurityManagerInstalled){
\end_layout

\begin_layout Plain Layout

        ...
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,firstnumber=163,xrightmargin={0.1cm},numbersep={-10pt}"
inline false
status open

\begin_layout Plain Layout

        throw new SecurityException
\end_layout

\begin_layout Plain Layout

            (Messages.getString(EXCEPTION_ALIEN_SECURITY_MANAGER));   
\end_layout

\begin_layout Plain Layout

    }                  
\end_layout

\begin_layout Plain Layout

    if (enforce) { 
\end_layout

\begin_layout Plain Layout

        ...
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize},breaklines=true,firstnumber=173,xrightmargin={0.1cm},numbersep={-10pt}"
inline false
status open

\begin_layout Plain Layout

        installSecurityManager();         
\end_layout

\begin_layout Plain Layout

    } else {             
\end_layout

\begin_layout Plain Layout

        if (sm != null) {                 
\end_layout

\begin_layout Plain Layout

           System.setSecurityManager(null);
\end_layout

\begin_layout Plain Layout

           lastSecurityManagerInstalled = null;             
\end_layout

\begin_layout Plain Layout

           ...
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Batik-snippet"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Batik-snippet"

\end_inset

 shows an interesting case from Batik copied from ApplicationSecurityEnforcer.jav
a.
 This method was designed to allow users to optionally constrain the execution
 of an an application that uses the Batik library.
 The method takes one parameter that acts as a switch to turn the sandbox
 on or off.
 Batik throws an exception if the user wants to toggle the sandbox while
 a non-Batik manager is set.
 The download page on the Batik website shows several examples of how to
 use this method.
 Two of the examples show ways to set a security manager at start up: the
 squiggle browser demo and the rasterizer demo.
 While the squiggle browser demo sets a manager and never changes it, the
 rasterizer demo can be set to call 
\family typewriter
enforceSecurity
\family default
 with a true argument the first time and a false argument the second time,
 which enables then disables the sandbox.
 While this was an interesting occurrence, there seems to be no valid reason
 to disable the sandbox in this case other than to show off the capability
 to do so.
\end_layout

\begin_layout Standard
As mentioned earlier, Ant, Freemind, and Netbeans explicitly set and then
 change the current manager during runtime.
 Ant allows the users to create build scripts that execute Java applications
 during a build under a user specified set of permissions.
 To provide this capability, Ant sets the security manager before executing
 the Java application and then removes the manager after the application
 has finished executing.
 Netbeans performs a similar operation.
 In both of these cases a defenseless security manager is required, but
 a better approach would use a custom class loader to load the untrusted
 classes into a constrained protection domain.
\end_layout

\begin_layout Standard
Freemind 0.9.0 tried to solve a similar problem and ended up illustrating
 the dangers present when using a defenseless manager.
 Freemind is a mind mapping tool that allows users to execute Groovy scripts
 embedded in a map they have open.
 Freemind turns on the sandbox before executing groovy scripts to prevent
 scripts from executing malicious operations and turns the sandbox off immediate
ly after the groovy scripts finish.
 The policy Freemind enforces prevents Groovy scripts from creating network
 sockets, accessing the filesystem, and executing programs on the machine.
 In the version we analyzed, these goals were not achieved.
 By enforcing this narrow policy and allowing the manager to be set and
 unset at will, Freemind accidentally grants scripts permissions that enable
 them to disable the sandbox.
 We crafted a mind map to exploit this vulnerability to execute arbitrary
 code and reported the issue to the Freemind developers.
 We included advice about how to achieve the desired outcome securely with
 our report.
\end_layout

\begin_layout Standard
WildFlySecurityManager is a custom security manager that does not cleanly
 fit into our categories.
 WildFlySecurityManager allows permission checks to be disabled for classes
 granted a custom permission called 
\family typewriter
DO_UNCHECKED_PERMISSION
\family default
.
 This strategy is equivalent to running a privileged action with 
\family typewriter
doPrivileged
\family default
.
\end_layout

\begin_layout Section
Privilege Escalation in the JVM
\begin_inset CommandInset label
LatexCommand label
name "sec:Privilege-Escalation-in"

\end_inset


\end_layout

\begin_layout Standard
Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Java-Exploits"

\end_inset

 provided background on exploits that attack privilege escalation vulnerabilitie
s in Java code.
 Essentially, these exploits either (1) exploit a privileged class loader
 to load a payload class with all permissions or (2) attack a confused deputy
 they have direct access to.
 The latter is quite rare and typically the fault of a vulnerable third-party
 library because providing all classes with direct access to a privileged
 class is a violation of the 
\shape italic
access control
\shape default
 principle that is part of the Java development culture
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
https://blogs.oracle.com/jrose/entry/the_isthmus_in_the_vm
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
For the most part, benign applications have no reason to directly access
 privileged classes.
 The majority of the JRE's privileged classes are internal implementations
 of features that Java provides applications less-privileged access to.
 For example, many reflection operations are implemented in the 
\family typewriter
sun.reflect
\family default
 package, which has all permissions, but Java applications are supposed
 to use classes in the 
\family typewriter
java.lang.reflect
\family default
 package to use reflection and do not have direct access to the sun classes
 given default JRE configurations.
 Classes in the java package do not perform privileged operations themselves,
 but do have permission to access classes in the sun package.
\end_layout

\begin_layout Standard
To load a privileged class, a privileged class loader must be used, thus
 a class should typically not have direct access to a class that has a vulnerabi
lity that can be exploited to bypass the sandbox unless the former had its
 privileges reduced at some point in the application's execution.
 This is implicit in the Java security model: if any class could load more
 privileged classes and directly cause them to execute operations, the sandbox
 in its current form would serve little purpose.
 We can leverage these distinctions to further fortify the sandbox.
\end_layout

\begin_layout Section
Rules for Fortifying the Sandbox 
\begin_inset CommandInset label
LatexCommand label
name "sec:Rules-for-Fortifying"

\end_inset


\end_layout

\begin_layout Standard
Given the results of our investigation in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Security-Manager-Study"

\end_inset

 and the discussion in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Privilege-Escalation-in"

\end_inset

, we can fortify the sandbox for applications that set 
\emph on
a self-protecting
\emph default
 security manager.
 In this section we define two rules to stop exploits from disabling the
 manager that are backwards compatible with benign applications: the Privilege
 Escalation rule and the Security Manager rule.
 
\end_layout

\begin_layout Subsection
Privilege Escalation Rule
\end_layout

\begin_layout Standard
The 
\shape italic
privilege escalation rule
\shape default
 ensures that a class may not directly load a more privileged class if a
 self-protecting security manager is set for the application.
 This rule is violated when the protection domain of a loaded class implies
 a permission that in not implied in the protection domain that loaded it.
 Many exploits break this rule to elevate the privileges of their payload
 class.
\end_layout

\begin_layout Standard
If all classes in the Java Virtual Machine (JVM) instance were loaded at
 the start of an application, this rule would never be broken.
 However, the JVM loads certain classes on demand, and some of the JVM classes
 have the full privileges.
 The rule makes exceptions for classes in packages that are listed in the
 
\family typewriter
package.access
\family default
 property of 
\family typewriter
java.security.Security 
\family default
as these classes are intended to be loaded when accessed by a trusted proxy
 class.
 
\end_layout

\begin_layout Subsection
Security Manager Rule
\end_layout

\begin_layout Standard
The 
\shape italic
Security Manager rule
\shape default
 states that the manager cannot be changed if a 
\emph on
self-protecting
\emph default
 security manager has been set by the application.
 This rule is violated when code causes a change in the sandbox's configuration,
 which many exploits try to ensure will happen.
\end_layout

\begin_layout Section
Mitigations 
\begin_inset CommandInset label
LatexCommand label
name "sec:Mitigations"

\end_inset


\end_layout

\begin_layout Standard
In section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Security-Manager-Study"

\end_inset

 we discussed (1) three claims that would lead to Java exploit mitigations
 if validated and (2) how we went about validating them.
 In section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Research-Questions-and"

\end_inset

 we discussed additional research questions we answered while successfully
 validating the strong claim and the overall results of our empirical analysis
 of the open source Java landscape.
 The results included two backwards-compatible rules that can be enforced
 to stop current exploits.
 In this section we discuss the implementation and evaluation of a tool
 that implements the privilege escalation and SecurityManager rules.
 We evaluated this tool in collaboration with a large aerospace company
 that is currently working on deploying the tool to workstations that belong
 to employees that are often the subject of targeted attacks.
 
\end_layout

\begin_layout Subsection
Implementation Using JVMTI
\end_layout

\begin_layout Standard
Prior work has made an effort to prevent exploits in the native libraries
 used by language runtimes such as Java's 
\begin_inset CommandInset citation
LatexCommand cite
key "cappos_retaining_2010,li_quarantine:_2011,siefers_robusta:_2010,sun_jvm-portable_2012"

\end_inset

, and the machine learning community has put some effort into detecting
 exploits delivered via drive-by-downloads using Java applets and similar
 technologies 
\begin_inset CommandInset citation
LatexCommand cite
key "cova_detection_2010,ford_analyzing_2009,helmer_anomalous_2001,schlumberger_jarhead_2012"

\end_inset

.
 We implemented a tool in JVMTI to pro-actively stop exploits written directly
 in the Java programming language to exploit vulnerable Java code
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Our tool, Java Sandbox Fortifier, is open source and hosted on GitHub at
 https://github.com/SecurityManagerCodeBase/JavaSandboxFortifier.
 REVIEWERS: INSPECTING THIS GITHUB PROJECT MAY REVEAL THE AUTHORS' IDENTITIES.
\end_layout

\end_inset

.
 In particular, our tool focuses on fortifying the Java sandbox by reducing
 the methods that the sandbox can be successfully bypassed in an attack.
\end_layout

\begin_layout Standard
JVMTI is a native interface used to access JVM operations that are intended
 to be used to create analysis tools such as profilers, debuggers, monitors,
 and thread analyzers.
 Tools that use JVMTI are called agents and are attached to a running Java
 application at some configuration specific point in the application's lifecycle.
 The interface allows an agent to set capabilities that enable the tool
 to intercept events such as class and thread creation, field access and
 modifications, breakpoints, and much more.
 After acquiring the necessary capabilities, a JVMTI agent registers callbacks
 for the events they want to receive.
 JVMTI provides a rich API, hooks for instrumenting the bytecode of loaded
 classes, and access to the JNI, all of which can be used to perform nearly
 any operation on classes, threads, etc.
 that a tool may want to perform at the time when an event occurs.
 Our agent must intercept three events to enforce the privilege escalation
 and SecurityManager rules: 
\family typewriter
ClassPrepare
\family default
, 
\family typewriter
FieldAccess
\family default
, and 
\family typewriter
FieldModification
\family default
.
 Enforcement of these rules is discussed in detail in subsections below.
\end_layout

\begin_layout Standard
Our agent was written in C++.
 524 lines of code were required to enforce the privilege escalation rule
 while 377 lines of code were required for the SecurityManager rule when
 counted using the Linux tool 
\family typewriter
wc
\family default
.
 This code constitutes the attack surface for our tool because a malicious
 class could potentially craft information such as class, field, or method
 names to exploit an issue in the rule enforcement code when the information
 is passed to the appropriate callback.
 The risk here is greatly reduced both by the fact that there is little
 attack surface to inspect and due to the previously cited work that can
 be applied to our tool.
 For example, the software-based fault isolation subset of Robusta 
\begin_inset CommandInset citation
LatexCommand cite
key "siefers_robusta:_2010"

\end_inset

 can be applied to our tool to isolate the effects of an exploit.
 Using a security kernel for Java similar to Cappo's for Python 
\begin_inset CommandInset citation
LatexCommand cite
key "cappos_retaining_2010"

\end_inset

, our tool could be isolated to its own security layer with access only
 to the information it gets from JVMTI.
 We did not attempt to apply these solutions because the required tools
 and code are not publicly available, which would make it difficult, if
 not impossible, for most people to adopt our tool.
\end_layout

\begin_layout Standard
Our agent may be configured to run in enforce or monitor mode.
 In enforce mode a violation of either rule causes the agent to log the
 offending behavior and terminate the JVM to which the agent is attached.
 In monitor mode the agent logs the offending behavior but leaves the JVM's
 execution of the application untouched.
 In either case, a popup is shown to the user to let them know why their
 Java application was terminated when the agent has been configured to show
 popups (this was made configurable to prevent popups on headless servers).
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:A-popup-from"

\end_inset

 shows an example of a popup displayed after an exploit was caught breaking
 the privilege escalation rule.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename rule_violation_popup.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
A popup from our agent after it caught an exploit breaking the privilege
 escalation rule.
\begin_inset CommandInset label
LatexCommand label
name "fig:A-popup-from"

\end_inset


\end_layout

\end_inset


\begin_inset Note Comment
status open

\begin_layout Plain Layout
JSS: Fix this screenshot so the left side is not cut off and there is not
 a black artifact in the top left corner.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Enforcing the Privilege Escalation Rule
\end_layout

\begin_layout Standard
The privilege escalation rule is enforced by ensuring that, after a self-protect
ing security manager has been set, classes do not load or cause the loading
 of more privileged classes unless the privileged class is in a restricted-acces
s package.
 
\shape italic
Restricted-access packages
\shape default
 are packages that are public but not intended to be directly used by typical
 Java applications; they are meant for internal JRE use only.
 These packages are listed in the 
\family typewriter
package.access
\family default
 property in the 
\family typewriter
java.security.Security
\family default
 class.
 There are two ways to directly access packages listed in this property:
 (1) exploit a vulnerability in a class that can access them or (2) allow
 access via the 
\family typewriter
accessClassInPackage
\family default
 permission.
 The latter option would ensure the security manager is defenseless, thus
 the application would not be protected by the agent (see table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:defenseless-permissions"

\end_inset

).
\end_layout

\begin_layout Standard
We must allow a class to indirectly load a class in a restricted-access
 package because classes in these packages are often used by JRE classes
 that an application is allowed to use.
 For example, many of the classes in the 
\family typewriter
java.lang.reflect
\family default
 package are backed by classes in the 
\family typewriter
sun
\family default
 package, the latter of which is a restricted-access package that contains
 the internal implementations for many Java features.
\end_layout

\begin_layout Standard
To enforce this rule, our agent registers for the 
\family typewriter
ClassPrepare
\family default
 event, which allows it to inspect a class after it is fully loaded but
 just before any of its code is executed.
 Assuming the loaded class is not in a restricted-access package, the agent
 inspects the stack frame to determine which class caused the new class
 to be loaded.
 The agent must get the protection domains for both classes, but this can
 not be done by calling the necessary Java methods
\begin_inset Foot
status collapsed

\begin_layout Plain Layout

\family typewriter
Class.getProtectionDomain()
\end_layout

\end_inset

 via the JNI from the agent because the Java calls will be performed with
 the same permissions as the application the agent is attached to.
 Most applications where this operation is relevant (i.e.
 those that have a self-protecting manager) do not have the necessary permission
 to get a protection domain
\begin_inset Foot
status collapsed

\begin_layout Plain Layout

\family typewriter
RuntimePermission(
\begin_inset Quotes eld
\end_inset

getProtectionDomain
\begin_inset Quotes erd
\end_inset

)
\end_layout

\end_inset

 because it would allow a malicious class to probe the policy to determine
 which, if any, malicious operations it can perform.
 Due to the fact that JVMTI agents are loaded into the JRE as a shared-library,
 we instead load libjvm.so (jvm.dll on Microsoft Windows) to call JVM functions
 without security checks.
 Our agent leverages this ability to call the 
\family typewriter
GetProtectionDomain
\family default
 JVM function to get the protection domains.
 
\end_layout

\begin_layout Standard
With both protection domains, the implementation of the agent as of the
 time of this writing simply checks to see if the loaded class's protection
 domain has 
\family typewriter
AllPermissions
\family default
 while the class that caused the loading doesn't.
 If the latter is true, the privilege escalation rule has been violated.
 This specific check was used because it is fast, simple, and all privileged
 classes allow 
\family typewriter
AllPermissions
\family default
 under known circumstances.
 It would be easy to update this check to instead ensure that every permission
 in the loaded class's protection domain is also in the other protection
 domain to handle cases we are currently not aware of.
\end_layout

\begin_layout Subsubsection*
Enforcing the SecurityManager Rule
\end_layout

\begin_layout Standard
The SecurityManager rule is enforced by monitoring every read from and write
 to the 
\family typewriter
security
\family default
 field of the 
\family typewriter
System
\family default
 class; this field stores the security manager that is used by protected
 code.
 The agent implements the read and write monitors by respectively registering
 
\family typewriter
FieldAccess and FieldModification
\family default
 events for the field.
 Typically the field, which is private and static, is accessed via 
\family typewriter
System.getSecurityManager()
\family default
 and modified using 
\family typewriter
System.setSecurityManager()
\family default
, but we must monitor the field instead of instrumenting these methods to
 detect type confusion attacks, as discussed later in this section.
 
\end_layout

\begin_layout Standard
The agent stores a shadow copy of the application's most recent security
 manager to have a trusted copy of the manager that can be used to check
 for rule violations.
 In a typical deployment, the agent is loaded by a JVM before the hosted
 Java application's code has begun executing.
 Even in the typical case, when a security manager is set on the command
 line that runs the application, the initial security manager would not
 be caught by the modification event because the write happens before the
 agent is loaded.
 To solve this problem, the shadow copy is first initialized by calling
 
\family typewriter
System.getSecurityManager()
\family default
 when the agent is loaded by a JVM.
 After this point, the shadow copy is only updated by the modification event,
 which receives the new manager as a parameter from JVMTI whenever the event
 is triggered.
\end_layout

\begin_layout Standard
Modification events are used to detect any change to a self-protecting security
 manager.
 When the field is written, the agent checks the shadow copy of the manager.
 Assuming the shadow copy is 
\family typewriter
null
\family default
, the agent knows the manager is being set for the first time and checks
 to see if the new manager is self-protecting.
 If the manager is self-protecting the agent simply updates the shadow copy,
 otherwise the agent will also drop into monitor mode when enforce mode
 is configured because the rules cannot be enforced for applications that
 use defenseless managers.
 We cannot enforce the rules in the presence of a defenseless security manager
 because enforcement may break the function of benign applications that
 utilize a defenseless manager, as in several examples in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Research-Questions-and"

\end_inset

.
 In any case, future modifications are logged as a violation of the rule
 and trigger the operation relevant to the agents current mode as discussed
 above.
\end_layout

\begin_layout Standard
Access events are used to detect type confusion attacks against the manager.
 The modification event we register will not be triggered when the manager
 is changed due to a type confusion attack.
 When a type confusion attack is used to masquerade a malicious class as
 the 
\family typewriter
System
\family default
 class, the malicious copy will have different internal JVM identifiers
 for the field that stores the manager, the class itself, and its methods
 even though writing to the field in one version of the class updates the
 same field in the other version.
 The modification and access events are registered for specific field and
 class identifiers, thus the events are not triggered for operations on
 the malicious version.
 We leverage the mismatch this causes between the set security manager and
 our shadow copy in the access event by checking to see if the manager that
 was just read has the same internal JVM reference as our shadow copy.
 When the two references do not match, the manager has been changed as the
 result of a malicious class masquerading as the 
\family typewriter
System
\family default
 class.
 Type confusion attacks may also be used to masquerade a class as a privileged
 class loader to elevate the privileges of a payload class that disables
 the manager, but this scenario is detected by the modification event.
\end_layout

\begin_layout Subsection
Overhead
\end_layout

\begin_layout Standard
Overhead is an important metric of security tools.
 Specifically for these rule implementations, the important metrics which
 need to be investigated are performance overhead, memory overhead, and
 user overhead.
 
\end_layout

\begin_layout Standard
Performance overhead was tested using version 9.12 of the Dacapo Benchmark
 
\begin_inset CommandInset citation
LatexCommand cite
key "DaCapo:paper"

\end_inset

, a standard set of Java applications with non-trivial memory loads.
 The applications in the benchmark are Avrora, Batik, Eclipse, Fop, H2,
 Jython, Luindex, Lusearch, PMD, Sunflow, Tomcat, TradeBeans, TradeSoap,
 and Xalan.
 Performance was measured by running the provided section of the application
 5 times and the the mean of the runtimes was computed.
 All performance tests were ran on an 8 Intel i7 core HP Envy M4 laptop
 with 8 GBs of RAM.
\end_layout

\begin_layout Standard
Since the Dacapo Benchmarks did not set a security manager during any of
 the benchmark runs, the the tool had to be altered to work in all cases,
 instead of when a security manager is set.
 (add something about how the altered version produces the maximum overhead
 possible) This created problems for Eclipse, Tradebeans, and Tradesoap
 where the altered Privilege Escalation Rule implementation prevented the
 benchmark from running.
 Catching the applications with the altered Privilege Escalation Rule implementa
tion is not a problem because the non-altered Privilege Escalation Rule
 implementation can successful execute the Eclipse, Tradebeans, and Tradesoap
 benchmarks.
 
\end_layout

\begin_layout Standard
\begin_inset Float table
wide true
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Performance Test Results.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="14" columns="6">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="2.5cm">
<column alignment="center" valignment="top" width="2.5cm">
<column alignment="center" valignment="top" width="2.5cm">
<column alignment="center" valignment="top" width="2.5cm">
<column alignment="center" valignment="top" width="2.5cm">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Runtime (s) / Runtime relative to no tool (%)
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
 No Tool 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.
 Privilege Escalation 
\end_layout

\begin_layout Plain Layout
Rule
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.
 Both Rules 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4.
 No Tool and Interpreted 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5.
 Both Rules and Interpreted
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Avrora
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6.80 / 100
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6.86 / 100.9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
109.89 / 1615.28
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
57.04 / 838.49
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
103.36 / 1519.23
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Batik
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.70 / 100
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.90 / 70.4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20.28 / 749.9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
21.26 / 786.44
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20022.8 / 1472.42
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fop
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.379 / 100
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.87 / 135.3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
21.36 / 1548.06
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
17.31 / 1254.25
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20.32 / 1472.42
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
H2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7.20 / 100
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6.42 / 89.3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
420.29 / 5840.5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
258.07 / 3586.2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
408.69 / 5679.3
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Jython
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6.00 /100
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.94 / 65.9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
309.45 / 5178.54
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
248.258 / 4154.53
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
301.29 / 5042.05
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Luindex
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.28 / 100
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
942 / 73.84
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
48.35 / 3790.1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
43.49 / 3408.6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
45.55 / 3570.3
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Lusearch
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.39 / 100
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.06 / 76.40
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
50.24 / 3608.61
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
27.32 / 1962.5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
37.75 / 2711.7
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pmd
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.01 / 100
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.60 / 86.45
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
43.23 / 1437.78
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
21.98 / 731.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
28.15 / 936.1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sunflow
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.04 / 100
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.02 / 97.78
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
249.20 / 12163.6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
114.8 / 5603.9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
174.32 / 8508.8
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Tomcat
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.16 / 100
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.56 / 118.20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
34.49 / 1593.31
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20.90 / 965.34
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
23.54 / 1087.4
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Xalan
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.54 / 100
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.50 / 97.98
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
58.58 / 3816.50
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
29.30 / 1908.53
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
41.09 / 2676.93
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Average
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
92.12
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3758.40
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2251.69
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3085.88
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The results of the performance tests indicate that the Privilege Escalation
 Rule implementation caused minimal slowdown, and actually ran 8% faster
 than the benchmarks without a tool set.
 This increase is believed to be due to the fluctuations between runs and
 not due to any effects of the tool.
 The Security Manager Rule implementation, on the other hand, produced a
 significant slowdown, causing applications to run over 37 times slower
 on average.
 We investigated the cause of this slowdown and found two causes 1) checking
 for variable changes in JVMTI cause the program to run in interpreted mode
 and 2) JVMTI checks if the watched object reference was changed at every
 object reference.
 To determine how much of a speed increase could be gained by implementing
 the Security Manager Rule using a tool that does not require the application
 to run in interpreted mode, we measured how long the benchmarks took to
 complete in interpreted mode.
 The tests determined that the interpreted applications runtime increased
 by 22.5 times the original Just-In-Time Compiled runtime.
 While this is not the full portion of the slowdown for the Security Manager
 Rule implementation, running the application in interpreted mode is over
 60% of the slowdown.
 It is likely that the Security Manager implementation could also be improved
 by avoiding the overhead associated with checking for a security manager
 change in every object change.
 Finally, to confirm that the Security Manager Rule implementation was running
 in interpreted mode, the benchmark was timed with both tools in interpreted
 mode.
 While running the tool in interpreted mode was faster than running the
 tool without interpreted mode explicitly set, the author believe this result
 is either due to the variations of individual performance tests or that
 explicitly setting interpreted mode causes the mode switch to occur faster.
\end_layout

\begin_layout Standard
Future work could address the slowdown associated with the Security Manager
 rule implementation.
 These approaches could focus on the underlying reasons for the slowdown
 in the tool or re-implement the rule in a different way.
 
\begin_inset Note Comment
status open

\begin_layout Plain Layout
Fill this in later.
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
The authors hypotheses that the Security Manager Rule can be implemented
 with significantly less performance overhead if the rule is built into
 the JVM.
 The problem with implementing the rule by changing the JVM is that any
 unofficial changes would not be supported by the JVM developers, thus increases
 the difficulty to update the JVM to the latest released version.
 Thus, the rule would likely need to be implemented by the JVM maintainers
 to create a significantly faster version without losing the ability to
 update the JVM.
\end_layout

\begin_layout Standard
The memory overhead of the tool is likely very small relative to a large
 program.
 The tool only copies a couple of memory references, such as the loaded
 classes permission set, when performing both types of security checks.
 The copies are also deallocated after each check.
 A few objects, such as the system's security manager and references to
 repeatedly called methods in the JVM are saved between security checks.
 All objects created by the tool likely have a minimal memory footprint
 compared to the complete application, although the memory footprint was
 not explicitly measured in this study.
\end_layout

\begin_layout Standard
The user overhead of the tool is also minimal.
 To use the tool in the default configuration, a user either has to compile
 the tool using the provided makefile or download a binary version of the
 tool for their system.
 Once the tool is compiled, the tool can be set to fortify all Java applications
 on a standard Oracle JVM in two steps: 1) set the JAVA_TOOL_OPTIONS environment
 variable to point to the library file for the tool with the command 
\emph on
-agentpath=path_to_library
\emph default
 2) set the JSF_HOME environment variable to point to the directory with
 the appropriately named configuration file.
 JAVA_TOOL_OPTIONS is the environment variable provided by Oracle that allows
 executing a JVMTI agent for all instances of the JVM.
 The JSF_HOME environment variable is an environment variable only applicable
 to the tool.
 These two options can be set for the whole system or only a terminal using
 a short script.
 
\end_layout

\begin_layout Standard
The default configuration of the tool is the Privilege Escalation Rule implement
ation is turned on while the Security Manager Rule is turned off.
 The default mode of the tool is enforce mode, which was described in the
 JVMTI Implementation section.
 The other default configuration option is to output the security logs to
 a file named jsf.log in the current directory of the running application.
 All of these options can be changed in the configuration file.
 The default configuration of only the Privilege Escalation rule implementation
 provides the security benefit of the Privilege Escalation Rule without
 incurring the performance hit of the Security Manage Rule implementation,
 which is discussed in the next section.
 The Security Manager Rule implementation can be turned on in the configuration
 file, adding an extra check while incurring the performance cost of the
 Security Manager Rule implementation.
 The tool can be switched from enforce mode to monitor mode if only the
 log files are desired.
 The resulting logs can also be set to a single file by specifying the file's
 path in the configuration file.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Discuss the different deployment options to work around the slowdown
\end_layout

\begin_layout Plain Layout
Explicitly mention the default configuration here! (e.g.
 SM rule off)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Plain Layout
ZC: At the moment, I'm not happy enough with the performance results to
 write this section.
 I'll come back to it when I have better numbers.
 
\end_layout

\begin_layout Plain Layout
Update - I realize this section is crap but it doesn't seem like I'm going
 to get any response on my questions until I write something here so here
 my best effort.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Effectiveness at Fortifying the Sandbox 
\end_layout

\begin_layout Standard
We performed an experiment to evaluate how effective our agent is at blocking
 exploits that disable the sandbox.
 In our experiment, we ran Java 7 exploits for the browser from Metasploit
 4.10.0
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
http://www.metasploit.com/
\end_layout

\end_inset

 on 64-bit Windows 7 against the initial release of version 7 of the JRE.
 This version of Metasploit contains twelve applets that are intended to
 exploit JRE 7 or earlier, but two did not successfully run due to Java
 exceptions we did not debug.
 Metasploit contains many Java exploits outside of the subset we used, but
 the excluded exploits either only work against long obsolete versions of
 the JRE or are not well positioned to be used in drive-by-downloads.
 
\end_layout

\begin_layout Standard
We ran the ten exploits in our set under the following conditions: without
 the agent, with the agent but only enforcing the privilege escalation rule,
 and while enforcing both rules.
 We ran these conditions to respectively: establish that the exploits succeed
 against our JRE, test how effective the privilege escalation rule is without
 the security manager rule, and evaluate how effective the agent is in the
 strictest configuration currently available.
 Running the privilege escalation rule alone shows how effective the current
 tool is at stopping applet exploits with low runtime overhead.
 Overall, all ten of the exploits succeed against our JRE without the agent,
 four were stopped by the privilege escalation rule, and all ten were stopped
 when both rules were enforced.
 The exploits that were not stopped by the privilege escalation rule were
 either type confusion exploits or exploits that did not need to elevate
 the privileges of the payload class.
 The payload class does not need elevated privileges when it can directly
 access a privileged class to exploit.
 Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Exploit-experiment-summary"

\end_inset

 summarizes our results using the specific CVE's each exploit targeted.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
A summary of CVE's we ran exploits for and how effective the agent was at
 stopping them in the following conditions: (1) just the privilege escalation
 rule enforced and (2) both rules enforced.
 Blocked exploits were stopped by the agent before the malicious payload
 could run, but fully executed exploits were able to complete their malicious
 operations.
\begin_inset CommandInset label
LatexCommand label
name "tab:Exploit-experiment-summary"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="11" columns="3">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="3cm">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Exploited CVE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Privilege Escalation Enforced
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Both Rules Enforced
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2011-3544
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fully Executed
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Blocked
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2012-0507
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Blocked
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Blocked
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2012-4681
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fully Executed
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Blocked
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2012-5076
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fully Executed
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Blocked
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2013-0422
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Blocked
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Blocked
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2013-0431
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Blocked
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Blocked
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2013-1488
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fully Executed
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Blocked
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2013-2423
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fully Executed
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Blocked
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2013-2460
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Blocked
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Blocked
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2013-2465
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fully Executed
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Blocked
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Limitations
\end_layout

\begin_layout Standard
Neither of these rules will able to stop 100% of all Java exploits.
 Both rules are unable to catch exploits which are able to escape the sandbox
 without violating the constraints the rules impose.
 While the privilege escalation rule is able to stop many of the most common
 Java exploits (40% of tested exploits), the rule still does not catch a
 significant portion of the exploits.
 The SecurityManager rule is also not able to catch all exploits.
 While the SecurityManager rule was able to catch all tested exploits, Java
 makes it possible to write exploits that do not turn off the SecurityManager
 but are still able to cause significant damage.
 While the authors believe the rules created in this study provide a substantial
 improvement over the current sandbox implementation, the authors also believe
 that future work will be able to build upon the results of this study to
 create improved mitigation techniques.
\end_layout

\begin_layout Standard

\series bold
Internal Validity
\series default
: The source of data for this study was source code and comments.
 In most cases, security manager interactions could clearly be determined
 although the reason behind complex interactions may be misdiagnosed.
 Also comments and source code could have been taken out of context, leading
 to incorrect conclusions.
 Finally using two different reviewers leads to the possibility of different
 interpretations for the same data.
 Misdiagnosing complex interactions was reduced by using the FindBugs tool
 and the JVMTI tool to help with the analysis, providing a way for the researche
rs to test their analyses.
 The issue of interpreting comments and source code out of context was reduced
 by examining the whole file but can not be completely reduced without extra
 data sources, such as developer interviews.
 Reducing the possibility of misinterpreting these sections of the program
 is left to future work.
 The issue of using two different researchers reaching different conclusions
 was reduced by comparing the 6 different independent analyses when testing
 the methodology of the study.
\end_layout

\begin_layout Standard

\series bold
External Validity:
\series default
 The applications in the study were limited to open source programs, specificall
y well known applications included in the Qualitas Corpus and publicly available
 applications available on GitHub.
 It is possible that closed source applications interact with the security
 manager differently, although investigating this problem is left to future
 work.
 Another possible problem for the study is that 11 out of 46 applications
 where created by the Apache Software Foundation.
 This problem was reduced by filtering a larger set of applications initially
 for the Qualitas Corpus, showing that in a diverse set of 112 Java applications
, 83 were determined to not interact with the security manager at all from
 the initial filtering process.
 
\end_layout

\begin_layout Standard

\series bold
Reliability: 
\series default
While the majority of the study is easily replicable, certain aspects of
 the studies results change over time.
 Github search results are constantly changing and so using GitHub to generate
 a new dataset using our method would likely generate a different dataset.
 Another problem is that applications on GitHub can become inaccessible.
 Ever the course of the study, 2 applications either became private repositories
 or were removed from Github (FileManagerFtpHttpServer and Visor).
 It is also possible that different researchers reach different conclusions
 for what the project developers intended.
 This threat to validity was reduced by the two investigators cross checking
 how 6 applications were interpreted.
 We expect that with similar studies will reach similar conclusions.
\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Standard
The main findings of the study are:
\end_layout

\begin_layout Enumerate
The majority of applications that use the sandbox do not change the SecurityMana
ger (19/29 in Qualitas and 9/17 in GitHub).
  These applications either set a SecurityManager and never change it or
 never set a SecurityManager but are designed to work inside a sandbox if
 the application is ran inside a sandbox.
\end_layout

\begin_layout Enumerate
A small portion of the applications  studied used the SecurityManager for
 non security purposes (1/29 in Qualitas and 3/17 in GitHub).
\end_layout

\begin_layout Enumerate
Multiple developers had difficult implementing the security manager correctly,
 as shown by the vulnerable Freemind implementation and multiple developers'
 comments.
\end_layout

\begin_layout Standard
From the results of this study, we
\end_layout

\begin_layout Enumerate
Determined two rules which could be used to strengthen the sandbox in a
 majority of applications: the Privilege Escalation Rule and the SecurityManager
 Rule.
\end_layout

\begin_layout Enumerate
Tested the two rules against 10 of the most popular past Java exploits and
 were able to stop 40% of the exploits with the Privilege Escalation Rule
 and 100% with the SecurityManager rule.
\end_layout

\begin_layout Enumerate
Found the Privilege Escalation Rule could be implemented with low overhead.
\end_layout

\begin_layout Standard
With this study, we were able to take the first steps to understanding how
 Java applications use the sandbox.
 While these results are only from the studied open source applications,
 we believe that the results will generalize to other Java applications.
 We also believe that the study has found many important implications for
 future work to build upon:
\end_layout

\begin_layout Enumerate
Extra security can be gained by restricting Java applications from using
 rarely used features.
\end_layout

\begin_layout Enumerate
Java applications need a way to enforce architectural constraints when running
 other Java applications in a way that doesn't conflict with security- such
 as the ability to prevent the called application from calling System.exit()
 without setting the sandbox.
\end_layout

\begin_layout Enumerate
There is a need to help developers correctly implement the Java sandbox.
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "references"
options "ieeetr"

\end_inset


\end_layout

\end_body
\end_document
